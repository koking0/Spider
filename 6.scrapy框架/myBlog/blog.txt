小姐姐教我的 sklearn 逻辑回归





                                            sklearn 逻辑回归
Alex一晚上都没睡好觉，被IEEE-CIS Fraud Detection折磨的死去活来，不管怎么调参，用什么样的策略，评分就是上不去，这可不行，什么时候认过输，生死看淡，不服就干！结果：

第二天，Alex打算去工作室问问Bachelor，这家伙肯定还藏了不少东西没说，结果Bachelor不知道是因为心虚还是咋的，竟然没来，工作室只有一个肤白貌美大长腿的实习生MM在，听Bachelor说这个是实习生是个高手，也是MIT过来的，而且人家主修的就是人工智能这方面，Alex决定厚着脸皮去问问。
Alex：“Hi Coco, Do you know the credit card fraud detection we received recently?”
Coco：“你说啥？”
Alex：“我靠，你会说中文。”
Coco：“相较于你的英文，我还是听懂了你的中文。”
ALex：“。。。。。。”
ALex：“我说你知道咱们工作室最近接的那个信用卡欺诈检测的项目么？”
Coco：“知道啊，那个项目就是我接的，只不过现在是Bachelor负责，我跟进。”
Alex：“那太好了，Bachelor昨天给我讲了讲，但是我回去自己做的时候准确率出奇的低。”
Coco：“你跟我说说Bachelor讲了啥，我帮你看看吧。”
于是Alex就把昨天的逻辑回归又说了一遍…
Coco：“整体看来没问题，只不过Bachelor只讲了逻辑回归的原理，应用在这个项目上还需要一些处理。”
于是，Alex一边听着Coco的讲解，一边擦口水…

Coco倒是没多想，专心的给Alex讲解：
这样吧，我就给你捋一下工作室目前是怎么做的。
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

train_identity = pd.read_csv('/kaggle/input/ieee-fraud-detection/train_identity.csv')
train_transaction = pd.read_csv('/kaggle/input/ieee-fraud-detection/train_transaction.csv')
data = pd.merge(train_transaction, train_identity, on="TransactionID", how="left")
data.drop("TransactionID", axis=1, inplace=True)    # TransactionID说实话没啥用
data.drop("TransactionDT", axis=1, inplace=True)    # TransactionDT类似于时间戳，也没啥用
del train_identity, train_transaction

上来还是先把两张表的数据读进内存里，然后通过TransactionID连接起来制作一个train表，之后既可以把原来的两张表删了，不然会占用内存。
pd.set_option('display.max_columns',None)    # 设置pandas显示列不限制数量
pd.set_option('display.max_rows',None)       # 设置pandas显示行不限制数量
data.head()

数据预处理
首先还是去掉缺失值超过50%的特征：
na_count = data.isnull().sum().sort_values(ascending=False)
na_rate = na_count / len(data)
na_data = pd.concat([na_count,na_rate],axis=1,keys=['count','ratio'])
data.drop(na_data[na_data['ratio'] > 0.3].index, axis=1, inplace=True)

将所有的离散型数据对应为数值型数据，缺失值用均值填充:
for col in data.columns:
    if data[col].dtypes == "object":
        data[col], uniques = pd.factorize(data[col])
    data[col].fillna(data[col].mean(), inplace=True)

data.head()

其实在这个项目里，重要的是数据预处理而不是逻辑回归的算法。
拿到数据之后，先简单看一下，isFraud表示有没有没诈骗，也就是我们的y值，0表示没有被诈骗，1表示被诈骗了，但是在日常生活中，虽然诈骗比较多，但还是正常样本占大多数，所以我们先看一下正负样本的统计。
count_isFraud = pd.value_counts(data["isFraud"], sort=True)
count_isFraud.plot(kind="bar")    # 条形图
plt.title("Fraud statistics")
plt.xlabel("isFraud")
plt.ylabel("Frequency")


X = data.iloc[:, data.columns != "isFraud"]
Y = data.iloc[:, data.columns == "isFraud"]

通过条形图我们可以发现，正负样本量是非常不均衡的，这会对我们的模型计算产生很大的影响，我估计你昨天测试集的结果应该全都是0吧。
对于这种样本不均衡的数据最常使用的有两种解决方案：
1.过采样：通过1样本数据制造一些数据，让两种样本数据保持平衡；
2.下采样：在0样本数据中随机抽取跟1样本数据一样多的数据，让两种样本数据保持均衡。
# 过采样——通过第三方库可以很方便的实现
from imblearn.over_sampling import SMOTE

over_sample = SMOTE()
X_over_sample_data, Y_over_sample_data = over_sample.fit_sample(X.values, Y.values)
X_over_sample_data = pd.DataFrame(X_over_sample_data)
Y_over_sample_data = pd.DataFrame(Y_over_sample_data)

# 看一下过采样数据集的长度
print("Total number of normal =", len(Y_over_sample_data[Y_over_sample_data == 0]))
print("Total number of fraud =", len(Y_over_sample_data[Y_over_sample_data == 1]))

# 下采样
number_of_fraud = len(data[data.isFraud == 1])    # 统计被诈骗数据量
fraud_indices = np.array(data[data.isFraud == 1].index)    # 被诈骗数据索引
normal_indices = np.array(data[data.isFraud == 0].index)   # 正常数据索引

# 在正常数据中随机选择与被诈骗数据量相等的正常数据的索引
random_normal_indices = np.array(np.random.choice(normal_indices, number_of_fraud, replace=False))

# 将所有被诈骗的数据索引和随机选择的等量正常数据索引合并
under_sample_indices = np.concatenate([fraud_indices, random_normal_indices])
# 从原始数据中取出下采样数据集
under_sample_data = data.iloc[under_sample_indices, :]

X_under_sample = under_sample_data.iloc[:, under_sample_data.columns != "isFraud"]
Y_under_sample = under_sample_data.iloc[:, under_sample_data.columns == "isFraud"]

# 看一下下采样数据集的长度
print("Total number of under_sample_data =", len(under_sample_data))
print("Total number of normal =", len(under_sample_data[data.isFraud == 0]))
print("Total number of fraud =", len(under_sample_data[data.isFraud == 1]))

标准化
在我们做机器学习模型的时候，要保证特征之间的分布数据是差不多，也就是保证初始情况下每一列特征的重要程度是相似的，比如说card1这一列，它的数据相比如其它的数据都非常大，在训练模型的时候机器可能认为card1这行数据非常重要，但实际上并不能确定。
因此，我们需要对data进行标准化的处理，通过sklearn的preprocessing模块可以快速的帮助我们队数据做标准化：
from sklearn.preprocessing import StandardScaler

cols = X_under_sample.columns

for col in cols:
    X[col] = StandardScaler().fit_transform(X[col].values.reshape(-1, 1))

for col in cols:
    X_under_sample[col] = StandardScaler().fit_transform(X_under_sample[col].values.reshape(-1, 1))

for col in cols:
    X_over_sample_data[col] = StandardScaler().fit_transform(X_over_sample_data[col].values.reshape(-1, 1))

交叉验证
为了在不使用测试集的情况下验证模型的效果，通常在训练一个机器学习的模型之前，会对train数据集进行切分:

我们把训练集分成5份，然后进行五轮训练：
第一轮：第1份数据留作验证，2、3、4、5份数据用作训练模型；

第二轮：第2份数据留作验证，1、3、4、5份数据用作训练模型；

第三轮：第3份数据留作验证，1、2、4、5份数据用作训练模型；

第四轮：第4份数据留作验证，1、2、3、5份数据用作训练模型；

第五轮：第5份数据留作验证，1、2、3、4份数据用作训练模型；

最后针对每一轮训练的结果取一个平均的效果，会让我们的模型变得更加优秀，当然这个效果不用我们来实现，sklearn已经帮我们实现好了：
from sklearn.model_selection import train_test_split

简单来说，train_test_split就是输入训练集的X和Y，返回切分后的训练集X、Y，验证集X、Y。
# 对原始的全部数据进行切分
X_train, X_test, Y_train, y_test = train_test_split(X, Y, test_size=0.2)

# 对下采样数据集进行切分
X_under_sample_train, X_under_sample_test, Y_under_sample_train, Y_under_sample_test = train_test_split(X_under_sample, Y_under_sample, test_size=0.2)

# 对上采样数据集进行切分
X_over_sample_train, X_over_sample_test, Y_over_sample_train, Y_over_sample_test = train_test_split(X_over_sample_data, Y_over_sample_data, test_size=0.2)

模型评估
一个模型的好坏不能只看它的准确率，举一个简单的例子：
假设1000个人中，有900个人是正常的，有100个人被诈骗。

从这1000个人中抽出100人来测试某个模型，这100个人中有90个人是正常的，有10个人是被诈骗的。

有一个非常粗暴的模型，将输入的样本都判断为正常，那么这个模型在处理这100个数据的时候，会预测准那90个正常的，但剩下10个预测错误。

模型的准确率为90%，但是这显然不是一个好模型。

所以，在样本不均衡的情况下不能够使用准确率作为模型评估的标准，而要使用recall，也就是召回率。
计算recall需要先看一个表格：





正类
负类




检索到
True Positive（TP），正类判断为正类
False Positive（FP），负类判断为正类


未检索到
False Negative（FN），正类判断为负类
True Negative（TN），负类判断为负类


recall=TPTP+FNrecall = \frac{TP}{TP+FN}recall=TP+FNTP​
这看起来不是很好理解，我们再来举一个例子：
还是1000个人中，有900个人是正常的，有100个人被诈骗。

又有一个不靠谱的模型，将输入的样本50%判断为正常，50%判断为异常，我们的目的是找出所有被诈骗的。

经过这个模型的计算，得到500个模型认为的被诈骗人，但是500个人中只有50个人是被诈骗的，剩下450个都是正常的。

检索到的500个人中：

    50个异常数据被判断为异常，TP=50；

    450个正常数据被判断为异常，FP=450。

未被检索到的500个人中：

    50个异常数据被判断为正常，FN=50；

    450个正常数据被判断为正常，TN=450。

recall = 50 / (50 + 50) = 0.5

正则化惩罚项
我们训练模型的目标其实就是求出参数θ，假设通过计算得到θ1和θ2两个模型，尽管参数值截然不同，但在预测中有可能会得到相同的结果。
那么对于这两个模型，我们到底要选择哪一个呢？
在回答这个问题之前，我们要了解一个知识点，过拟合。
过拟合问题是机器学习中很让人头疼的一件事情，举个例子：

暂时不用管这是什么算法，我们的目标是对红绿色的点进行分类，可以看到对于大部分数据区分的还是比较完美的，但是绿色范围在左下方突出了一个角，为了去拟合在红色堆里那个按照正常的逻辑应该判定为红色点的绿色点，但是，有可能那个离群的绿色点是个错误数据。
这就是过拟合，只能说我们的模型对于训练集来说太过完美，这可并不是一件好事，我们的目的是想让模型能够匹配所有的数据，不仅仅局限于训练集。
过拟合通常发生在训练数据不够多或者训练过度（overtrainging）的情况下，而正则化方法就是为了解决过拟合的问题而诞生的，通过在损失函数中引入额外的计算项，可以有效的防止过拟合，提高模型的泛化能力。
目标函数=损失函数+正则化惩罚项目标函数 = 损失函数 + 正则化惩罚项目标函数=损失函数+正则化惩罚项
目前有两种正则化惩罚项：
L1参数正则化：ω(θ)=∣∣w∣∣=∑i∣wi∣\omega(\theta)=||w||=\sum_i|w_i|ω(θ)=∣∣w∣∣=i∑​∣wi​∣
L2参数正则化：ω(θ)=12∣w∣2\omega(\theta)=\frac{1}{2}|w|^2ω(θ)=21​∣w∣2
逻辑回归模型
我们已经学习过逻辑回归算法的推导过程，能够将计算过程由代码实现，带如果每次使用逻辑回归都要再写一遍代码显然是非常繁琐的，sklearn包帮我们实现好了一个很优秀的逻辑回归训练器，只需要输入相应的参数，就可以造出一个训练器。
import time
from sklearn.metrics import recall_score
from sklearn.model_selection import KFold
from sklearn.linear_model import LogisticRegression

def kfold_scores(x_train_data, y_train_data):
    start_time = time.time()
    fold = KFold(3, shuffle=True)       # 3折交叉验证
    c_param_range = [10, 100, 1000]      # 惩罚力度，正则化惩罚项的系数

    # 做可视化展示
    results_table = pd.DataFrame(index=range(len(c_param_range), 2), columns=["C_parameter", "Mean recall scores"])
    results_table["C_parameter"] = c_param_range

    # 不确定哪一个正则化惩罚项的系数更好，因此采用循环确认
    index = 0
    for c_param in c_param_range:
        print('--------------------------------------------------------------------------------')
        print("If C parameter =", c_param, end="\n\n")

        # 做交叉验证
        recall_accs = []
        lr = LogisticRegression(C=c_param, penalty='l1', solver='liblinear', max_iter=10000)
        for iteration, indices in enumerate(fold.split(x_train_data)):
            # 拟合训练数据
            lr.fit(x_train_data.iloc[indices[0], :], y_train_data.iloc[indices[0], :].values.ravel())
            # 使用验证集得出预测数据
            y_predicted_undersample = lr.predict(x_train_data.iloc[indices[1], :])
            # 计算recall
            recall_acc = recall_score(y_train_data.iloc[indices[1], :], y_predicted_undersample)
            recall_accs.append(recall_acc)
            print('\tIteration ', iteration, ': recall score = ', recall_acc)

        index += 1

        # 计算recall的平均值
        results_table.loc[index, "Mean recall scores"] = np.mean(recall_accs)
        print('Mean recall score = ', results_table.loc[index, "Mean recall scores"], end="\n\n")
        print('--------------------------------------------------------------------------------')

    best_c_param = results_table.loc[results_table['Mean recall scores'].astype(float).idxmax()]['C_parameter']
    print('Best C parameter = ', best_c_param, "\t duration: ", time.time() - start_time)
    return lr, best_c_param

# 对原始全部数据进行测试
# lr1, param1 = kfold_scores(X_train, Y_train)
del X_train
del Y_train

# 对下采样数据进行测试
lr2, param2 = kfold_scores(X_under_sample_train, Y_under_sample_train)
del X_under_sample_train
del Y_under_sample_train

# 对上采样数据进行测试
# lr3, param3 = kfold_scores(X_over_sample_train, Y_over_sample_train)
del X_over_sample_train
del Y_over_sample_train

test_identity = pd.read_csv('/kaggle/input/ieee-fraud-detection/test_identity.csv')
test_transaction = pd.read_csv('/kaggle/input/ieee-fraud-detection/test_transaction.csv')
data = pd.merge(test_transaction, test_identity, on="TransactionID", how="left")
test_ID = data[["TransactionID"]]
data.drop("TransactionID", axis=1, inplace=True)    # TransactionID说实话没啥用
data.drop("TransactionDT", axis=1, inplace=True)    # TransactionDT类似于时间戳，也没啥用

for col in data.columns:
    if col.startswith("id"):
        newcol = col.replace("-", "_")
        data.rename(columns={col: newcol},inplace=True)

del test_identity, test_transaction

data.drop(na_data[na_data['ratio'] > 0.3].index, axis=1, inplace=True)
for col in data.columns:
    if data[col].dtypes == "object":
        data[col], uniques = pd.factorize(data[col])
    data[col].fillna(data[col].mean(), inplace=True)
for col in cols:
    data[col] = StandardScaler().fit_transform(data[col].values.reshape(-1, 1))

test_predict = lr2.predict(data.values)
submission = pd.concat([test_ID, pd.Series(test_predict)], axis=1, keys=["TransactionID", "isFraud"])
submission.to_csv("submission1.csv", index=False)

好了，这就是通过sklearn来做这个逻辑回归的项目，咱们可以吧结果提交评测网站IEEE-CIS Fraud Detection看看效果怎么样：

Coco：“你看，这么做是不是效果比你之前那个好一点了。”
Alex：“我靠，真大。。。。”
Coco：“什么真大？”
Alex：“额，分数啊。”
Coco：“行，大概就是这个套路，剩下的是就是细节的问题了，你回去也可以试试过采样和正常数据能达到什么效果。”
Alex：“不用回去了，我就在这试。”




买房子，就该用线性回归





                                            线性回归
美国房价问题
Alex经过一年的努力，终于拿到了美国波士顿麻省理工学院的研究生录取通知书，在远离家乡的地方上学，Alex想在波士顿买一套房子，他手头有一些积蓄，在网上找了几套自己满意的房子，但是又不敢相信网上的价格，人生地不熟的，Alex怕被宰，就从自己做数据分析的朋友Bachelor手里要到了过去几年一些有关波士顿房价的资料。

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

!dir

 驱动器 G 中的卷是 Code
 卷的序列号是 AC81-1911

 G:\Python\PythonAI\第二模块_人工智能之机器学习、智能玩具\Linear_Regression_Learn 的目录

2020/02/17  21:36    <DIR>          .
2020/02/17  21:36    <DIR>          ..
2020/01/27  09:01    <DIR>          .ipynb_checkpoints
2019/12/15  21:33            13,370 data_description.txt
2020/02/10  10:16           195,892 HousePrices.zip
2020/02/17  21:36            43,963 Linear_Regression_Learn.ipynb
2019/12/15  21:33            31,939 sample_submission.csv
2020/02/10  09:08            35,527 submisson.csv
2019/12/15  21:33           451,405 test.csv
2019/12/15  21:33           460,676 train.csv
2020/02/14  16:40           565,862 线性回归.pptx
               8 个文件      1,798,634 字节
               3 个目录 92,257,865,728 可用字节

house_prices = pd.read_csv("train.csv")

Bachelor给的数据非常非常多，包含各个方面。
house_prices







      Id
      MSSubClass
      MSZoning
      LotFrontage
      LotArea
      Street
      Alley
      LotShape
      LandContour
      Utilities
      ...
      PoolArea
      PoolQC
      Fence
      MiscFeature
      MiscVal
      MoSold
      YrSold
      SaleType
      SaleCondition
      SalePrice




      0
      1
      60
      RL
      65.0
      8450
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      2
      2008
      WD
      Normal
      208500


      1
      2
      20
      RL
      80.0
      9600
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      5
      2007
      WD
      Normal
      181500


      2
      3
      60
      RL
      68.0
      11250
      Pave
      NaN
      IR1
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      9
      2008
      WD
      Normal
      223500


      3
      4
      70
      RL
      60.0
      9550
      Pave
      NaN
      IR1
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      2
      2006
      WD
      Abnorml
      140000


      4
      5
      60
      RL
      84.0
      14260
      Pave
      NaN
      IR1
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      12
      2008
      WD
      Normal
      250000


      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...


      1455
      1456
      60
      RL
      62.0
      7917
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      8
      2007
      WD
      Normal
      175000


      1456
      1457
      20
      RL
      85.0
      13175
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      MnPrv
      NaN
      0
      2
      2010
      WD
      Normal
      210000


      1457
      1458
      70
      RL
      66.0
      9042
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      GdPrv
      Shed
      2500
      5
      2010
      WD
      Normal
      266500


      1458
      1459
      20
      RL
      68.0
      9717
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      4
      2010
      WD
      Normal
      142125


      1459
      1460
      20
      RL
      75.0
      9937
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      6
      2008
      WD
      Normal
      147500



1460 rows × 81 columns

为了方便分析呢，先提取其中三个特征作为分析素材，分别是LotArea表示房屋面积，TotalBsmtSF表示地下室的总面积，SalePrice表示的就是房价了。
house_prices[['LotArea', 'TotalBsmtSF', 'SalePrice']]







      LotArea
      TotalBsmtSF
      SalePrice




      0
      8450
      856
      208500


      1
      9600
      1262
      181500


      2
      11250
      920
      223500


      3
      9550
      756
      140000


      4
      14260
      1145
      250000


      ...
      ...
      ...
      ...


      1455
      7917
      953
      175000


      1456
      13175
      1542
      210000


      1457
      9042
      1152
      266500


      1458
      9717
      1078
      142125


      1459
      9937
      1256
      147500



1460 rows × 3 columns

理工科出生的Alex想起了曾经学过的知识，想计算一下自己喜欢的那几套房子的大概房价是多少，到买房的时候心里好有点数。
于是他把数据重新处理了一下。
sample_test_data = house_prices[['LotArea', 'TotalBsmtSF', 'SalePrice']].copy()

sample_test_data.rename(columns={'LotArea':'x1', 'TotalBsmtSF':'x2', 'SalePrice':'y'}, inplace=True)

sample_test_data







      x1
      x2
      y




      0
      8450
      856
      208500


      1
      9600
      1262
      181500


      2
      11250
      920
      223500


      3
      9550
      756
      140000


      4
      14260
      1145
      250000


      ...
      ...
      ...
      ...


      1455
      7917
      953
      175000


      1456
      13175
      1542
      210000


      1457
      9042
      1152
      266500


      1458
      9717
      1078
      142125


      1459
      9937
      1256
      147500



1460 rows × 3 columns

作为一名优秀的理科生，看见熟悉的x和y觉得舒服多了。
接下来就是建立一个数学模型了，简单的说就是找一个符合x1、x2与y关系的式子，这个简单嘛，高中就学过的东西，待定系数法呗，只不过从一个x变成了x1、x2而已，那设两个未知数不就可以了。
设：y=ax1+bx2y=ax_1+b_x2y=ax1​+bx​2
这公式那么一写阿，瞅起来像是一个线性模型，简单理解也就是一条线嘛。
再仔细一看，这条线还必须过原点，那就麻烦了，还不能确定这个x1、x2跟y组成的函数图像一定过原点阿，必须要经过原点这个限制可就太大了。
没办法，再加一个未知数吧，把方程改成y=ax1+bx2+cy=ax_1+b_x2+cy=ax1​+bx​2+c
这样以来，在没确定a、b、c之前，函数图像可以是空间中任意的。
接下来就是把a、b、c确定下来了，只要它们三个确定下来就好办了，把自己喜欢的房子的平均房间数和到五个波士顿就业中心的平均距离直接代入x1、x2，不就能计算出来一个大概的房价y了么。
看着
y=ax1+bx2+cy=ax_1+b_x2+cy=ax1​+bx​2+c
这个式子，Alex自己都笑了，这玩意是高中才写的方程，自己孬好也是上过大学的人，于是把方程又改了改:
y=θ1x1+θ2x2+θ0y=θ_1x_1+θ_2x_2+θ_0y=θ1​x1​+θ2​x2​+θ0​
这样，如果跟房价有关的x特征很多的话，就能把方程写成矩阵相乘的形式了：
yθ(x)=θ0x0+θ1x1+θ2x2+...+θixi+...+θn−1xn−1+θnxn=∑i=0n=θTxy_\theta(x)=\theta_0x_0+\theta_1x_1+\theta_2x_2+...+\theta_ix_i+...+\theta_{n-1}x_{n-1}+\theta_nx_n=\sum_{i=0}^n=\theta^Txyθ​(x)=θ0​x0​+θ1​x1​+θ2​x2​+...+θi​xi​+...+θn−1​xn−1​+θn​xn​=i=0∑n​=θTx
这个θi阿，有个学名叫权重项。
这个θ0x0呢,就是之前写的θ0,让x0=1不就是咯。
也就是说，我得在我的数据里再加一行x0的数据，值全部设置为1就行了。
sample_test_data['x0'] = 1
sample_test_data = sample_test_data[['y', 'x0', 'x1', 'x2']] # 更换一下y、x1、x2、x0的顺序，方便看而已，无意义

sample_test_data







      y
      x0
      x1
      x2




      0
      208500
      1
      8450
      856


      1
      181500
      1
      9600
      1262


      2
      223500
      1
      11250
      920


      3
      140000
      1
      9550
      756


      4
      250000
      1
      14260
      1145


      ...
      ...
      ...
      ...
      ...


      1455
      175000
      1
      7917
      953


      1456
      210000
      1
      13175
      1542


      1457
      266500
      1
      9042
      1152


      1458
      142125
      1
      9717
      1078


      1459
      147500
      1
      9937
      1256



1460 rows × 4 columns

毕竟阿，这个方程是咱自己写的，假设最后算出来了一套θi，为了拟合大部分的数据，按照θi计算出来的房价跟真实的房价之间还是有一定的差距的。
如果说对比真实的房价数据，根据咱们这个方程计算出来的房价跟真实的房价相差无几，那不就是想要的结果么，我输入想要买的房子的x特征值，计算出来的房价y就越接近真实房价。
当然这是后话，现在咱们的目的是啥，就是让通过咱们方程计算出来的房价跟真实的房价的差值越小越好嘛。
y(i)=θTxi+ϵiy_{(i)}=\theta^Tx_i+\epsilon_iy(i)​=θTxi​+ϵi​
对于每一套房子，y(i)表示真实的房价，通过θTxi计算出来的是模型预测房价，εi是预测房价跟真实房价之间的差距，当然εi有可能是正数也有可能是负数。
目的什么来着，让差距越来越小对吧，也就是让εi越来越小，当然这个越来越小是说差距越来越小，也就是绝对值越来越接近于0。
给方程移下项：
ϵi=y(i)−θTxi\epsilon_i=y_{(i)}-\theta^Tx_iϵi​=y(i)​−θTxi​
这时候咱们再来回顾一下阿，对于方程
y(i)=θTxi+ϵiy_{(i)}=\theta^Tx_i+\epsilon_iy(i)​=θTxi​+ϵi​
θTxi是表示系数，如果在坐标系表示的话是由x确定一个图像。
当只有一个x的时候，图像是一维的，也就是平面上的一条线；
当有两个x的时候，图像是二维的，也就是空间里的一个面；
当有更多x的时候，我是想象不出来了……
就拿只有两个x举例随便画一个图像：

在这个图像里，假设青蓝色的那个平面表示的就是θTxi，真实房价y(i)在图中表示的红色的点。
这样看就清晰了，目的是让
ϵi=y(i)−θTxi\epsilon_i=y_{(i)}-\theta^Tx_iϵi​=y(i)​−θTxi​
的绝对值越小越好，表示在图像上就是红色的点越接近青蓝色的平面越好。
这里要明确一个思想，真实房价是确定了，也就是y(i)、红色的点是确定的，而青蓝色的平面θTxi才是变动的，也就是说，在空间里，我们要移动平面来拟合点，找到哪一个平面到所有点的距离最小。
这个预测房价与真实房价之间的距离，也就是误差ε(i)是独立并同分布，并且服从均值为0方差为σ2的高斯分布。
这里突然间冒出来三个不熟悉的名词解释一下阿：
独立：各个样本点之间是相互独立的。也就是说，Alex去波士顿买房，跟Bachelor早波士顿买房，只要两个人买的不是同一套房子，它们之间是没有关系的，买到的房价多少只跟各个房东有关。
同分布：数据的来源必须相同。Alex是想在波士顿买房，所以需要的是过去几年波士顿的房价数据，如果拿得是纽约的房价数据，显然是不符合需求的，建立的数学模型也不准确。
高斯分布：也就是正态分布，一种连续型随机变量的概率密度函数。先来看一下正态分布的函数图像：

看起来是不是特别圆润，符合一种对称美，是不是觉得手感肯定特别好。
为什么要用高斯分布？
其实我们一开始并不能确定误差一定服从高斯分布，只不过阿，根据前人的经验，大多数误差经过测量被证实是服从高斯分布的，说明高斯分布对误差假设来说是一种很好的模型。
在自然界与生产中，一些现象受到许多相互独立的随机因素的影响，也就是我们买房过程中的每套住房的平均房间数、到五个波士顿就业中心的平均距离，如果每个因素所产生的影响都很微小，总的影响可以看作是服从正态分布的。
当然上面那个高斯分布图看起来不是很清晰，我们可以用numpy和matplotlib自己来画一个简单的高斯分布函数图像。
在数学上，正态分布的概率密度函数：
f(x)=12πσe−(x−u)22σ2f(x)=\frac{1}{\sqrt{2π}\sigma}e^{\frac{-(x-u)^2}{2\sigma^2}}f(x)=2π​σ1​e2σ2−(x−u)2​
当u=0，σ=1时，正态分布称为标准正态分布：
f(x)=12πe−x22f(x)=\frac{1}{\sqrt{2π}}e^{\frac{-x^2}{2}}f(x)=2π​1​e2−x2​
def gaussian(x, mean, sigma):
    return (np.exp((-(x - mean) ** 2) / (2 * sigma ** 2)) / (np.sqrt(2 * np.pi) * sigma))

mean, sigma = 0, 1
x = np.arange(-3, 3, 0.001)
plt.plot(x, gaussian(x, mean, sigma))
plt.show()


从高斯分布图可知，[-2,2]之间的分布占大部分，啥意思呢，说的其实是预测房价跟真实房价大多数情况下都是差异不大的。
在我们的房价预测问题中，均值μ=0，所以可以把公式写成：
f(x)=12πσe−x22σ2f(x)=\frac{1}{\sqrt{2π}\sigma}e^{-\frac{x^2}{2\sigma^2}}f(x)=2π​σ1​e−2σ2x2​
之前所假设的是误差ε(i)服从正态分布，所以ε(i)就是正态分布函数中的x，我们再把ε(i)代入到公式中：
f(ε(i))=12πσe−ε(i)22σ2f(ε_{(i)})=\frac{1}{\sqrt{2π}\sigma}e^{-\frac{ε_{(i)}^2}{2\sigma^2}}f(ε(i)​)=2π​σ1​e−2σ2ε(i)2​​
我们把之前推导出的结果
ϵi=y(i)−θTxi\epsilon_i=y_{(i)}-\theta^Tx_iϵi​=y(i)​−θTxi​
也就是预测房价与真实房价之间的差距，再代入到公式中：
f(y(i)−θTxi)=12πσe−(y(i)−θTxi)22σ2f(y_{(i)}-θ^Tx_i)=\frac{1}{\sqrt{2π}\sigma}e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}f(y(i)​−θTxi​)=2π​σ1​e−2σ2(y(i)​−θTxi​)2​
在这个公式中，y(i)表示的真实房价，是已知的，x(i)呢，是每间房子的特征，也就是房屋的平均房间数之类的，也是已知的。
也就是说，整个公式中，只有θT是未知的。
这样的话，咱们把自变量换一下，整成一个关于未知数θ的函数：
L(θ)=12πσe−(y(i)−θTxi)22σ2L(θ)=\frac{1}{\sqrt{2π}\sigma}e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}L(θ)=2π​σ1​e−2σ2(y(i)​−θTxi​)2​
我们一开始的目的是想让误差变小，在正态分布中，对于自变量x，绝对值越小，越接近于0，因变量的值越大。
好了，现在我们的目的进阶了一下，让L(θ)的值越大越好。
那么，怎么才能让L(θ)的值变大呢？
我们不是有往年的波士顿房价资料么，把以前的一些资料全部代入进去不就行了。
代入一个，得到一个L(θ1)，再代入一个得到一个L(θ2)，然后一直代入，一直代入……
咱们是想让建立的数学模型最好能够拟合所有的样本，也就是说，让所有的L(θ)都最大。
现在把所有的L(θ)整合起来，做一个累乘：
L(θ)=∏i=1n12πσe−(y(i)−θTxi)22σ2L(θ)=\prod_{i=1}^{n}\frac{1}{\sqrt{2π}\sigma}e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}L(θ)=i=1∏n​2π​σ1​e−2σ2(y(i)​−θTxi​)2​
为什么要做累乘而不是累加呢？
这个其实跟数学有关，多个样本之间的累乘依然保留原本的分布模式，并且会使常见的概率更常见，这个概率对所有的样本关联性更强。
累加当然可以用，假如说L(θi)={1,2,3,4,5,6,7,8,9}，把所有的数累加起来，其结果sum_L(θi)=45，但是如果把所有的结果累乘起来，其结果ride_L(θi)=362880。
这个时候，如果缺了一个数7，那么sum_L(θi)’=38，ride_L(θi)’=51840，累乘的结果降低的更多，说明累乘的结果对每一个样本的关联性更大。
对于L(θ)，它有一个学名叫似然函数。
来看一下定义：似然函数也是一个概率密度函数L(θ∣x)，表示在样本值x已知的情况下求最可能的θ值；实际运用中，根据我们的样本去估计参数值，找到最最符合的参数，使得与我们的数据组合后恰好是真实值。
暂时不需要去深刻的理解似然函数的概念，咱现在的主要目的是买房。
现在得到了一个累乘的结果L(θ)，但是累乘算起来比较麻烦，咱们可以把累乘转换为累加，方法是对等式两边同时取对数：
lnL(θ)=ln∏i=1n12πσe−(y(i)−θTxi)22σ2ln^{L(θ)}=ln^{\prod_{i=1}^{n}\frac{1}{\sqrt{2π}\sigma}e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}}lnL(θ)=ln∏i=1n​2π​σ1​e−2σ2(y(i)​−θTxi​)2​
虽然转换了，但是效果还是一样的，只是通过累加来计算而已。
根据对数运算的性质，可以将累乘计算提到ln前边，变成累加运算：
lnL(θ)=∑i=1nln12πσe−(y(i)−θTxi)22σ2ln^{L(θ)}=\sum_{i=1}^nln^{\frac{1}{\sqrt{2π}\sigma}e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}}lnL(θ)=i=1∑n​ln2π​σ1​e−2σ2(y(i)​−θTxi​)2​
再看一下右式ln运算的真数：
12πσe−(y(i)−θTxi)22σ2\frac{1}{\sqrt{2π}\sigma}e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}2π​σ1​e−2σ2(y(i)​−θTxi​)2​
这也是一个乘法运算，而且前一项
12πσ\frac{1}{\sqrt{2π}\sigma}2π​σ1​
是一个常数，后一项
e−(y(i)−θTxi)22σ2e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}e−2σ2(y(i)​−θTxi​)2​
根据对数运算的性质可以消去e。
化简一下，公式就变成了：
lnL(θ)=∑i=1n(ln12πσ+lne−(y(i)−θTxi)22σ2)ln^{L(θ)}=\sum_{i=1}^n(ln^{\frac{1}{\sqrt{2π}\sigma}}+ln^{e^{-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}}})lnL(θ)=i=1∑n​(ln2π​σ1​+lne−2σ2(y(i)​−θTxi​)2​)
=∑i=1n(ln12πσ−(y(i)−θTxi)22σ2)=\sum_{i=1}^n(ln^{\frac{1}{\sqrt{2π}\sigma}}-\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2})=i=1∑n​(ln2π​σ1​−2σ2(y(i)​−θTxi​)2​)
=∑i=1nln12πσ−∑i=1n(y(i)−θTxi)22σ2=\sum_{i=1}^nln^{\frac{1}{\sqrt{2π}\sigma}}-\sum_{i=1}^n\frac{(y_{(i)}-θ^Tx_i)^2}{2\sigma^2}=i=1∑n​ln2π​σ1​−i=1∑n​2σ2(y(i)​−θTxi​)2​
之前我们分析过了，整个式子里只有θ𝑇是未知数，所以可以先把常数项能化简的化简，能提前的提前，将公式化简为：
lnL(θ)=nln12πσ−12σ2∑i=1n(y(i)−θTxi)2ln^{L(θ)}=nln^{\frac{1}{\sqrt{2π}\sigma}}-{\frac{1}{2\sigma^2}}\sum_{i=1}^n{(y_{(i)}-θ^Tx_i)^2}lnL(θ)=nln2π​σ1​−2σ21​i=1∑n​(y(i)​−θTxi​)2
这时候再看一下公式的常数项：
nln12πσ和1σ2nln^{\frac{1}{\sqrt{2π}\sigma}}和{\frac{1}{\sigma^2}}nln2π​σ1​和σ21​
把1/2保留到变量项里，后续有用。
我们的目的是让似然函数L(θ)越大越好，也就是lnL(θ)越大越好，也就是让
12∑r=1n(y(i)−θTxi)2{\frac{1}{2}}\sum_{r=1}^n{(y_{(i)}-θ^Tx_i)^2}21​r=1∑n​(y(i)​−θTxi​)2
越小越好。
写成目标函数:
J(θ)=12∑r=1n(y(i)−θTxi)2J(θ)={\frac{1}{2}}\sum_{r=1}^n{(y_{(i)}-θ^Tx_i)^2}J(θ)=21​r=1∑n​(y(i)​−θTxi​)2
你可能觉得，
y(i)−θTxiy_{(i)}-θ^Tx_iy(i)​−θTxi​
这个式子不就是之前推导出来的么，整了那么一大圈，最后的出来的还是这个。
实则不然，现在要计算的是：J(θ)的最小值，
J(θ)=(y(i)−θTxi)2J(θ)=(y_{(i)}-θ^Tx_i)^2J(θ)=(y(i)​−θTxi​)2
当x只有一维取值的时候，这是一个二次函数，用高中的话讲就是一个开口向上的二次函数，有最小值，怎么求呢？
求导，导数为0的时候取极值，极值中存在最值。
我们得到的目标函数J(θ)不是简单的二次函数，而是将所有的x(i)映射到一个x上。
现在得到了目标函数：
J(θ)=12∑i=1n(y(i)−θTxi)2J(θ)={\frac{1}{2}}\sum_{i=1}^n{(y_{(i)}-θ^Tx_i)^2}J(θ)=21​i=1∑n​(y(i)​−θTxi​)2
转换成矩阵相乘的形式并化简一下：
J(θ)=12(Xθ−y)T(Xθ−y)J(θ)={\frac{1}{2}}({Xθ-y})^T({Xθ-y})J(θ)=21​(Xθ−y)T(Xθ−y)
=12((Xθ)T−yT)(Xθ−y)={\frac{1}{2}}({{(Xθ)}^T-y^T})({Xθ-y})=21​((Xθ)T−yT)(Xθ−y)
=12(θTXT−yT)(Xθ−y)={\frac{1}{2}}({θ^TX^T-y^T})({Xθ-y})=21​(θTXT−yT)(Xθ−y)
=12(θTXTXθ−θTXTy−yTXθ+yTy)={\frac{1}{2}}(θ^TX^TXθ-θ^TX^Ty-y^TXθ+y^Ty)=21​(θTXTXθ−θTXTy−yTXθ+yTy)
咱们的未知数是θ，现在是一个关于θ的函数，对θ求导得：
J′(θ)=XTXθ−XTyJ'(θ)=X^TXθ-X^TyJ′(θ)=XTXθ−XTy
令J’(θ)=0得：
XTXθ−XTy=0X^TXθ-X^Ty=0XTXθ−XTy=0
XTXθ=XTyX^TXθ=X^TyXTXθ=XTy
θ=(XTX)−1XTyθ=(X^TX)^{-1}X^Tyθ=(XTX)−1XTy
现在，我们终于得到得到最终的θ了，为什么说最终了呢？X是已经获得的房屋的数据，y是房价，都是已知的，直接代入就OK了。
有了公式，现在回头来看看真实的问题和真实的数据该怎么处理：
House Prices: Advanced Regression Techniques
房价：先进的回归技术
housing = pd.read_csv("train.csv")

housing







      Id
      MSSubClass
      MSZoning
      LotFrontage
      LotArea
      Street
      Alley
      LotShape
      LandContour
      Utilities
      ...
      PoolArea
      PoolQC
      Fence
      MiscFeature
      MiscVal
      MoSold
      YrSold
      SaleType
      SaleCondition
      SalePrice




      0
      1
      60
      RL
      65.0
      8450
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      2
      2008
      WD
      Normal
      208500


      1
      2
      20
      RL
      80.0
      9600
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      5
      2007
      WD
      Normal
      181500


      2
      3
      60
      RL
      68.0
      11250
      Pave
      NaN
      IR1
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      9
      2008
      WD
      Normal
      223500


      3
      4
      70
      RL
      60.0
      9550
      Pave
      NaN
      IR1
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      2
      2006
      WD
      Abnorml
      140000


      4
      5
      60
      RL
      84.0
      14260
      Pave
      NaN
      IR1
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      12
      2008
      WD
      Normal
      250000


      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...


      1455
      1456
      60
      RL
      62.0
      7917
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      8
      2007
      WD
      Normal
      175000


      1456
      1457
      20
      RL
      85.0
      13175
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      MnPrv
      NaN
      0
      2
      2010
      WD
      Normal
      210000


      1457
      1458
      70
      RL
      66.0
      9042
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      GdPrv
      Shed
      2500
      5
      2010
      WD
      Normal
      266500


      1458
      1459
      20
      RL
      68.0
      9717
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      4
      2010
      WD
      Normal
      142125


      1459
      1460
      20
      RL
      75.0
      9937
      Pave
      NaN
      Reg
      Lvl
      AllPub
      ...
      0
      NaN
      NaN
      NaN
      0
      6
      2008
      WD
      Normal
      147500



1460 rows × 81 columns

数据预处理
拿到数据之后，不是上来就要进行计算的，首先要做的就是数据预处理。
首先，我们来分析一下每一个x特征：
MSSubClass: Identifies the type of dwelling involved in the sale.
MSSubClass：标识参与销售的住宅类型。
    20	1-STORY 1946 & NEWER ALL STYLES
       1946年1层和更新的所有样式
    30	1-STORY 1945 & OLDER
       1945年1层及以上
    40	1-STORY W/FINISHED ATTIC ALL AGES
       1层，带成品阁楼，所有年龄段
    45	1-1/2 STORY - UNFINISHED ALL AGES
       1-1/2层-未完成所有年龄段
    50	1-1/2 STORY FINISHED ALL AGES
       1-1/2层完成所有年龄段
    60	2-STORY 1946 & NEWER
       1946年2层及以上
    70	2-STORY 1945 & OLDER
       1945年2层及以上
    75	2-1/2 STORY ALL AGES
       2-1/2层，所有年龄段
    80	SPLIT OR MULTI-LEVEL
       拆分或多级
    85	SPLIT FOYER
       分体式门厅
    90	DUPLEX - ALL STYLES AND AGES
       复式-所有样式和年龄
   120	1-STORY PUD (Planned Unit Development) - 1946 & NEWER
      一层建筑（计划单元开发）-1946年及更新版本
   150	1-1/2 STORY PUD - ALL AGES
      1-1/2层布德-所有年龄段
   160	2-STORY PUD - 1946 & NEWER
      两层楼的PUD-1946及更新版本
   180	PUD - MULTILEVEL - INCL SPLIT LEV/FOYER
      PUD-多级-包括分离式LEV/门厅
   190	2 FAMILY CONVERSION - ALL STYLES AND AGES
      2家庭转换-所有风格和年龄

虽然没太看懂啥意思，但是大致就是MSSubClass越高越好，从一两层的到复式再到什么家庭转换，看着就感觉挺贵的样子。
先看一下MSSubClass这一列有没有缺失值。
housing["MSSubClass"].isnull().sum()

0

MSSubClass这一列数据状况良好，没有缺失值，看一下它的分布情况。
plt.scatter(housing["MSSubClass"], housing["SalePrice"], )
plt.show()


这么一看分布的话，我们之前的猜测不成立啊，MSSubClass和SalePrice不是正相关的关系，那它俩的关系先待定。
通过散点图虽然能看到不同房价的分布，但是有些地方很多点重合在一起，很难看出房价密度。
这时候，我们给MSSubClass和SalePrice添加一个抖动，抖动只是让它在图上的显示位置稍微偏离一下，并不会更改真实的数据，然后再设置一下透明度，重叠的点越多，图像颜色越深。
sns.regplot(data=housing, x="MSSubClass", y="SalePrice", x_jitter=3, scatter_kws={"alpha":0.3})


如图可见，大部分MSSubClass都在0~100之内，而MSSubClass与SalePrice的拟合线接近于一条直线，而且有点偏向于负相关。
MSZoning: Identifies the general zoning classification of the sale.
MSZoning：标识销售的一般分区分类。
   A	Agriculture
       农业
   C	Commercial
       商业
   FV	Floating Village Residential
       流动村住宅
   I	Industrial
       工业
   RH	Residential High Density
       住宅高密度
   RL	Residential Low Density
       住宅低密度
   RP	Residential Low Density Park
       住宅低密度公园
   RM	Residential Medium Density
       住宅中密度

上来还是先看有没有缺失值：
housing["MSZoning"].isnull().sum()

housing["MSZoning"].value_counts()

没有缺失值，还是看一下MSZoning跟SalePrice的关系，但是我们看一下数据：
housing["MSZoning"]

数据并不是常规的数值，而是字母变量，我们要把字母变量对应到数值。
确定一个简单的对应关系：
1 <—— A    Agriculture
2 <—— C    Commercial
3 <—— FV   Floating Village Residential
4 <—— I    Industrial
5 <—— RH   Residential High Density
6 <—— RL   Residential Low Density
7 <—— RP   Residential Low Density Park
8 <—— RM   Residential Medium Density
housing.loc[housing["MSZoning"] == "A", "MSZoning"] = 1.0
housing.loc[housing["MSZoning"] == "C (all)", "MSZoning"] = 2.0
housing.loc[housing["MSZoning"] == "FV", "MSZoning"] = 3.0
housing.loc[housing["MSZoning"] == "I", "MSZoning"] = 4.0
housing.loc[housing["MSZoning"] == "RH", "MSZoning"] = 5.0
housing.loc[housing["MSZoning"] == "RL", "MSZoning"] = 6.0
housing.loc[housing["MSZoning"] == "RP", "MSZoning"] = 7.0
housing.loc[housing["MSZoning"] == "RM", "MSZoning"] = 8.0

housing["MSZoning"].value_counts()

sns.regplot(data=housing, x="MSZoning", y="SalePrice", x_jitter=0.4, scatter_kws={"alpha":0.3})


哎呀我去，我就随便一对应，没想到对应出来一个正相关。
LotFrontage: Linear feet of street connected to property
地块临街：连接到地产的街道的直线英尺
housing["LotFrontage"]

housing["LotFrontage"].isnull().sum()

终于找到一个含有缺失值的了，LotFrontage列含有259个缺失值，这时候，我们需要对缺失值做填充。
我比较喜欢的一种方案是利用均值和标准差的信息进行填充。
当然，并不是只有LotFrontage采用缺失值，所以我们可以把缺失值填充抽象成一个函数。
def fill_null(df, col):
    mean = df[col].dropna().mean()
    std = df[col].dropna().std()
    null_sum = df[col].isnull().sum()
    fill_num = np.random.randint(mean - std, mean + std, null_sum)
    df.loc[df[col].isnull(), col] = fill_num

fill_null(housing, "LotFrontage")

sns.regplot(data=housing, x="LotFrontage", y="SalePrice", scatter_kws={"alpha":0.3})


这么一看的话，LotFrontage和SalePrice也是成正相关的关系。
LotArea: Lot size in square feet
housing["LotArea"].isnull().sum()

sns.regplot(data=housing, x="LotArea", y="SalePrice", scatter_kws={"alpha":0.4})


总结
找一下套路，对于每一个特征数据：
1.判断该列数据是否含有缺失值

    1.1、如果不含有缺失值，继续后续操作

    1.2、如果含有缺失值，对缺失值进行填充

2.判断该列数据是不是数值

    2.1、如果是数值继续后续操作

    2.2、如果不是数值，定义对应关系，将数据对应到数值

3.去除异常数据

4.绘制散点图和线性关系

那么接下来我们吧数据统一重新处理一下：
train_house = pd.read_csv("http://kaggle.shikanon.com/house-prices-advanced-regression-techniques/train.csv")

第一列数据是ID，是我们人为标注的数据，对房价并无影响，先把它单独抽离出来。
train_house_ID = train_house["Id"]

train_house.drop("Id", axis=1, inplace=True)

我们第一步要做的就是缺失值处理，缺失值处理有两种方案，一种是分析含缺失值的特征对任务有没有用，没用的特征直接删除，有用的特征依据缺失量，少则删除样本，多则用mean,median或mod补全；另一种方案是分析这些缺失值缺失的原因，并用一定方法将其转换为一类数据（成为类型变量的一个类型）。
na_count = train_house.isnull().sum().sort_values(ascending=False)
na_rate = na_count / len(train_house)
na_data = pd.concat([na_count,na_rate],axis=1,keys=['count','ratio'])

pd.set_option('display.max_rows',None)    # 将pandas的输出数据不省略显示
print(na_data)

首先，如果某一特征的数据缺失量达到15%以上，那这项特征应该予以删除并认为数据集中不存在这样的特征。
也就是说我们并不会设法去填补这些特征的缺失值，因为假定它是不存在的，因此删除数据的 ’PoolQC’, ‘MiscFeature’, ‘Alley’， ‘Fence’， ‘FireplaceQu’和‘LotFrontage’这几列。
这应该不会导致数据的有效信息量下降，因为这些特征的字面含义似乎根本与房价无关，难怪会有这么多缺失值，而且这些特征的有效数据具有各种离群值。
其次，在剩下的含缺失值变量中，以Garage开头的5个GarageX特征具有相同数量的缺失值，据此推测他们可能代表的是同一组观测值，而关于Garage的信息，’GarageCars’已经能够很好地表征了，因此删除这几个特征，对BsmtX也可以进行同样的操作。
之后，对于MasVnrArea和MasVnrType，根据其字面意思我们认为它们并不重要，而且它们与YearBuilt和OverallQual有较强的相关性。因此，我们删除这两个特征也不会丢失任何信息。
然后，除了Electrical，其它无意义的含缺失值的变量我们都已经删除了，Electrical这个变量下只有一个样本带有缺失值，因此我们不妨删除带有这个缺失值的那各样本。
最后，经过我们的严密分析哈，所有的含有缺失值的特征都可以删除。
train_house.drop(na_data[na_data['count'] > 1].index, axis=1, inplace=True)
train_house.drop(train_house.loc[train_house['Electrical'].isnull()].index, inplace=True)

train_house.shape

第二步我们要做的就是讲数据中的字符串型特征映射为数值型特征，这样才能方便计算，但是我总不能一列一列的看是不是数值型数据然后再做数据对应吧，那还不如不学了，pandas给我提供好了这样的功能——factorize函数可以将Series中的标称型数据映射称为一组数字，相同的标称型映射为相同的数字。
举个简单的例子看一下factorize函数：

由上面可见，我们送入一串序列[‘b’, ‘b’, ‘a’, ‘c’, ‘b’]，该函数做了什么事，其实，它是将送入的字符映射成数字，原则是相同的字符对应同一个数字。
比如上面，函数先处理 ‘b’,将其映射成 1， 然后处理第二个字符还是 ‘b’，因为已经映射成功，所以直接返回 1， 接着处理到 ‘a’，将其映射为 0，然后处理 ‘c’，将其映射成 2， 最后处理 ‘b’，已经映射过了，所以直接输出 1。
将上述输出汇总成序列，输出到 labels 中，codes里面其实就是存储我们输入序列中互异的元素，即上面的[‘a’, ‘b’, ‘c’]。
有了这个函数，就可以帮助我们将所有的非数值型数据转换为数值型数据：
for col in train_house.columns:
    if train_house[col].dtypes == "object":
        train_house[col], uniques = pd.factorize(train_house[col])

train_house.dtypes

所有的缺失值都被处理，所有的字符串型数据都被替换为数值型数据，这样就可以计算了。
我们把之前计算的θ公式拿过来：
θ=(XTX)−1XTyθ=(X^TX)^{-1}X^Tyθ=(XTX)−1XTy
y = train_house["SalePrice"]
X = train_house.drop('SalePrice', axis=1)
theta = np.dot(np.dot(np.linalg.inv(np.dot(X.T, X)), X.T), y)

theta.shape

求出了θ，我们就可以根据自己输入的特征预测房价了：
test_house = pd.read_csv("test.csv")

在计算之前，需要把测试集的数据做一遍跟训练集一样的处理：
test_house_ID = test_house["Id"]
test_house.drop("Id", axis=1,  inplace=True)
test_house.drop(na_data[na_data['count'] > 1].index, axis=1, inplace=True)
for col in test_house.columns:
    if test_house[col].dtypes == "object":
        test_house[col], uniques = pd.factorize(test_house[col])
    test_house[col].fillna(test_house[col].mean(), inplace=True)

test_house.shape

再把房价的计算公式拿过来：
Y=θTxY=\theta^TxY=θTx
# 不以科学计数显示:
np.set_printoptions(suppress = True)
Y = np.dot(test_house, theta)

submisson = pd.concat([test_house_ID, pd.Series(abs(Y))], axis=1, keys=["Id","SalePrice"])

submisson.to_csv("submisson.csv", index=False)

我们把submission提交到Kaggle的平台上，看看能获得什么样的分数：

结果显示并不是很好，当然，我们还有好多因素没有考虑，不过，线性回归，我们就先讲到这里，后续我们有更好的方法来解决房价问题。



超牛逼的异步协程爬虫






写在前面：
本来这篇文章只是用来记录一下学习异步协程爬虫的笔记，感谢CSDN的大力支持，引来了很多关注和浏览，也有很多大佬的批评指针。
事先声明：本文只是学习使用，在爬虫的实战应用中还要添加诸多限制，比如UA伪装，添加timeout，设置代理等等。
学习爬虫过程中的代码都放在了GitHub上：https://github.com/koking0/Spider
在此感谢以下大佬的批评指针：
血色v残阳
热爱造轮子的程序员
…

文章目录一、引入二、异步协程1. event_loop2. coroutine3. task4. future5. 绑定回调三、多任务协程
一、引入
如果因为 IO 阻塞导致被操作系统强行剥夺走 CPU 的执行权限，程序的执行效率会降低了下来。
想要解决这个问题，我们可以自己从应用程序级别检测 IO 阻塞，如果阻塞就切换到程序的其它任务，这样就可以将程序的 IO 降到最低，程序处于就绪态就会增多，以此来迷惑操作系统。
操作系统会以为我们的程序是 IO 较少的程序，从而会尽可能多的分配到 CPU，这样也就达到了提升程序执行效率的目的。
在 Python 3.4 之后新增了 asyncio 模块，可以帮助我们检测 IO 阻塞，通过它可以帮助我们实现异步 IO。
注意：asyncio 只能发 TCP 级别的请求，不能发 HTTP 协议的请求。


什么是异步 IO
所谓的异步 IO，就是发起一个 IO 阻塞的操作，但是不用等到它结束，可以在它执行 IO 的过程中继续做别的事情，当 IO 执行完毕之后会收到它的通知。


实现异步 IO 的方式


通过单线程+异步协程的方式可以实现异步 IO 操作。
二、异步协程
在将异步协程之前，我们需要了解以下几个概念：
1. event_loop
事件循环，相当于一个无限循环。我们可以把一些函数注册到这个事件循环上，当满足某些条件的时候，函数就会被循环执行。
程序是按照设定的顺序从头执行到尾，运行的次数也是完全按照设定。在编写程序时，如果有一部分程序的运行耗时是比较久的，需要先让出其控制权，让它在后台运行，其它的程序可以先运行起来。
当后台运行的程序完成后，也需要及时通知主程序已经完成任务可以进行下一步操作，但这个过程所需的时间是不确定的，需要主程序不断的监听状态，一旦收到了任务完成的消息，就开始进行下一步。
loop就是这个持续不断的监视器。
2. coroutine
中文翻译叫协程，在 Python 中昌指代为协程对象类型，可以将协程对象注册到时间循环中被调用。使用 async 关键字来定义的方法在调用时不会立即执行，而是返回一个协程对象。
# 首先引入 asyncio 包，这样才能使用 async 和 await
import asyncio


# 使用 async 定义一个 execute 方法，接收一个参数并打印
async def execute(x):
	print("Number = ", x)

# 此时调用 execute 函数并不会执行，而是返回一个协程对象
coroutine = execute(1)
print("coroutine:", coroutine)
print("After calling execute.")

# 然后使用 get_event_loop 方法创建一个事件循环 loop
loop = asyncio.get_event_loop()
# 之后调用 loop 对象的 run_until_complete 方法将协程对象注册到事件循环 loop 中并启动，函数才能运行
loop.run_until_complete(coroutine)
print("After calling loop.")


执行结果为：
coroutine: <coroutine object execute at 0x000001C714A91A48>
After calling execute.
Number =  1
After calling loop.

3. task
任务，它是对协程对象的进一步封装，包含了任务的各个状态，比如 running、finished 等，可以用这些状态来获取协程对象的执行情况。
import asyncio


async def execute(x):
    print("Number = ", x)
    return x


if __name__ == '__main__':
    coroutine = execute(1)
    print("Coroutine:", coroutine)
    print("After calling execute.")

    loop = asyncio.get_event_loop()
    task = loop.create_task(coroutine)
    print("Task:", task)
    loop.run_until_complete(task)
    print("Task:", task)
    print("After calling loop.")


执行结果为：
Coroutine: <coroutine object execute at 0x0000022105D1FB48>
After calling execute.
Task: <Task pending coro=<execute() running at G:/Python/Spider/4.高性能异步爬虫/02.协程/2.第一个task.py:16>>
Number =  1
Task: <Task finished coro=<execute() done, defined at G:/Python/Spider/4.高性能异步爬虫/02.协程/2.第一个task.py:16> result=1>
After calling loop.

4. future
代表将来执行或还没有执行的任务，实际上和 task 没有本质区别。通过 asyncio 的 ensure_future() 方法也可以返回一个 task 对象，这样可以不借助于 loop 来定义。
import asyncio


async def execute(x):
    print("Number = ", x)


if __name__ == '__main__':
    coroutine = execute(1)
    print("Coroutine:", coroutine)
    print("After calling execute.")

    task = asyncio.ensure_future(coroutine)
    print("Task:", task)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(task)
    print("Task:", task)
    print("After calling loop.")


执行结果为：
Coroutine: <coroutine object execute at 0x000001A6BD67FC48>
After calling execute.
Task: <Task pending coro=<execute() running at G:/Python/Spider/4.高性能异步爬虫/02.协程/3.第一个ensure_future.py:16>>
Number =  1
Task: <Task finished coro=<execute() done, defined at G:/Python/Spider/4.高性能异步爬虫/02.协程/3.第一个ensure_future.py:16> result=None>
After calling loop.

5. 绑定回调
可以为某个 task 绑定一个回调方法。
import asyncio
import requests


async def request():
    url = "https://www.baidu.com"
    status = requests.get(url=url).status_code
    return status


def callback(task):
    print("Status:", task.result())


if __name__ == '__main__':
    coroutine = request()
    task = asyncio.ensure_future(coroutine)
    task.add_done_callback(callback)
    print("Task:", task)

    loop = asyncio.get_event_loop()
    loop.run_until_complete(task)
    print("Task:", task)


通过 requests() 方法请求百度，接收其返回的状态码，然后定义一个 callback() 方法，接收一个 task 对象，通过 result() 方法打印其返回结果，最后调用 add_done_callback() 方法就可以给 coroutine 对象添加回调函数了，当 coroutine 对象执行完毕之后，就会执行其回调方法。
执行结果为：
Task: <Task pending coro=<request() running at G:/Python/Spider/4.高性能异步爬虫/02.协程/4.绑定回调.py:17> cb=[callback() at G:/Python/Spider/4.高性能异步爬虫/02.协程/4.绑定回调.py:23]>
Status: 200
Task: <Task finished coro=<request() done, defined at G:/Python/Spider/4.高性能异步爬虫/02.协程/4.绑定回调.py:17> result=200>

三、多任务协程
目前为止，我们的协程还是只执行一个任务，我们的目的是想它能够同时执行多个任务，为此我们可以定义一个 task 列表存放多个任务对象。
import time
import asyncio
import requests


async def getPage(name, url):
	print("正在爬取%s......" % name)
	response = requests.get(url=url).text
	with open("%s.html" % name, "w", encoding="utf-8") as fp:
		fp.write(response)
	print("%s爬取完毕......" % name)


if __name__ == '__main__':
	startTime = time.time()
	urlDict = {
		"百度搜索": "https://www.baidu.com/",
		"百度翻译": "https://fanyi.baidu.com/",
		"CSDN": "https://www.csdn.net/",
		"博客园": "https://www.cnblogs.com/",
		"哔哩哔哩": "https://www.bilibili.com/",
		"码云": "https://gitee.com/",
		"拉勾网": "https://www.lagou.com/",
	}
	taskList = []
	for key, value in urlDict.items():
		request = getPage(key, value)
		task = asyncio.ensure_future(request)
		taskList.append(task)

	loop = asyncio.get_event_loop()
	loop.run_until_complete(asyncio.wait(taskList))
	print("Time consuming:", time.time() - startTime)


输出结果为：
正在爬取百度搜索......
百度搜索爬取完毕......
正在爬取百度翻译......
百度翻译爬取完毕......
正在爬取CSDN......
CSDN爬取完毕......
正在爬取博客园......
博客园爬取完毕......
正在爬取哔哩哔哩......
哔哩哔哩爬取完毕......
正在爬取码云......
码云爬取完毕......
正在爬取拉勾网......
拉勾网爬取完毕......
Time consuming: 2.6479198932647705

总耗时大概是2.65秒，你是不是觉得这就很快了？其实还有更快的代码：
import time
import asyncio
import aiohttp


async def getPage(name, url):
	print("正在爬取%s......" % name)
	async with aiohttp.ClientSession() as session:
		async with await session.get(url) as response:
			responseText = await response.text()
			save(name, responseText)
	print("%s爬取完毕......" % name)


def save(name, response):
	with open("%s.html" % name, "w", encoding="utf-8") as fp:
		fp.write(response)


if __name__ == '__main__':
	startTime = time.time()
	urlDict = {
		"百度搜索": "https://www.baidu.com/",
		"百度翻译": "https://fanyi.baidu.com/",
		"CSDN": "https://www.csdn.net/",
		"博客园": "https://www.cnblogs.com/",
		"哔哩哔哩": "https://www.bilibili.com/",
		"码云": "https://gitee.com/",
		"拉勾网": "https://www.lagou.com/",
	}
	taskList = []
	for key, value in urlDict.items():
		request = getPage(key, value)
		task = asyncio.ensure_future(request)
		taskList.append(task)

	loop = asyncio.get_event_loop()
	loop.run_until_complete(asyncio.wait(taskList))
	print("Time consuming:", time.time() - startTime)


输出结果为：
正在爬取百度搜索......
正在爬取百度翻译......
正在爬取CSDN......
正在爬取博客园......
正在爬取哔哩哔哩......
正在爬取码云......
正在爬取拉勾网......
百度搜索爬取完毕......
博客园爬取完毕......
百度翻译爬取完毕......
码云爬取完毕......
哔哩哔哩爬取完毕......
拉勾网爬取完毕......
CSDN爬取完毕......
Time consuming: 0.9793801307678223

大约0.98秒就可以爬完所有的网页。
这是因为第一种方法并不是真正的异步请求，在异步协程中如果出现同步模块相关的代码则无法实现异步，比如requests.get()属于同步模块的代码。
要想实现真正的异步协程爬虫必须使用基于异步的网络请求模块，所以要使用 aiohttp 模块，这个模块需要安装：
pip install -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com aiohttp

它的使用与 requests 模块类似，需要注意的是，aiohttp 获取响应数据操作之前一定要使用 await 进行挂起。
在执行协程的时候，如果遇到了 await，那么就会将当前协程挂起，转而执行其它的协程，直到其它协程也挂起或执行完毕，再进行下一个协程的执行。
异步协程的便捷之处就在于，当遇到阻塞操作时，任务被挂起，程序接着执行其它的任务，这样可以充分利用 CPU 时间片，而不必把时间都浪费在等待 IO 上，把这个运用在爬虫上则可以在相同的时间内实现成百上千此的网络请求。


小生才疏学浅，如有谬误，恭请指正。
写在最后：
通过写爬虫来练习协程的时候是可以的，实际应用中爬虫线程池很香
欢迎来学习哦





Stark 组件：快速开发神器 —— 锦上添花





                                            Stark 组件：快速开发神器 —— 锦上添花一、分页二、排序三、搜索1.关键字搜索2.组合搜索四、批量操作
经过前面几个篇章，我们的 Stark 组件已经能够批量生成 URL，快速实现增删改查了，接下来这篇文章，就要对已经完成的 Stark 组件增加更多更有趣的功能。
一、分页
Django 其实有自带的分页器功能，但是呢，我们是想开发一套可以随处使用的组件，因此可以仿照 Django 的分页器自己写一个。
# Stark/utils/pagingDevice.py
class PagingDevice:
	def __init__(self, currentPage, allCount, baseUrl, queryParams, perPage=20, pageCount=11):
		"""
		初始化分页器
		:param currentPage:当前页码
		:param allCount: 数据库中总条数
		:param baseUrl: 基础 URL
		:param queryParams: 包含所有当前 URL 的 QueryDict 对象
		:param perPage: 每页显示数据量
		:param pageCount: 页面最多显示页码数
		"""
		try:
			self.currentPage = int(currentPage)
			if self.currentPage <= 0:
				raise Exception()
		except Exception:
			self.currentPage = 1
		self.allCount, self.baseUrl, self.queryParams, self.perPage, self.pageCount = \
			allCount, baseUrl, queryParams, perPage, pageCount
		# 计算总页码，如果有余要+1
		pagerCount, remainder = divmod(allCount, perPage)
		if remainder:
			pagerCount += 1
		self.pagerCount = pagerCount
		self.halfPagerPageCount = int(pagerCount / 2)

	@property
	def start(self):
		"""数据起始索引"""
		return (self.currentPage - 1) * self.perPage

	@property
	def end(self):
		"""数据结束索引"""
		return self.currentPage * self.perPage

	def PageHtml(self):
		"""生成分页器 HTML 代码"""
		if self.pagerCount < self.pageCount:
			# 如果数据总页码 < 页面上最多显示的页码数
			pagerStart, pagerEnd = 1, self.pagerCount
		else:
			# 数据总页码数 > 页面上最多显示的页码数
			if self.currentPage <= self.halfPagerPageCount:
				# 如果当前页码 < 页面上最大显示的页码半数
				pagerStart, pagerEnd = 1, self.pagerCount
			else:
				if (self.currentPage + self.halfPagerPageCount) > self.pagerCount:
					# 如果当前页 + 页面上最大显示的页码半数 > 数据总页码
					pagerStart, pagerEnd = self.pagerCount - self.pageCount + 1, self.pageCount
				else:
					pagerStart, pagerEnd = self.currentPage - self.halfPagerPageCount, self.currentPage + self.halfPagerPageCount

		pageList = []
		if self.currentPage <= 1:
			previousPage = '<li><a href="#">上一页</a></li>'
		else:
			self.queryParams["page"] = self.currentPage - 1
			previousPage = '<li><a href="%s?%s">上一页</a></li>' % (self.baseUrl, self.queryParams.urlencode())
		pageList.append(previousPage)
		for index in range(pagerStart, pagerEnd - 1):
			self.queryParams["page"] = index
			if self.currentPage == index:
				item = '<li class="active"><a href="%s?%s">%s</a></li>' % (self.baseUrl, self.queryParams.urlencode(), index)
			else:
				item = '<li><a href="%s?%s">%s</a></li>' % (self.baseUrl, self.queryParams.urlencode(), index)
			pageList.append(item)

		if self.currentPage >= self.pagerCount:
			nextPage = '<li><a href="#">下一页</a></li>'
		else:
			self.queryParams["page"] = self.currentPage + 1
			nextPage = '<li><a href="%s?%s">下一页</a></li>' % (self.baseUrl, self.queryParams.urlencode())
		pageList.append(nextPage)
		pageStr = "".join(pageList)
		return pageStr

然后在 checkView 视图函数中添加上我们的分页器：
	def checkView(self, request, *args, **kwargs):
		"""查看功能视图函数"""
		# --------------------- 1.显示表格 ---------------------
		displayList = self.getDisplayList(request, *args, **kwargs)
		# 1.1、处理表格表头
		headerList = []
		if displayList:
			for item in displayList:
				verboseName = item(self, obj=None, isHeader=True) if isinstance(item, FunctionType) \
					else self.model._meta.get_field(item).verbose_name
				headerList.append(verboseName)
		else:
			headerList.append(self.model._meta.model_name)
		# 1.2、处理表格内容
		bodyList = []
		dataQuerySet = self.model.objects.all()
		for row in dataQuerySet:
			rowList = []
			if displayList:
				for item in displayList:
					rowList.append(
						item(self, obj=row, isHeader=False, *args, **kwargs) if isinstance(item, FunctionType)
						else getattr(row, item))
			else:
				rowList.append(row)
			bodyList.append(rowList)

		# --------------------- 2.添加按钮 ---------------------
		addButton = self.getAddButton(request, *args, **kwargs)

		# --------------------- 3.分页器 ---------------------
		allCount = dataQuerySet.count()
		queryParams = request.GET.copy()
		queryParams._mutable = True
		pagingDevice = PagingDevice(
			currentPage=request.GET.get("page"),
			allCount=allCount,
			baseUrl=request.path_info,
			queryParams=queryParams,
			perPage=self.perPageCount
		)
		bodyList = bodyList[pagingDevice.start:pagingDevice.end]

		return render(request, "stark/checkView.html", {
			"headerList": headerList,
			"bodyList": bodyList,
			"dataQuerySet": dataQuerySet,
			"addButton": addButton,
			"pager": pagingDevice,
		})

然后在 checkView.html 中加上分页器：
        <nav class="center">
            <ul class="pagination">
                {{ pager.pageHtml|safe }}
            </ul>
        </nav>

这样分页器就做好了：

二、排序
我们现在是按照默认的 ID 排序，但有的时候可能我们不想按照它排序，因此可以定制一个排序功能。
	def getOrderList(self):
		"""获取页面排序的表格，预留自定义扩展定制排序选项"""
		return self.orderList or ["-id"]

因为排序要在获取数据库数据的时候进行，因此应该将排序放在显示表格之前：
	def checkView(self, request, *args, **kwargs):
		"""查看功能视图函数"""
		dataQuerySet = self.model.objects.all()
		# --------------------- 4.排序 ---------------------
		orderList = self.getOrderList()
		dataQuerySet = dataQuerySet.order_by(*orderList)

		# --------------------- 1.显示表格 ---------------------
		displayList = self.getDisplayList(request, *args, **kwargs)
		# 1.1、处理表格表头
		headerList = []
		if displayList:
			for item in displayList:
				verboseName = item(self, obj=None, isHeader=True) if isinstance(item, FunctionType) \
					else self.model._meta.get_field(item).verbose_name
				headerList.append(verboseName)
		else:
			headerList.append(self.model._meta.model_name)
		# 1.2、处理表格内容
		bodyList = []
		for row in dataQuerySet:
			rowList = []
			if displayList:
				for item in displayList:
					rowList.append(
						item(self, obj=row, isHeader=False, *args, **kwargs) if isinstance(item, FunctionType)
						else getattr(row, item))
			else:
				rowList.append(row)
			bodyList.append(rowList)

		# --------------------- 2.添加按钮 ---------------------
		addButton = self.getAddButton(request, *args, **kwargs)

		# --------------------- 3.分页器 ---------------------
		allCount = dataQuerySet.count()
		queryParams = request.GET.copy()
		queryParams._mutable = True
		pagingDevice = PagingDevice(
			currentPage=request.GET.get("page"),
			allCount=allCount,
			baseUrl=request.path_info,
			queryParams=queryParams,
			perPage=self.perPageCount
		)
		bodyList = bodyList[pagingDevice.start:pagingDevice.end]

		return render(request, "stark/checkView.html", {
			"headerList": headerList,
			"bodyList": bodyList,
			"dataQuerySet": dataQuerySet,
			"addButton": addButton,
			"pager": pagingDevice,
		})


这样就能实现对表格按照 ID 逆序排列：

如果想要按照其它方式排列，在子类中重写 orderList 即可。
三、搜索
1.关键字搜索
搜索功能可以帮助我们快速筛选目标数据，因此，我们的 Stark 组件当然不能少了关键字搜索了。
	def getSearchList(self):
		"""获取搜索列表"""
		return self.searchList

	def changeView(self, request, pk, *args, **kwargs):
		"""修改功能视图函数"""
		form = None
		currentChangeObject = self.model.objects.filter(pk=pk).first()
		if not currentChangeObject:
			return render(request, "404.html")
		modelForm = self.getModelForm(isAdd=False, request=request, pk=pk, *args, **kwargs)
		if request.method == "GET":
			form = modelForm(instance=currentChangeObject)
		elif request.method == "POST":
			form = modelForm(data=request.POST, instance=currentChangeObject)
			if form.is_valid():
				return HttpResponse(self.save(request=request, form=form, isUpdate=True, *args, **kwargs)) \
				       or redirect(self.reverseListUrl(*args, **kwargs))
		return render(request, self.changeTemplate or "stark/addOrChange.html", {"form": form})

	def checkView(self, request, *args, **kwargs):
		"""查看功能视图函数"""
		dataQuerySet = self.model.objects.all()
		# --------------------- 5.搜索 ---------------------
		searchList = self.getSearchList()
		if searchList:
			searchValue = request.GET.get("keyword", None)
			connect = Q()
			connect.connector = "OR"
			if searchValue:
				for item in searchList:
					connect.children.append((item, searchValue))
			dataQuerySet = dataQuerySet.filter(connect)

		# --------------------- 4.排序 ---------------------
		orderList = self.getOrderList()
		if orderList:
			dataQuerySet = dataQuerySet.order_by(*orderList)

		# --------------------- 1.显示表格 ---------------------
		displayList = self.getDisplayList(request, *args, **kwargs)
		# 1.1、处理表格表头
		headerList = []
		if displayList:
			for item in displayList:
				verboseName = item(self, obj=None, isHeader=True) if isinstance(item, FunctionType) \
					else self.model._meta.get_field(item).verbose_name
				headerList.append(verboseName)
		else:
			headerList.append(self.model._meta.model_name)
		# 1.2、处理表格内容
		bodyList = []
		for row in dataQuerySet:
			rowList = []
			if displayList:
				for item in displayList:
					rowList.append(
						item(self, obj=row, isHeader=False, *args, **kwargs) if isinstance(item, FunctionType)
						else getattr(row, item))
			else:
				rowList.append(row)
			bodyList.append(rowList)

		# --------------------- 2.添加按钮 ---------------------
		addButton = self.getAddButton(request, *args, **kwargs)

		# --------------------- 3.分页器 ---------------------
		allCount = dataQuerySet.count()
		queryParams = request.GET.copy()
		queryParams._mutable = True
		pagingDevice = PagingDevice(
			currentPage=request.GET.get("page"),
			allCount=allCount,
			baseUrl=request.path_info,
			queryParams=queryParams,
			perPage=self.perPageCount
		)
		bodyList = bodyList[pagingDevice.start:pagingDevice.end]

		return render(request, "stark/checkView.html", {
			"addButton": addButton,
			"searchList": searchList,
			"headerList": headerList,
			"bodyList": bodyList,
			"dataQuerySet": dataQuerySet,
			"pager": pagingDevice,
		})

然后在 RbacUserHandler 中定义可搜索的字段：
from Stark.main import StarkHandler, getM2M, getDatetime, getChoice


class RbacUserHandler(StarkHandler):
	def __init__(self, site, modelClass, prefix):
		super().__init__(site, modelClass, prefix)
		self.displayList = ["username", "email", "score", getChoice("等级", "grade"), getM2M("职务", "roles"), "team",
		                    "department", getDatetime("加入时间", "dateJoined")]
		self.searchList = ["username"]


最后在 checkView 页面也要加上搜索框：
{% if searchList %}
      <div style="float: right;margin: 5px 0;">
          <form method="GET" class="form-inline">
              <div class="form-group">
                  <label>
                      <input class="form-control" type="text" name="keyword" value="{{ search_value }}"
                             placeholder="关键字搜索">
                  </label>
                  <button class="btn btn-primary" type="submit">
                      <i class="fa fa-search" aria-hidden="true"></i>
                  </button>
              </div>
          </form>
      </div>
  {% endif %}


2.组合搜索
通过关键字搜索只能实现单一的搜索功能，我们有时想要的可以能是多个条件筛选的组合搜索结果。
对于组合搜索来说情况比较多，比如好几个字段都支持组合搜搜，还有某一个字段支持多选，类似这些功能比较复杂，因此我们可以将组合搜索的功能抽象成一个类。
可以先写 getSearchGroup 方法，通过这个方法获取组合搜索的条件：
	def getSearchGroup(self, request):
		"""获取组合搜索条件"""
		condition = {}
		for option in self.searchGroup:
			if option.isMulti:
				searchGroupValuesList = request.GET.getlist(option.field)
				if searchGroupValuesList:
					condition["%s__in" % option.field] = searchGroupValuesList
			else:
				searchGroupValue = request.GET.get(option.field)
				if searchGroupValue:
					condition[option.field] = searchGroupValue
		return condition

对于可以多选的字段，通过condition["%s__in" % option.field] = searchGroupValuesList的方式比较，而对于单选的字段，可以通过condition[option.field] = searchGroupValue的方式比较，前边是筛选语句，后边是筛选值。
例如对于 RBACUserInfo 来说，我们可以定义几个组合搜索的字段：
		self.searchGroup = [
			SearchGroupOption(field="team"),
			SearchGroupOption(field="department"),
			SearchGroupOption(field="grade"),
		]

team 和 department 都是单选，而 grade 可以多选。
这时候我们可以编写 SearchGroupOption 类了，首先确定这个类需要什么参数：

支持组合搜索的字段；
组合搜索的按钮显示问呢；
组合搜索的按钮值
该字段是否支持多选

class SearchGroupOption:
    def __init__(self, field, text=None, value=None, isMulti=False, condition=None):
        """
        :param field:组合搜索关联的字段
        :param text: 显示组合搜索的按钮文本
        :param value: 显示组合搜索按钮值
        :param isMulti: 是否支持多选
        :param condition: 数据库查询条件
        """
        self.field, self.text, self.value, self.isMulti, self.condition, self.isChoice = \
            field, text, value, isMulti, condition if condition else {}, False

    def getCondition(self, request, *args, **kwargs):
        return self.condition

    def getFieldData(self, modelClass, request, *args, **kwargs):
        """根据字段去数据库获取关联的数据"""
        fieldObject = modelClass._meta.get_field(self.field)
        verboseName = fieldObject.verbose_name
        if isinstance(fieldObject, ForeignKey) or isinstance(fieldObject, ManyToManyField):
            condition = self.getCondition(request=request, *args, **kwargs)
            return SearchGroupRow(header=verboseName,
                                  fieldData=fieldObject.remote_field.model.objects.filter(**condition),
                                  option=self, queryDict=request.GET)
        else:
            self.isChoice = True
            return SearchGroupRow(header=verboseName, fieldData=fieldObject.choices, option=self, queryDict=request.GET)

    def getText(self, fieldObject):
        """获取选项文本"""
        if self.text:
            return self.text(fieldObject)
        if self.isChoice:
            return fieldObject[1]
        return str(fieldObject)

    def getValue(self, fieldObject):
        """获取选项值"""
        if self.value:
            return self.value(fieldObject)
        if self.isChoice:
            return fieldObject[0]
        return fieldObject.pk


SearchGroupRow 其实就是每一个组合搜索行，只不过我们也给封装成一个类：
class SearchGroupRow:
    def __init__(self, header, fieldData, option, queryDict):
        """
        :param header:组合搜索列名
        :param fieldData: 关联数据
        :param option: 配置
        :param queryDict: request.GET
        """
        self.title, self.fieldData, self.option, self.queryDict = header, fieldData, option, queryDict

    def __iter__(self):
        yield '<span class="col-md-1" style="font-size: 17px;">' + self.title + '</span>'
        yield '<div class="col-md-11 choice" style="display: inline-block; margin-bottom: 20px;">'
        # 1.request.GET 拷贝一份并将其设置为可修改类型
        totalQueryDict = self.queryDict.copy()
        totalQueryDict._mutable = True
        # 2.获取当前的总搜索条件
        originValueList = self.queryDict.getlist(self.option.field)
        if not originValueList:
            yield "<a class='active btn btn-info' href='?%s'>全部</a>" % totalQueryDict.urlencode()
        else:
            totalQueryDict.pop(self.option.field)
            yield '<a class="btn btn-default" href="?%s">全部</a>' % totalQueryDict.urlencode()
        # 3.遍历所有支持组合搜索的字段
        for item in self.fieldData:
            # 3.1、获取按钮显示文本
            text = self.option.getText(item)
            # 3.2、获取按钮值
            value = str(self.option.getValue(item))
            queryDict = self.queryDict.copy()
            queryDict._mutable = True
            if self.option.isMulti:
                # 3.3、如果当前选项支持多选
                multiValueList = queryDict.getlist(self.option.field)
                if value in multiValueList:
                    multiValueList.remove(value)
                    queryDict.setlist(self.option.field, multiValueList)
                    yield "<a class='active btn btn-info' href='?%s'>%s</a>" % (queryDict.urlencode(), text)
                else:
                    multiValueList.append(value)
                    queryDict.setlist(self.option.field, multiValueList)
                    yield "<a class='btn btn-default' href='?%s'>%s</a>" % (queryDict.urlencode(), text)
            else:
                # 3.4、如果当前选项不支持多选
                queryDict[self.option.field] = value
                if value in originValueList:
                    queryDict.pop(self.option.field)
                    yield '<a class="active btn btn-info"  href="?%s">%s</a>' % (queryDict.urlencode(), text)
                else:
                    yield '<a class="btn btn-default" href="?%s">%s</a>' % (queryDict.urlencode(), text)
        yield '</div>'

__iter__  方法可以通过 yield 将属性转换为可遍历的类型。
这样在 checkView.html 中就可以遍历这个类，其实就是一个 HTML 代码：
{% if searchGroupRowList %}
            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-filter" aria-hidden="true"></i>
                    <span>快速筛选</span>
                </div>
                <div class="panel-body">
                    <div class="search-group">
                        {% for row in searchGroupRowList %}
                            <div class="row">
                                {% for obj in row %}
                                    {{ obj|safe }}
                                {% endfor %}
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        {% endif %}

这样就可以实现组合搜索的功能了：

四、批量操作
假如出现了一批不和我心意的人，数量巨大，这时候我们要是一个一个的删除费时费力，因此，我们要为 Stark 组件开发一个批量操作的功能。
对于批量操作，哦们首先要有一个多选框：
    def getCheckbox(self, obj=None, isHeader=None, *args, **kwargs):
        """多选框"""
        return "选择" if isHeader else mark_safe('<input type="checkbox" name="pk" value="%s" />' % obj.pk)

把它加到 displayList 中就可以在页面中显示一个选择框。
我们先写一个简单的批量删除的功能：
    def getActionList(self):
        """获取批量操作列表"""
        return self.actionList

    def actionMultiDelete(self, request, *args, **kwargs):
        """批量删除"""
        pkList = request.POST.getlist("pk")
        self.model.objects.filter(id__in=pkList).delete()

如果想添加其它的批量操作功能可以在子类中编写相应的方法去处理：
from Stark.main import StarkHandler, getM2M, getDatetime, getChoice, SearchGroupOption


class RbacUserHandler(StarkHandler):
	def __init__(self, site, modelClass, prefix):
		super().__init__(site, modelClass, prefix)
		self.displayList = [StarkHandler.getCheckbox, "username", "email", "score", getChoice("等级", "grade"), getM2M("职务", "roles"), "team",
		                    "department", getDatetime("加入时间", "dateJoined")]
		self.searchList = ["username"]
		StarkHandler.actionMultiDelete.text = "批量删除成员"
		self.actionList = [StarkHandler.actionMultiDelete]
		self.searchGroup = [
			SearchGroupOption(field="team"),
			SearchGroupOption(field="department"),
			SearchGroupOption(field="grade", isMulti=True),
		]


这里我们就不搞了，写一个通用的就 OK。
在我们返回页面的时候，如果先获取数据后执行批量操作的话，页面显示的数据还是原来的，因此我们需要把批量操作放在获取数据库数据之前：
    def checkView(self, request, *args, **kwargs):
        """查看功能视图函数"""
        # --------------------- 6.批量操作 ---------------------
        actionList = self.getActionList()
        actionDict = {func.__name__: func.text for  func in actionList}
        if request.method == "POST":
            actionFuncName = request.POST.get("action")
            if actionFuncName and actionFuncName in actionDict:
                actionResponse = getattr(self, actionFuncName)(request, *args, **kwargs)
                if actionResponse:
                    return HttpResponse(actionResponse)

        dataQuerySet = self.model.objects.all()

这样，一个批量删除的功能就完成了：

添加了分页、排序、关键字搜索、组合搜索和批量操作之后的 Stark 组件已经基本完善了，接下里就是针对每一个数据表做个性化处理。



Stark 组件：快速开发神器 —— 模板设计






说道 Stark 你是不是不会想到他——Tony Stark，超级英雄钢铁侠，这也是我的偶像。
不过我们今天要开发的 Stark 组件，倒是跟他的人工智能助手 JARVIS 有些类似，是帮助我们快速开发数据库增、删、改、查操作、应用各种功能的开发助手。
模板设计
上一篇博客Stark 组件：快速开发神器 —— 自动生成 URL已经生成了相应的 URL，接下来要设计一款显示页面。
对于后台管理系统来说，顶部栏、左侧菜单栏是固定的，变换的只是中间的内容区域，因此，我们可以制作一个模板，让具有具体功能的页面去继承它。
先来看一下效果：

下面呈上的是 HTML 源码，当然只有 HTML 是不行的，还需要 CSS、JS、视图函数巴拉巴拉一大堆，鼓励自己编写，我只是提供一个样品而已，在项目的最后也会放出全部源码。
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Matrix工作室管理系统</title>
    <link rel="stylesheet" href="/static/vendor/bootstrap-3.3.7-dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/static/vendor/bootstrap-3.3.7-dist/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/static/vendor/font-awesome-4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="{% static 'RBAC/css/theme.css' %}">
    <link rel="stylesheet" href="{% static 'RBAC/css/default.css' %}">
</head>
<body>

<header class="header">
    <div class="logo-container" style="margin-left: 20px;">
        <a href="#" class="logo">
            <img src="/static/images/MatrixLogo.png" style="height: 35px;" alt="MatrixLogo"/>
        </a>
    </div>
    <div class="header-right">
        <form action="#" class="search nav-form">
            <div class="input-group input-search">
                <label for="search"></label>
                <input type="text" class="form-control" name="search" id="search" placeholder="Search...">
                <span class="input-group-btn">
                    <button class="btn btn-default" type="submit"><i class="fa fa-search"></i></button>
                </span>
            </div>
        </form>
        <span class="separator"></span>
        <ul class="notifications">
            <li>
                <a href="#" class="dropdown-toggle notification-icon" data-toggle="dropdown">
                    <i class="fa fa-tasks"></i>
                    <span class="badge">3</span>
                </a>
                <div class="dropdown-menu notification-menu large">
                    <div class="notification-title">
                        <span class="pull-right label label-default">3</span>
                        TASKS
                    </div>
                    <div class="content">
                        <ul>
                            <li>
                                <p class="clearfix mb-xs">
                                    <span class="message pull-left">生成销售报告</span>
                                    <span class="message pull-right text-dark">60%</span>
                                </p>
                                <div class="progress progress-xs light">
                                    <div class="progress-bar" role="progressbar" aria-valuenow="60"
                                         aria-valuemin="0" aria-valuemax="100" style="width: 60%;"></div>
                                </div>
                            </li>
                            <li>
                                <p class="clearfix mb-xs">
                                    <span class="message pull-left">导入联系人</span>
                                    <span class="message pull-right text-dark">98%</span>
                                </p>
                                <div class="progress progress-xs light">
                                    <div class="progress-bar" role="progressbar" aria-valuenow="98"
                                         aria-valuemin="0" aria-valuemax="100" style="width: 98%;"></div>
                                </div>
                            </li>
                            <li>
                                <p class="clearfix mb-xs">
                                    <span class="message pull-left">上传一些大的文件</span>
                                    <span class="message pull-right text-dark">33%</span>
                                </p>
                                <div class="progress progress-xs light mb-xs">
                                    <div class="progress-bar" role="progressbar" aria-valuenow="33"
                                         aria-valuemin="0" aria-valuemax="100" style="width: 33%;"></div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </li>
            <li>
                <a href="#" class="dropdown-toggle notification-icon" data-toggle="dropdown">
                    <i class="fa fa-envelope"></i>
                    <span class="badge">4</span>
                </a>
                <div class="dropdown-menu notification-menu">
                    <div class="notification-title">
                        <span class="pull-right label label-default">230</span>
                        Messages
                    </div>
                    <div class="content">
                        <ul>
                            <li>
                                <a href="#" class="clearfix">
                                    <figure class="image">
                                        <img src="/static/images/Alex0.jpg" alt="Joseph Doe Junior"
                                             class="img-circle" style="height: 40px"/>
                                    </figure>
                                    <span class="title">Joseph Doe</span>
                                    <span class="message">Lorem ipsum dolor sit.</span>
                                </a>
                            </li>
                            <li>
                                <a href="#" class="clearfix">
                                    <figure class="image">
                                        <img src="/static/images/Alex0.jpg" alt="Joseph Junior"
                                             class="img-circle" style="height: 40px"/>
                                    </figure>
                                    <span class="title">Joseph Junior</span>
                                    <span class="message truncate">Truncated message. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec sit amet lacinia orci. Proin vestibulum eget risus non luctus. Nunc cursus lacinia lacinia. Nulla molestie malesuada est ac tincidunt. Quisque eget convallis diam, nec venenatis risus. Vestibulum blandit faucibus est et malesuada. Sed interdum cursus dui nec venenatis. Pellentesque non nisi lobortis, rutrum eros ut, convallis nisi. Sed tellus turpis, dignissim sit amet tristique quis, pretium id est. Sed aliquam diam diam, sit amet faucibus tellus ultricies eu. Aliquam lacinia nibh a metus bibendum, eu commodo eros commodo. Sed commodo molestie elit, a molestie lacus porttitor id. Donec facilisis varius sapien, ac fringilla velit porttitor et. Nam tincidunt gravida dui, sed pharetra odio pharetra nec. Duis consectetur venenatis pharetra. Vestibulum egestas nisi quis elementum elementum.</span>
                                </a>
                            </li>
                            <li>
                                <a href="#" class="clearfix">
                                    <figure class="image">
                                        <img src="/static/images/Alex0.jpg" alt="Joe Junior"
                                             class="img-circle" style="height: 40px"/>
                                    </figure>
                                    <span class="title">Joe Junior</span>
                                    <span class="message">Lorem ipsum dolor sit.</span>
                                </a>
                            </li>
                            <li>
                                <a href="#" class="clearfix">
                                    <figure class="image">
                                        <img src="/static/images/Alex0.jpg" alt="Joseph Junior"
                                             class="img-circle" style="height: 40px"/>
                                    </figure>
                                    <span class="title">Joseph Junior</span>
                                    <span class="message">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec sit amet lacinia orci. Proin vestibulum eget risus non luctus. Nunc cursus lacinia lacinia. Nulla molestie malesuada est ac tincidunt. Quisque eget convallis diam.</span>
                                </a>
                            </li>
                        </ul>
                        <hr/>
                        <div class="text-right">
                            <a href="#" class="view-more">View All</a>
                        </div>
                    </div>
                </div>
            </li>
            <li>
                <a href="#" class="dropdown-toggle notification-icon" data-toggle="dropdown">
                    <i class="fa fa-bell"></i>
                    <span class="badge">3</span>
                </a>

                <div class="dropdown-menu notification-menu">
                    <div class="notification-title">
                        <span class="pull-right label label-default">3</span>
                        Alerts
                    </div>
                    <div class="content">
                        <ul>
                            <li>
                                <a href="#" class="clearfix">
                                    <div class="image">
                                        <i class="fa fa-thumbs-down bg-danger"></i>
                                    </div>
                                    <span class="title">Server is Down!</span>
                                    <span class="message">Just now</span>
                                </a>
                            </li>
                            <li>
                                <a href="#" class="clearfix">
                                    <div class="image">
                                        <i class="fa fa-lock bg-warning"></i>
                                    </div>
                                    <span class="title">User Locked</span>
                                    <span class="message">15 minutes ago</span>
                                </a>
                            </li>
                            <li>
                                <a href="#" class="clearfix">
                                    <div class="image">
                                        <i class="fa fa-signal bg-success"></i>
                                    </div>
                                    <span class="title">Connection Restaured</span>
                                    <span class="message">10/10/2014</span>
                                </a>
                            </li>
                        </ul>
                        <hr/>
                        <div class="text-right">
                            <a href="#" class="view-more">View All</a>
                        </div>
                    </div>
                </div>
            </li>
        </ul>
        <span class="separator"></span>
        <div id="userbox" class="userbox">
            <a href="#" data-toggle="dropdown">
                <figure class="profile-picture">
                    <img src="/static/images/Alex0.jpg" alt="Alex" class="img-circle" style="height: 50px;"
                         data-lock-picture="/static/images/!logged-user.jpg"/>
                </figure>
                <div class="profile-info" data-lock-name="John Doe" data-lock-email="johndoe@JSOFT.com">
                    <span class="name">Alex</span>
                    <span class="role">算法组组长</span>
                </div>
                <i class="fa custom-caret"></i>
            </a>
            <div class="dropdown-menu">
                <ul class="list-unstyled">
                    <li class="divider"></li>
                    <li>
                        <a role="menuitem" tabindex="-1" href="#">
                            <i class="fa fa-user"></i>
                            <span>My Profile</span>
                        </a>
                    </li>
                    <li>
                        <a role="menuitem" tabindex="-1" href="#" data-lock-screen="true">
                            <i class="fa fa-lock"></i>
                            <span>Lock Screen</span>
                        </a>
                    </li>
                    <li>
                        <a role="menuitem" tabindex="-1" href="{% url 'logout' %}">
                            <i class="fa fa-power-off"></i>
                            <span>Logout</span>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</header>
<div class="inner-wrapper">
    <aside id="sidebar-left" class="sidebar-left">
        <div class="sidebar-header">
            <div class="sidebar-title" style="color: white; font-weight: bold;">
                Navigation
            </div>
            <div class="sidebar-toggle hidden-xs" data-toggle-class="sidebar-left-collapsed" data-target="html"
                 data-fire-event="sidebar-left-toggle">
                <i class="fa fa-bars" aria-label="Toggle sidebar"></i>
            </div>
        </div>
        <h2>菜单</h2>
    </aside>
    <section role="main" class="content-body">
        <header class="page-header">
            <h2>路径导航</h2>
            <div class="right-wrapper pull-right">
                <a class="sidebar-right-toggle" data-open="sidebar-right">
                    <i class="fa fa-chevron-left"></i>
                </a>
            </div>
        </header>
        {% block content %}

        {% endblock %}
    </section>
</div>
<script src="/static/vendor/jQuery%203.4.1/jquery-3.4.1.min.js"></script>
<script src="/static/vendor/bootstrap-3.3.7-dist/js/bootstrap.min.js"></script>
</body>
</html>




完美的项目从完美的表开始





                                            表结构设计一、权限控制表结构设计UserInfoScoreRecordAttendanceTeamDepartmentRolePermissionMenu二、业务表结构设计UserCourseClassesStudentProjectProjectRecordPaymentRecord
表结构设计是一个项目的基石，组织好各种数据之间的逻辑关系，往往能够使开发事半功倍。
一、权限控制表结构设计
UserInfo
任何项目都要用人使用才有价值，因此设计好用户信息表是第一步。
Django 提供了一个 AbstractUser 类，可以在这个类的基础之上定制我们需要的 model。
我们来看一下这个类的部分源码：
username ：用户名
username = models.CharField(
    _('username'),
    max_length=150,
    unique=True,
    help_text=_('Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'),
    validators=[username_validator],
    error_messages={
        'unique': _("A user with that username already exists."),
    },
)

first_name：名、last_name ：姓
first_name = models.CharField(_('first name'), max_length=30, blank=True)
last_name = models.CharField(_('last name'), max_length=150, blank=True)

email ：邮箱
email = models.EmailField(_('email address'), blank=True)

is_staff ：是否为员工
is_staff = models.BooleanField(
    _('staff status'),
    default=False,
    help_text=_('Designates whether the user can log into this admin site.'),
)

is_active ：是否处于活动状态
is_active = models.BooleanField(
    _('active'),
    default=True,
    help_text=_(
        'Designates whether this user should be treated as active. '
        'Unselect this instead of deleting accounts.'
    ),
)

date_joined ：加入日期
date_joined = models.DateTimeField(_('date joined'), default=timezone.now)


除了 AbstractUser 帮我们定义好的这些属性之外，我们还要自定义一些属性：
gender ：成员性别
gender = models.IntegerField(verbose_name='性别', choices=((1, '男'), (2, '女')), default=1)

avatar：成员头像
avatar = models.ImageField(upload_to='avatars/', default='avatars/default.png')

telephone ：成员手机号
telephone = models.CharField(max_length=11, null=True, unique=True)

roles：成员所拥有的角色
一个成员可以拥有多个角色，一个角色也可使赋予多个成员，因此 roles 字段应该是多对多的结构。
roles = models.ManyToManyField(verbose_name='拥有的所有角色', to="Role", blank=True)

depart ：成员所属部门
一个department只能属于一个部门，根据角色的不同可以拥有该部门负责事务内的权限，而一个部门可以拥有多名成员，因此成员与部门之间是一对多的关系。
department = models.ForeignKey(verbose_name='部门', to="Department", on_delete=models.PROTECT)

organize ：成员所属组织
一个成员只能属于一个组织，而一个组织可以拥有多名成员，因此成员与组织之间是一对多的关系。
organize = models.ForeignKey(verbose_name="组织", to="Organize", null=True, blank=True, on_delete=models.PROTECT)


最后，我们的目的想在做这个项目的同时开发出通用的、达到对象级别的权限控制组件，因此我们只借用 AbstractUser 字段而不继承它，确定 UserInfo model 为：
# RBAC/models.py
class UserInfo(models.Model):
	"""成员信息"""
	username = models.CharField(verbose_name="用户名", max_length=150, unique=True)
	first_name = models.CharField(verbose_name="名", max_length=30, blank=True)
	last_name = models.CharField(verbose_name="姓", max_length=150, blank=True)
	email = models.EmailField(verbose_name="邮箱", blank=True)
	score = models.IntegerField(verbose_name="积分", default=10)
	grade = models.IntegerField(verbose_name="等级", choices=((1, "M1"), (2, "M2"), (3, "M3"), (4, "M4"), (5, "M5")),
	                            default=1)
	gender = models.IntegerField(verbose_name='性别', choices=((1, '男'), (2, '女')), default=1)
	avatar = models.ImageField(verbose_name="头像", upload_to='avatars/', default='avatars/default.png')
	telephone = models.CharField(verbose_name='手机号', max_length=11, null=True, unique=True)
	date_joined = models.DateTimeField(verbose_name="加入日期", default=timezone.now)

	roles = models.ManyToManyField(verbose_name='拥有的所有角色', to="Role", blank=True)
	team = models.ForeignKey(verbose_name="组", to="Team", null=True, blank=True, on_delete=models.PROTECT)
	department = models.ForeignKey(verbose_name='部门', to="Department", null=True, blank=True, on_delete=models.PROTECT)

	def __str__(self):
		return self.username

ScoreRecord
工作室共成员分为5个等级，由个人等级积分及相关条件确定，详情见下表：




等级
积分要求
其他要求
备注




M1 (white)
10
无
新成员初始积分10分


M2 (blue)
100
通过基础考试
线上答题，随时可尝试


M3 (yellow)
1000
至少参与3个项目
工作室项目或自己的项目


M4 (orange)
10000
能够带队完成项目
限定工作室项目


M5 (red)
100000
有开源框架贡献
在GitHub、CSDN、博客园等社区有一定知名度


# RBAC/models.py
class ScoreRecord(models.Model):
	"""积分记录"""
	score = models.IntegerField(verbose_name="处理分值")
	reason = models.TextField(verbose_name="理由")
	member = models.ForeignKey(verbose_name="成员", to="UserInfo", on_delete=models.PROTECT)
	referee = models.ForeignKey(verbose_name="执行人", to="UserInfo", on_delete=models.PROTECT)

Attendance
class Attendance(models.Model):
	"""出勤记录"""
	subject = models.CharField(verbose_name="主题", max_length=32)
	member = models.ForeignKey(verbose_name="成员", to="UserInfo", on_delete=models.PROTECT)
	record = models.CharField("记录", choices=[("check", "全勤"), ("vacate", "请假"), ("late", "迟到"), ("lack", "缺勤")])
	score = models.IntegerField(verbose_name="处理分值")
	referee = models.ForeignKey(verbose_name="执行人", to="UserInfo", on_delete=models.PROTECT)

	def __str__(self):
		return "%s-%s" % (self.subject, self.member.username)


Matrix工作室划分为6个部门、4个小组，每位成员可同时拥有所属部门和所属分组。

Team
工作室共分四个组：1. 算法组、2. 前端组、3. 后端组、4. AI组
# RBAC/models.py
class Team(models.Model):
	"""分组信息"""
	teamName = models.CharField(verbose_name="Team名称", max_length=32, unique=True)
	introduce = models.TextField(verbose_name="Team介绍")
	# 一个组内可以拥有多名角色，但一个角色只能属于一个组
	hasRoles = models.ForeignKey(verbose_name="组内拥有的角色", to="Role", null=True, blank=True, on_delete=models.PROTECT)

	def __str__(self):
		return self.teamName

Department
工作室下设六个部门：
1. 项目商谈部
由各组组长组成，负责与甲方商谈项目的需求功能与出价，整理出具体的需求分析报告或导图。
2. 项目开发部
负责每个项目的进度监督、成员安排、整体架构设计和技术解决方案，合理调配各组成员。
3. UI设计部
与项目开发人员沟通，负责前端、移动端页面设计，负责工作室宣传海报、视频的制作。
4. 学院联系部
负责与学院相关部门建立联系，维护工作室为学院制作的有关项目，并负责各种比赛的报名与培训安排。
5. 成员管理部
统一管理各组成员，每月团建，同时负责新成员的培训与学习监督，各组成员之间的流动。
6. 技术委员会
由各组组长和工作室M4、M5级别成员组成，为工作室提供技术支持和技术评审。
# RBAC/models.py
class Department(models.Model):
	"""部门信息"""
	departmentName = models.CharField(verbose_name="部门名称", max_length=32, unique=True)
	duty = models.TextField(verbose_name="部门职责")
	# 一个部门可以拥有多名角色，但一个角色只能属于一个部门
	hasRoles = models.ForeignKey(verbose_name="组内拥有的角色", to="Role", null=True, blank=True, on_delete=models.PROTECT)

	def __str__(self):
		return self.departmentName

Role
通过角色将成员与权限之间关联起来，不同的成员拥有不同的角色，不同的角色拥有不同的权限。
# RBAC/models.py
class Role(models.Model):
	"""角色"""
	roleName = models.CharField(verbose_name="角色名称", max_length=32)

	permissions = models.ManyToManyField(verbose_name="角色所拥有权限", to='Permission', null=True, blank=True)

	def __str__(self):
		return self.roleName

Permission
权限其实就是成员是否具有访问某个 URL 的资格，因此权限的主要字段其实就是 URL。
# RBAC/models.py
class Permission(models.Model):
	"""权限"""
	url = models.CharField(verbose_name="权限URL正则表达式", max_length=256)
	permissionName = models.CharField(verbose_name="权限名称", max_length=32)
	alias = models.CharField(verbose_name="权限URL别名", max_length=32, unique=True)
	icon = models.CharField(verbose_name="权限图标", max_length=32)

	menu = models.ForeignKey(verbose_name="所属菜单", to="Menu", null=True, blank=True, on_delete=models.PROTECT,
	                         help_text="如果为 null 表示该权限不是菜单，否则为二级菜单")
	parentPermission = models.ForeignKey(verbose_name="父权限", to="Permission", null=True, blank=True,
	                                     related_name="parentPermission", on_delete=models.PROTECT,
	                                     help_text="非菜单权限需要一个二级菜单的父权限做默认展开和选中")

	def __str__(self):
		return self.permissionName

Menu
菜单用于侧边栏展示。
# RBAC/models.py
class Menu(models.Model):
	"""菜单"""
	menuName = models.CharField(verbose_name="菜单名称", max_length=32)
	icon = models.CharField(verbose_name="菜单图标", max_length=32)

	def __str__(self):
		return self.menuName

二、业务表结构设计
User
对于非工作室人员注册的账号，其实就是游客，他们也需要一个账号，另外，工作室内部成员有时也是游客，此时，需要为游客创建一张用户表，这时候，我们就可以直接用 AbstractUser 类做继承了：
class User(AbstractUser):
	"""用户"""
	avatar = models.ImageField(upload_to='avatars/', default='avatars/default.png')
	telephone = models.CharField(max_length=11, null=True, blank=True, unique=True)

	def __str__(self):
		return self.username

Course
工作室 M4、M5等级的成员可以开设课程，为方便管理，需要创建一张 Course 表。
# index/models.py
class Course(models.Model):
	"""课程"""
	courseName = models.CharField(verbose_name="课程名称", max_length=32)
	sketch = models.TextField(verbose_name="课程简述")
	price = models.PositiveIntegerField(verbose_name="学费", help_text="游客学习收费，工作室成员学习免费")
	cover = models.ImageField(verbose_name="课程封面", upload_to='courseCover/', default='courseCover/default.png')
	grade = models.IntegerField(verbose_name="课程等级", choices=((1, "M1"), (2, "M2"), (3, "M3"), (4, "M4"), (5, "M5")))
	category = models.IntegerField(verbose_name="课程分类", choices=((1, "算法"), (2, "前端"), (3, "后端"), (4, "AI"), (5, "其它")))

	teacher = models.ForeignKey(verbose_name="开课老师", to="UserInfo", on_delete=models.PROTECT,
	                            help_text="开课老师限制为M4、M5等级成员")
	assistant = models.ManyToManyField(verbose_name="助教", to="UserInfo",
	                                   help_text="助教限定为M3等级成员")

	def __str__(self):
		return self.courseName

Classes
每一门课程对应一个班级，用于存储一些课程资料、学生交流和老师答疑。
# index/models.py
class Classes(models.Model):
	"""班级"""
	startDate = models.DateField(verbose_name="开课日期")
	QQ = models.IntegerField(verbose_name="班级QQ群")
	graduateDate = models.DateField(verbose_name="结业日期", null=True, blank=True)
	explain = models.TextField(verbose_name="说明", null=True, blank=True)

	course = models.ForeignKey(verbose_name="课程", to="Course", on_delete=models.PROTECT)
	classTeacher = models.ForeignKey(verbose_name="班主任", to="UserInfo", on_delete=models.PROTECT,
	                                 help_text="班主任为成员管理部成员，负责督促老师课程制作进度和学生学习进度")

	def __str__(self):
		return "%s-%s" % (self.course.courseName, self.QQ)

Student
class Student(models.Model):
	"""学生表"""
	student = models.OneToOneField(verbose_name="学生信息", to="User", on_delete=models.PROTECT)
	QQ = models.CharField(verbose_name="学生QQ", max_length=32)
	telephone = models.IntegerField(verbose_name="学生手机号", max_length=32)
	classList = models.ManyToManyField(verbose_name="已报班级", to="Classes", null=True, blank=True)
	state = models.IntegerField(verbose_name="学生状态", choices=[(1, "审核"), (2, "在读"), (3, "毕业")], default=1)
	remark = models.TextField(verbose_name="备注")

	def __str__(self):
		return "%s-%s" % (self.student.username, self.classList.course.name)

Project
工作室承接项目，需要一个项目表存储项目记录。
class Project(models.Model):
	"""项目"""
	name = models.CharField(verbose_name="项目名称", max_length=32)
	contactName = models.CharField(verbose_name="联系人姓名", max_length=32)
	contactInformation = models.CharField(verbose_name="联系人联系方式", max_length=64, help_text="QQ/WeChat/Phone")
	price = models.IntegerField(verbose_name="项目报价")
	introduce = models.TextField(verbose_name="项目介绍")

	superintendent = models.ForeignKey(verbose_name="项目负责人", to="UserInfo",
	                                   null=True, blank=True, on_delete=models.PROTECT)
	startDate = models.DateField(verbose_name="接取日期", null=True, blank=True)
	completeDate = models.DateField(verbose_name="完结日期", null=True, blank=True)

	def __str__(self):
		return self.name

ProjectRecord
为了保证项目能够保质保量的按时完成，每个项目需要一名项目开发部的成员进行监督和跟进。
class ProjectRecord(models.Model):
	"""项目跟进记录"""
	content = models.TextField(verbose_name="跟进内容")
	date = models.DateField(verbose_name="跟进日期", default=timezone.now)

	project = models.ForeignKey(verbose_name="跟进项目", to="Project", on_delete=models.PROTECT)
	superintendent = models.ForeignKey(verbose_name="跟进人", to="UserInfo", on_delete=models.PROTECT)

	def __str__(self):
		return "%s-%s" % (self.project.name, self.date)

PaymentRecord
class PaymentRecord(models.Model):
	"""账单记录"""
	user = models.OneToOneField(verbose_name="付款人", to="User", on_delete=models.PROTECT)
	type = models.IntegerField(verbose_name="账单类型", choices=[(1, "学费"), (2, "项目款"), (3, "其它")])
	price = models.IntegerField(verbose_name="金额")
	date = models.DateTimeField(verbose_name="账单日期", default=timezone.now)
	state = models.IntegerField(verbose_name="状态", choices=[(1, "审核中"), (2, "确认"), (3, "驳回")])
	confirmDate = models.DateTimeField(verbose_name="确认日期", null=True, blank=True)
	confirmUser = models.ForeignKey(verbose_name="审批人", to="UserInfo", null=True, blank=True, on_delete=models.PROTECT)
	remark = models.TextField(verbose_name="备注", null=True, blank=True)

	def __str__(self):
		return "%s-%s-%s" % (self.user.username, self.type, self.price)





1.2  Python安装与简单使用





                                            Python安装目录一、Python的安装1.Windows操作系统2.Linux操作系统（1）将 Linux 默认 Python 版本升级为 Python3（2）安装新版本的 Python3（3）安装Anaconda3.Mac操作系统二、Python的简单使用2.Linux系统
一、Python的安装
1.Windows操作系统
目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的。
由于3.x版越来越普及，我们的安装教程将以最新的Python 3.8版本为例。
根据你的Windows版本（64位还是32位）从Python的官方网站下载对应的64位安装程序或32位安装程序，然后，运行下载的exe安装包：

特别要注意勾上Add Python 3.8 to PATH，然后点“Install Now”或者"Customize installation"自定义安装位置即可完成安装。
在自定义安装的情况下，如下页面点击Next：

如下页面更改安装路径后点击Install：

安装成功后可以直接Close：

2.Linux操作系统
在Linux系统中安装Python之前，需要提前说明一下，一般的Linux系统都会自带Python环境，默认都是Python2.7，但是Python2.7已经不再维护了，并且Python3已经成为主流。
可以通过如下命令查看默认的Python版本：
python

执行结果如下：
[hadoop@Alex ~]$ python
Python 2.7.5 (default, Jun 20 2019, 20:27:34)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>

最后出现了 Python 命令提示符>>>，这意味着我们进入了 Python 交互式编程环境，可以在这里直接输入代码并查看运行结果，如下所示：
>>> a=100
>>> b=4
>>> a*b
400

通过如下命令可以退出python shell：
exit()

执行结果为：
Python 2.7.5 (default, Jun 20 2019, 20:27:34)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()
[hadoop@Alex ~]$

有些Linux操作系统中也自带 Python3 的环境，可以通过如下命令分别查看 Python2 和 Python3 的位置：
查看默认 Python2 位置：
python

执行结果为：
/usr/bin/python

查看默认 Python3 位置：
python3

执行结果为：
/usr/bin/python3

在这里提供三种 Linux 系统中使用 Python3 的方法，讲清优劣关系，然后可以自行选择。

将 Linux 默认 Python 版本升级为 Python3
优点：操作简单，两条命令就能解决
缺点：默认Python3版本较低；可能会使安装工具、防火墙开端口报错
安装新版本的 Python3
优点：Python3 版本可选择；
缺点：可能会使安装工具、防火墙开端口报错；系统内有多个版本 Python3
安装Anaconda
优点：使用简单，很多第三方包都准备好了；后续搭建深度学习环境更加方便
缺点：系统内有多个版本 Python3

（1）将 Linux 默认 Python 版本升级为 Python3
以树莓派下将 Python 2 升级为 Python 3 为例
根据之前查看的 Python2 和 Python3 的位置执行下面的命令：
sudo mv /usr/bin/python  /usr/bin/python2

sudo ln -s /usr/bin/python3 /usr/bin/python

注意：不能直接就把python链接到python3上，会报错，先把原来的python2备份一下。
ln: 无法创建符号链接’/usr/bin/python’: 文件已存在

之后在终端输入python就可以看到python的默认版本改为python3.5了。

（2）安装新版本的 Python3
以 CentOS 下安装 Python3.6 为例

安装EPEL

EPEL的全称叫 Extra Packages for Enterprise Linux 。
EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。
装上了 EPEL之后，就相当于添加了一个第三方源。
sudo yum -y install epel-release

出现如下内容说明安装成功：
Updated:
  epel-release.noarch 0:7-12

Complete!


安装IUS软件源

IUS只为RHEL和CentOS这两个发行版提供较新版本的rpm包。
如果在os或epel找不到某个软件的新版rpm，软件官方又只提供源代码包的时候，可以来ius源中找，几乎都能找到。
sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm

出现如下内容说明安装成功：
Installed:
  ius-release.noarch 0:2-1.el7.ius

Complete!


安装Python3.6

sudo yum -y install python36u

出现如下内容说明安装成功：
Installed:
  python3.x86_64 0:3.6.8-10.el7

Dependency Installed:
  libtirpc.x86_64 0:0.2.4-0.16.el7                 python3-libs.x86_64 0:3.6.8-10.el7        python3-pip.noarch 0:9.0.3-7.el7_7
  python3-setuptools.noarch 0:39.2.0-10.el7

Complete!


安装pip3

pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。
sudo yum -y install python36u-pip


升级pip3

默认安装的pip版本过低，需要进行升级：
sudo pip3 install --upgrade pip


检查安装情况

python3.6  -V
pip -V


配置默认Python版本

此时执行 python 命令：
[hadoop@Alex ~]$ python
Python 2.7.5 (default, Jun 20 2019, 20:27:34)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>

默认的 Python 版本还是 Python 2.7 ，此时需要配置一下：
sudo mv /usr/bin/python /usr/bin/python.bak

sudo ln -s /usr/bin/python3 /usr/bin/python

然后再执行 python 命令就可以看到默认的python更改为python 3.6了：
[hadoop@Alex ~]$ sudo mv /usr/bin/python /usr/bin/python.bak
[hadoop@Alex ~]$ sudo ln -s /usr/bin/python3 /usr/bin/python
[hadoop@Alex ~]$ python
Python 3.6.8 (default, Aug  7 2019, 17:28:10)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()


配置yum

这个时候使用yum命令会报错：
[hadoop@Alex ~]$ yum
  File "/usr/bin/yum", line 30
    except KeyboardInterrupt, e:
                            ^
SyntaxError: invalid syntax

主要是因为yum是依赖python2.7的，把python改成了3.6之后，自然不好使了。
需要更改几个文件的配置：
sudo vim /usr/libexec/urlgrabber-ext-down

打开以后，找到第一行/usr/bin/python，后面加上2.7就可以了，也就是/usr/bin/python2.7。


以下文件做相同的操作
sudo vim /usr/bin/yum

如果防火墙开端口报错的话，将下面两个文件也做相应的改动：
suo vim /usr/bin/firewall-cmd

sudo vim /usr/sbin/firewalld

这样的话，CentOS安装Python 3.6就完成了。
（3）安装Anaconda
Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。
里面所包含的Jupyter Notebook是数据挖掘领域中最热门的工具。(例如Kaggle竞赛)
可以去清华大学开源软件镜像站中找到喜欢的Anaconda版本，这里以Anaconda3-5.3.1-Linux-x86_64安装为例。

复制下载地址，然后在Linux中使用wget下载：
wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86_64.sh

执行结果为：
[Alex@Alex ~]$ wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86_64.sh
--2020-03-30 10:23:04--  https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86_64.sh
Resolving mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)... 101.6.8.193, 2402:f000:1:408:8100::1
Connecting to mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)|101.6.8.193|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 667976437 (637M) [application/octet-stream]
Saving to: ‘Anaconda3-5.3.1-Linux-x86_64.sh’

100%[=============================================================================================>] 667,976,437 10.4MB/s   in 65s

2020-03-30 10:24:09 (9.75 MB/s) - ‘Anaconda3-5.3.1-Linux-x86_64.sh’ saved [667976437/667976437]

在Linux里面.sh文件是可执行的脚本文件，需要用命令bash来进行安装：
bash Anaconda3-5.3.1-Linux-x86_64.sh

出现如下信息按 Enter：
In order to continue the installation process, please review the license agreement.
Please, press ENTER to continue
>>>

然后按几次空格翻页浏览一下license，
出现如下信息输入 yes ：
Do you accept the license terms? [yes|no]
[no] >>>yes

之后选择anaconda的安装位置，可以直接按 Enter 使用默认位置：
Anaconda3 will now be installed into this location:
/home/Alex/anaconda3

  - Press ENTER to confirm the location
  - Press CTRL-C to abort the installation
  - Or specify a different location below

[/home/Alex/anaconda3] >>>

经过大概几分钟的安装，anaconda会帮我们安装好很多常用的第三方库。
再之后会让我们初始化anaconda3，输入yes即可：
Do you wish the installer to initialize Anaconda3
in your /home/Alex/.bashrc ? [yes|no]
[no] >>>yes

最后让我们安装VSCode，这个我们暂时用不到，输入no：
Visual Studio Code License: https://code.visualstudio.com/license

Do you wish to proceed with the installation of Microsoft VSCode? [yes|no]
>>>no

这样，我们的Anaconda就安装好了：
(base) [Alex@Alex ~]$ python
Python 3.7.0 (default, Jun 28 2018, 13:15:42)
[GCC 7.2.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> exit()

3.Mac操作系统
如果你正在使用Mac，系统是OS X>=10.9，那么系统自带的Python版本是2.7，要安装最新的Python 3.8，有两个方法：


从Python官网下载Python 3.8的安装程序，下载后双击运行并安装；


如果安装了Homebrew，直接通过命令brew install python3安装即可。


二、Python的简单使用
2.Linux系统
在Linux操作系统中可以使用vim编写python脚本：
vim hello.py

然后编写一个简单的python代码：
print("Hello World")


之后Esc ——> :wq 保存脚本，最后通过如下命令运行：
python hello.py

执行结果为：
(base) [Alex@Alex ~]$ python hello.py
Hello World




ping github超时问题





                                            【问题】
ping github.com

发现丢包率是100%而网络没问题，原因是访问被墙，此时我们想clone github上的项目会一直失败。
【解决】
修改hosts文件的映射。
sudo vim /private/etc/hosts

然后把下面这段ip-域名映射信息复制进去：
151.101.185.194 github.global.ssl.fastly.net
192.30.253.112 github.com
151.101.184.133 assets-cdn.github.com
151.101.184.133 avatars0.githubusercontent.com
151.101.112.133 avatars1.githubusercontent.com

再次ping










可以正常访问啦，git的操作也正常了。




打击诈骗，逻辑回归闪亮登场





                                            逻辑回归

Alex为了买房的事忙活了大半天，终于到了晚饭时间，辛苦了一天，Alex决定犒劳一下自己。
突然间想起来，自己的好基友Bachelor帮了大忙，这些数据集都是他给的，得好好谢谢人家，于是把Bachelor叫了出来，去了一家中餐厅，大吃特吃了一顿。

吃完之后，Alex去刷卡，结果服务员说信用卡declined。

Alex心想：开什么玩笑，老子卡里得钱都能把你们餐厅买下来。
于是Alex决定再试一次，结果还是declined，此时，Alex收到了一封银行的短信：“If you really want to pay $1000 for this meal, press 1.”
这时Bachelor走了过来，看看了Alex手机中的短信，又同情的看了Alex一眼说：“你这是遇到诈骗了啊，行了，这顿饭我来吧，下次你再请。”
回去的路上，Alex闷闷不乐，Bachelor笑了笑说：“走，带你去看看我最近做的一个网上交易反欺诈系统。”
然后Bachelor开启了他的讲解之旅…

欺诈是一项十亿美元的业务，并且每年都在增加。
普华永道（PwC）在2018年进行的全球经济犯罪调查发现，在接受调查的7200家公司中，有一半（49％）经历过某种欺诈行为。
与普华永道2016年的研究相比有所增加，在该研究中，略微超过三分之一的受访组织（36％）遭受了经济犯罪。
这网上交易反欺诈系统项目是美国的某知名银行委托我们工作室做的，不过信息内容是加密过的，所以也不怕给你看。
训练集有两张表，一张是用户身份表Identity，另一张是用户事物表Transaction，这两个文件由TransactionID连接。
这样，我先给用简单的数据给你讲讲最常用的二分类算法——逻辑回归吧。
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

train_identity = pd.read_csv("train_identity.csv")
train_transaction = pd.read_csv("train_transaction.csv")

pd.set_option('display.max_columns',None)    # 设置pandas显示列不限制数量
pd.set_option('display.max_rows',None)       # 设置pandas显示行不限制数量

train_identity.head()







      TransactionID
      id_01
      id_02
      id_03
      id_04
      id_05
      id_06
      id_07
      id_08
      id_09
      id_10
      id_11
      id_12
      id_13
      id_14
      id_15
      id_16
      id_17
      id_18
      id_19
      id_20
      id_21
      id_22
      id_23
      id_24
      id_25
      id_26
      id_27
      id_28
      id_29
      id_30
      id_31
      id_32
      id_33
      id_34
      id_35
      id_36
      id_37
      id_38
      DeviceType
      DeviceInfo




      0
      2987004
      0.0
      70787.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      100.0
      NotFound
      NaN
      -480.0
      New
      NotFound
      166.0
      NaN
      542.0
      144.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      New
      NotFound
      Android 7.0
      samsung browser 6.2
      32.0
      2220x1080
      match_status:2
      T
      F
      T
      T
      mobile
      SAMSUNG SM-G892A Build/NRD90M


      1
      2987008
      -5.0
      98945.0
      NaN
      NaN
      0.0
      -5.0
      NaN
      NaN
      NaN
      NaN
      100.0
      NotFound
      49.0
      -300.0
      New
      NotFound
      166.0
      NaN
      621.0
      500.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      New
      NotFound
      iOS 11.1.2
      mobile safari 11.0
      32.0
      1334x750
      match_status:1
      T
      F
      F
      T
      mobile
      iOS Device


      2
      2987010
      -5.0
      191631.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      0.0
      0.0
      100.0
      NotFound
      52.0
      NaN
      Found
      Found
      121.0
      NaN
      410.0
      142.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      Found
      Found
      NaN
      chrome 62.0
      NaN
      NaN
      NaN
      F
      F
      T
      T
      desktop
      Windows


      3
      2987011
      -5.0
      221832.0
      NaN
      NaN
      0.0
      -6.0
      NaN
      NaN
      NaN
      NaN
      100.0
      NotFound
      52.0
      NaN
      New
      NotFound
      225.0
      NaN
      176.0
      507.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      New
      NotFound
      NaN
      chrome 62.0
      NaN
      NaN
      NaN
      F
      F
      T
      T
      desktop
      NaN


      4
      2987016
      0.0
      7460.0
      0.0
      0.0
      1.0
      0.0
      NaN
      NaN
      0.0
      0.0
      100.0
      NotFound
      NaN
      -300.0
      Found
      Found
      166.0
      15.0
      529.0
      575.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      Found
      Found
      Mac OS X 10_11_6
      chrome 62.0
      24.0
      1280x800
      match_status:2
      T
      F
      T
      T
      desktop
      MacOS




TransactionID——ID号，人为标注
id01-id38——网上交易的基本信息（IP、ISP、代理、浏览器、操作系统、版本等）
DeviceType——设备类型（mobile、desktop）
DeviceInfo——设备信息（Windows、MacOS、iOS Device…）
train_transaction.head()







      TransactionID
      isFraud
      TransactionDT
      TransactionAmt
      ProductCD
      card1
      card2
      card3
      card4
      card5
      card6
      addr1
      addr2
      dist1
      dist2
      P_emaildomain
      R_emaildomain
      C1
      C2
      C3
      C4
      C5
      C6
      C7
      C8
      C9
      C10
      C11
      C12
      C13
      C14
      D1
      D2
      D3
      D4
      D5
      D6
      D7
      D8
      D9
      D10
      D11
      D12
      D13
      D14
      D15
      M1
      M2
      M3
      M4
      M5
      M6
      M7
      M8
      M9
      V1
      V2
      V3
      V4
      V5
      V6
      V7
      V8
      V9
      V10
      V11
      V12
      V13
      V14
      V15
      V16
      V17
      V18
      V19
      V20
      V21
      V22
      V23
      V24
      V25
      V26
      V27
      V28
      V29
      V30
      V31
      V32
      V33
      V34
      V35
      V36
      V37
      V38
      V39
      V40
      V41
      V42
      V43
      V44
      V45
      V46
      V47
      V48
      V49
      V50
      V51
      V52
      V53
      V54
      V55
      V56
      V57
      V58
      V59
      V60
      V61
      V62
      V63
      V64
      V65
      V66
      V67
      V68
      V69
      V70
      V71
      V72
      V73
      V74
      V75
      V76
      V77
      V78
      V79
      V80
      V81
      V82
      V83
      V84
      V85
      V86
      V87
      V88
      V89
      V90
      V91
      V92
      V93
      V94
      V95
      V96
      V97
      V98
      V99
      V100
      V101
      V102
      V103
      V104
      V105
      V106
      V107
      V108
      V109
      V110
      V111
      V112
      V113
      V114
      V115
      V116
      V117
      V118
      V119
      V120
      V121
      V122
      V123
      V124
      V125
      V126
      V127
      V128
      V129
      V130
      V131
      V132
      V133
      V134
      V135
      V136
      V137
      V138
      V139
      V140
      V141
      V142
      V143
      V144
      V145
      V146
      V147
      V148
      V149
      V150
      V151
      V152
      V153
      V154
      V155
      V156
      V157
      V158
      V159
      V160
      V161
      V162
      V163
      V164
      V165
      V166
      V167
      V168
      V169
      V170
      V171
      V172
      V173
      V174
      V175
      V176
      V177
      V178
      V179
      V180
      V181
      V182
      V183
      V184
      V185
      V186
      V187
      V188
      V189
      V190
      V191
      V192
      V193
      V194
      V195
      V196
      V197
      V198
      V199
      V200
      V201
      V202
      V203
      V204
      V205
      V206
      V207
      V208
      V209
      V210
      V211
      V212
      V213
      V214
      V215
      V216
      V217
      V218
      V219
      V220
      V221
      V222
      V223
      V224
      V225
      V226
      V227
      V228
      V229
      V230
      V231
      V232
      V233
      V234
      V235
      V236
      V237
      V238
      V239
      V240
      V241
      V242
      V243
      V244
      V245
      V246
      V247
      V248
      V249
      V250
      V251
      V252
      V253
      V254
      V255
      V256
      V257
      V258
      V259
      V260
      V261
      V262
      V263
      V264
      V265
      V266
      V267
      V268
      V269
      V270
      V271
      V272
      V273
      V274
      V275
      V276
      V277
      V278
      V279
      V280
      V281
      V282
      V283
      V284
      V285
      V286
      V287
      V288
      V289
      V290
      V291
      V292
      V293
      V294
      V295
      V296
      V297
      V298
      V299
      V300
      V301
      V302
      V303
      V304
      V305
      V306
      V307
      V308
      V309
      V310
      V311
      V312
      V313
      V314
      V315
      V316
      V317
      V318
      V319
      V320
      V321
      V322
      V323
      V324
      V325
      V326
      V327
      V328
      V329
      V330
      V331
      V332
      V333
      V334
      V335
      V336
      V337
      V338
      V339




      0
      2987000
      0
      86400
      68.5
      W
      13926
      NaN
      150.0
      discover
      142.0
      credit
      315.0
      87.0
      19.0
      NaN
      NaN
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      2.0
      0.0
      1.0
      1.0
      14.0
      NaN
      13.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      13.0
      13.0
      NaN
      NaN
      NaN
      0.0
      T
      T
      T
      M2
      F
      T
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      1
      2987001
      0
      86401
      29.0
      W
      2755
      404.0
      150.0
      mastercard
      102.0
      credit
      325.0
      87.0
      NaN
      NaN
      gmail.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      M0
      T
      T
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      2
      2987002
      0
      86469
      59.0
      W
      4663
      490.0
      150.0
      visa
      166.0
      debit
      330.0
      87.0
      287.0
      NaN
      outlook.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      315.0
      NaN
      NaN
      NaN
      315.0
      T
      T
      T
      M0
      F
      F
      F
      F
      F
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      3
      2987003
      0
      86499
      50.0
      W
      18132
      567.0
      150.0
      mastercard
      117.0
      debit
      476.0
      87.0
      NaN
      NaN
      yahoo.com
      NaN
      2.0
      5.0
      0.0
      0.0
      0.0
      4.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      25.0
      1.0
      112.0
      112.0
      0.0
      94.0
      0.0
      NaN
      NaN
      NaN
      NaN
      84.0
      NaN
      NaN
      NaN
      NaN
      111.0
      NaN
      NaN
      NaN
      M0
      T
      F
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      48.0
      28.0
      0.0
      10.0
      4.0
      1.0
      38.0
      24.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      50.0
      1758.0
      925.0
      0.0
      354.0
      135.0
      50.0
      1404.0
      790.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      1.0
      28.0
      0.0
      0.0
      0.0
      0.0
      10.0
      0.0
      4.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      38.0
      24.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      50.0
      1758.0
      925.0
      0.0
      354.0
      0.0
      135.0
      0.0
      0.0
      0.0
      50.0
      1404.0
      790.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      4
      2987004
      0
      86506
      50.0
      H
      4497
      514.0
      150.0
      mastercard
      102.0
      credit
      420.0
      87.0
      NaN
      NaN
      gmail.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      6.0
      18.0
      140.0
      0.0
      0.0
      0.0
      0.0
      1803.0
      49.0
      64.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      15557.990234
      169690.796875
      0.0
      0.0
      0.0
      515.0
      5155.0
      2840.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0




TransactionID——ID号，人为标注
isFraud——是否被诈骗，0表示没有被诈骗，1表示被诈骗
TransactionDT——距离某个给定日期时间的增量
TransactionAmt——交易付款金额（美元）
ProductCD——产品代码，每笔交易的产品
card1 - card6——支付卡的基本信息（卡类型，卡类别，发行银行，国家等）
addr——地址
dist——距离
P_ and R__ emaildomain——买方和收件人电子邮件域
C1-C14——计数，例如发现与支付卡关联的地址数等。实际含义被屏蔽。
D1-D15——时间间隔，例如前一次交易之间的天数等。
M1-M9——匹配，例如卡上的姓名和地址等。
Vxxx——Vesta设计了丰富的功能，包括排名，计数和其他实体关系。
两张表可以通过TransactionID连接起来，原来的两张表就可以直接删除了。
train = pd.merge(train_transaction, train_identity, on="TransactionID", how="left")
del train_identity, train_transaction

train.head(10)







      TransactionID
      isFraud
      TransactionDT
      TransactionAmt
      ProductCD
      card1
      card2
      card3
      card4
      card5
      card6
      addr1
      addr2
      dist1
      dist2
      P_emaildomain
      R_emaildomain
      C1
      C2
      C3
      C4
      C5
      C6
      C7
      C8
      C9
      C10
      C11
      C12
      C13
      C14
      D1
      D2
      D3
      D4
      D5
      D6
      D7
      D8
      D9
      D10
      D11
      D12
      D13
      D14
      D15
      M1
      M2
      M3
      M4
      M5
      M6
      M7
      M8
      M9
      V1
      V2
      V3
      V4
      V5
      V6
      V7
      V8
      V9
      V10
      V11
      V12
      V13
      V14
      V15
      V16
      V17
      V18
      V19
      V20
      V21
      V22
      V23
      V24
      V25
      V26
      V27
      V28
      V29
      V30
      V31
      V32
      V33
      V34
      V35
      V36
      V37
      V38
      V39
      V40
      V41
      V42
      V43
      V44
      V45
      V46
      V47
      V48
      V49
      V50
      V51
      V52
      V53
      V54
      V55
      V56
      V57
      V58
      V59
      V60
      V61
      V62
      V63
      V64
      V65
      V66
      V67
      V68
      V69
      V70
      V71
      V72
      V73
      V74
      V75
      V76
      V77
      V78
      V79
      V80
      V81
      V82
      V83
      V84
      V85
      V86
      V87
      V88
      V89
      V90
      V91
      V92
      V93
      V94
      V95
      V96
      V97
      V98
      V99
      V100
      V101
      V102
      V103
      V104
      V105
      V106
      V107
      V108
      V109
      V110
      V111
      V112
      V113
      V114
      V115
      V116
      V117
      V118
      V119
      V120
      V121
      V122
      V123
      V124
      V125
      V126
      V127
      V128
      V129
      V130
      V131
      V132
      V133
      V134
      V135
      V136
      V137
      V138
      V139
      V140
      V141
      V142
      V143
      V144
      V145
      V146
      V147
      V148
      V149
      V150
      V151
      V152
      V153
      V154
      V155
      V156
      V157
      V158
      V159
      V160
      V161
      V162
      V163
      V164
      V165
      V166
      V167
      V168
      V169
      V170
      V171
      V172
      V173
      V174
      V175
      V176
      V177
      V178
      V179
      V180
      V181
      V182
      V183
      V184
      V185
      V186
      V187
      V188
      V189
      V190
      V191
      V192
      V193
      V194
      V195
      V196
      V197
      V198
      V199
      V200
      V201
      V202
      V203
      V204
      V205
      V206
      V207
      V208
      V209
      V210
      V211
      V212
      V213
      V214
      V215
      V216
      V217
      V218
      V219
      V220
      V221
      V222
      V223
      V224
      V225
      V226
      V227
      V228
      V229
      V230
      V231
      V232
      V233
      V234
      V235
      V236
      V237
      V238
      V239
      V240
      V241
      V242
      V243
      V244
      V245
      V246
      V247
      V248
      V249
      V250
      V251
      V252
      V253
      V254
      V255
      V256
      V257
      V258
      V259
      V260
      V261
      V262
      V263
      V264
      V265
      V266
      V267
      V268
      V269
      V270
      V271
      V272
      V273
      V274
      V275
      V276
      V277
      V278
      V279
      V280
      V281
      V282
      V283
      V284
      V285
      V286
      V287
      V288
      V289
      V290
      V291
      V292
      V293
      V294
      V295
      V296
      V297
      V298
      V299
      V300
      V301
      V302
      V303
      V304
      V305
      V306
      V307
      V308
      V309
      V310
      V311
      V312
      V313
      V314
      V315
      V316
      V317
      V318
      V319
      V320
      V321
      V322
      V323
      V324
      V325
      V326
      V327
      V328
      V329
      V330
      V331
      V332
      V333
      V334
      V335
      V336
      V337
      V338
      V339
      id_01
      id_02
      id_03
      id_04
      id_05
      id_06
      id_07
      id_08
      id_09
      id_10
      id_11
      id_12
      id_13
      id_14
      id_15
      id_16
      id_17
      id_18
      id_19
      id_20
      id_21
      id_22
      id_23
      id_24
      id_25
      id_26
      id_27
      id_28
      id_29
      id_30
      id_31
      id_32
      id_33
      id_34
      id_35
      id_36
      id_37
      id_38
      DeviceType
      DeviceInfo




      0
      2987000
      0
      86400
      68.5
      W
      13926
      NaN
      150.0
      discover
      142.0
      credit
      315.0
      87.0
      19.0
      NaN
      NaN
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      2.0
      0.0
      1.0
      1.0
      14.0
      NaN
      13.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      13.0
      13.0
      NaN
      NaN
      NaN
      0.0
      T
      T
      T
      M2
      F
      T
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      1
      2987001
      0
      86401
      29.0
      W
      2755
      404.0
      150.0
      mastercard
      102.0
      credit
      325.0
      87.0
      NaN
      NaN
      gmail.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      M0
      T
      T
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      2
      2987002
      0
      86469
      59.0
      W
      4663
      490.0
      150.0
      visa
      166.0
      debit
      330.0
      87.0
      287.0
      NaN
      outlook.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      315.0
      NaN
      NaN
      NaN
      315.0
      T
      T
      T
      M0
      F
      F
      F
      F
      F
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      3
      2987003
      0
      86499
      50.0
      W
      18132
      567.0
      150.0
      mastercard
      117.0
      debit
      476.0
      87.0
      NaN
      NaN
      yahoo.com
      NaN
      2.0
      5.0
      0.0
      0.0
      0.0
      4.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      25.0
      1.0
      112.0
      112.0
      0.0
      94.0
      0.0
      NaN
      NaN
      NaN
      NaN
      84.0
      NaN
      NaN
      NaN
      NaN
      111.0
      NaN
      NaN
      NaN
      M0
      T
      F
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      48.0
      28.0
      0.0
      10.0
      4.0
      1.0
      38.0
      24.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      50.0
      1758.0
      925.0
      0.0
      354.0
      135.0
      50.0
      1404.0
      790.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      1.0
      28.0
      0.0
      0.0
      0.0
      0.0
      10.0
      0.0
      4.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      38.0
      24.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      50.0
      1758.0
      925.0
      0.0
      354.0
      0.0
      135.0
      0.0
      0.0
      0.0
      50.0
      1404.0
      790.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      4
      2987004
      0
      86506
      50.0
      H
      4497
      514.0
      150.0
      mastercard
      102.0
      credit
      420.0
      87.0
      NaN
      NaN
      gmail.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      6.0
      18.0
      140.0
      0.0
      0.0
      0.0
      0.0
      1803.0
      49.0
      64.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      15557.990234
      169690.796875
      0.0
      0.0
      0.0
      515.0
      5155.0
      2840.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      70787.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      100.0
      NotFound
      NaN
      -480.0
      New
      NotFound
      166.0
      NaN
      542.0
      144.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      New
      NotFound
      Android 7.0
      samsung browser 6.2
      32.0
      2220x1080
      match_status:2
      T
      F
      T
      T
      mobile
      SAMSUNG SM-G892A Build/NRD90M


      5
      2987005
      0
      86510
      49.0
      W
      5937
      555.0
      150.0
      visa
      226.0
      debit
      272.0
      87.0
      36.0
      NaN
      gmail.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      NaN
      NaN
      NaN
      0.0
      T
      T
      T
      M1
      F
      T
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      6
      2987006
      0
      86522
      159.0
      W
      12308
      360.0
      150.0
      visa
      166.0
      debit
      126.0
      87.0
      0.0
      NaN
      yahoo.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      NaN
      NaN
      NaN
      0.0
      T
      T
      T
      M0
      F
      F
      T
      T
      T
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      7
      2987007
      0
      86529
      422.5
      W
      12695
      490.0
      150.0
      visa
      226.0
      debit
      325.0
      87.0
      NaN
      NaN
      mail.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      NaN
      0.0
      NaN
      NaN
      NaN
      M0
      F
      F
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN


      8
      2987008
      0
      86535
      15.0
      H
      2803
      100.0
      150.0
      visa
      226.0
      debit
      337.0
      87.0
      NaN
      NaN
      anonymous.com
      NaN
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      1.0
      1.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      6.0
      18.0
      140.0
      0.0
      0.0
      0.0
      0.0
      1804.0
      49.0
      64.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      15607.990234
      169740.796875
      0.0
      0.0
      0.0
      515.0
      5155.0
      2840.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      -5.0
      98945.0
      NaN
      NaN
      0.0
      -5.0
      NaN
      NaN
      NaN
      NaN
      100.0
      NotFound
      49.0
      -300.0
      New
      NotFound
      166.0
      NaN
      621.0
      500.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      New
      NotFound
      iOS 11.1.2
      mobile safari 11.0
      32.0
      1334x750
      match_status:1
      T
      F
      F
      T
      mobile
      iOS Device


      9
      2987009
      0
      86536
      117.0
      W
      17399
      111.0
      150.0
      mastercard
      224.0
      debit
      204.0
      87.0
      19.0
      NaN
      yahoo.com
      NaN
      2.0
      2.0
      0.0
      0.0
      0.0
      3.0
      0.0
      0.0
      3.0
      0.0
      1.0
      0.0
      12.0
      2.0
      61.0
      61.0
      30.0
      318.0
      30.0
      NaN
      NaN
      NaN
      NaN
      40.0
      302.0
      NaN
      NaN
      NaN
      318.0
      T
      T
      T
      M0
      T
      T
      NaN
      NaN
      NaN
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      2.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      495.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN
      NaN




这里需要注意的是：并非所有交易都具有相应的身份信息。
数据预处理
# 把ID号抽取出来，备用
train_id = train[["TransactionID"]]
train.drop("TransactionID", axis=1, inplace=True)

缺失值处理
先看一下有多少特征含有缺失值：
print(f'There are {train.isnull().any().sum()} columns in train dataset with missing values.')

There are 414 columns in train dataset with missing values.

大多数列都有缺失的数据，这在现实世界中是正常的，让我们仔细看看它们。
na_count = train.isnull().sum().sort_values(ascending=False)
na_rate = na_count / len(train)
na_data = pd.concat([na_count,na_rate],axis=1,keys=['count','ratio'])

首先，如果某一特征实在太多，可以考虑删除这些特征并认为数据集中不存在这样的特征，可以确定一个标准，如果缺失值超过50%，则直接删除该特征。
train.drop(na_data[na_data['ratio'] > 0.5].index, axis=1, inplace=True)

离散型数据处理
将所有的离散型数据对应为数值型数据，缺失值用均值填充。
for col in train.columns:
    if train[col].dtypes == "object":
        train[col], uniques = pd.factorize(train[col])
    train[col].fillna(train[col].mean(), inplace=True)

train.head()







      isFraud
      TransactionDT
      TransactionAmt
      ProductCD
      card1
      card2
      card3
      card4
      card5
      card6
      addr1
      addr2
      P_emaildomain
      C1
      C2
      C3
      C4
      C5
      C6
      C7
      C8
      C9
      C10
      C11
      C12
      C13
      C14
      D1
      D2
      D3
      D4
      D10
      D11
      D15
      M1
      M2
      M3
      M4
      M6
      V1
      V2
      V3
      V4
      V5
      V6
      V7
      V8
      V9
      V10
      V11
      V12
      V13
      V14
      V15
      V16
      V17
      V18
      V19
      V20
      V21
      V22
      V23
      V24
      V25
      V26
      V27
      V28
      V29
      V30
      V31
      V32
      V33
      V34
      V35
      V36
      V37
      V38
      V39
      V40
      V41
      V42
      V43
      V44
      V45
      V46
      V47
      V48
      V49
      V50
      V51
      V52
      V53
      V54
      V55
      V56
      V57
      V58
      V59
      V60
      V61
      V62
      V63
      V64
      V65
      V66
      V67
      V68
      V69
      V70
      V71
      V72
      V73
      V74
      V75
      V76
      V77
      V78
      V79
      V80
      V81
      V82
      V83
      V84
      V85
      V86
      V87
      V88
      V89
      V90
      V91
      V92
      V93
      V94
      V95
      V96
      V97
      V98
      V99
      V100
      V101
      V102
      V103
      V104
      V105
      V106
      V107
      V108
      V109
      V110
      V111
      V112
      V113
      V114
      V115
      V116
      V117
      V118
      V119
      V120
      V121
      V122
      V123
      V124
      V125
      V126
      V127
      V128
      V129
      V130
      V131
      V132
      V133
      V134
      V135
      V136
      V137
      V279
      V280
      V281
      V282
      V283
      V284
      V285
      V286
      V287
      V288
      V289
      V290
      V291
      V292
      V293
      V294
      V295
      V296
      V297
      V298
      V299
      V300
      V301
      V302
      V303
      V304
      V305
      V306
      V307
      V308
      V309
      V310
      V311
      V312
      V313
      V314
      V315
      V316
      V317
      V318
      V319
      V320
      V321




      0
      0
      86400
      68.5
      0
      13926
      362.555488
      150.0
      0
      142.0
      0
      315.0
      87.0
      -1
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      2.0
      0.0
      1.0
      1.0
      14.0
      169.563231
      13.000000
      140.002441
      13.000000
      13.000000
      0.000000
      0
      0
      0
      0
      0
      1.000000
      1.000000
      1.000000
      1.000000
      1.000000
      1.000000
      1.00000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.0000
      0.000000
      0.00000
      0.00000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.00000
      1.00000
      0.000000
      0.00000
      0.00000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.542594
      0.579198
      1.108065
      1.1624
      0.166076
      0.177145
      0.999269
      0.156118
      0.168942
      1.083891
      1.120779
      1.022286
      1.038515
      0.383174
      0.397724
      0.164746
      0.170579
      0.182695
      1.000000
      1.000000
      1.00000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.0000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.00000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      117.0
      0.0
      0.0
      0.0
      0.0


      1
      0
      86401
      29.0
      0
      2755
      404.000000
      150.0
      1
      102.0
      0
      325.0
      87.0
      0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      169.563231
      28.343348
      0.000000
      0.000000
      146.621465
      0.000000
      -1
      -1
      -1
      1
      0
      0.999945
      1.045204
      1.078075
      0.846456
      0.876991
      1.045686
      1.07287
      1.027704
      1.041529
      0.463915
      0.478987
      0.000000
      0.000000
      1.0000
      0.000000
      0.00000
      0.00000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.00000
      1.00000
      0.000000
      0.00000
      0.00000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.0000
      0.000000
      0.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.00000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.0000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      1.00000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0


      2
      0
      86469
      59.0
      0
      4663
      490.000000
      150.0
      2
      166.0
      1
      330.0
      87.0
      1
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      169.563231
      28.343348
      0.000000
      0.000000
      315.000000
      315.000000
      0
      0
      0
      1
      1
      1.000000
      1.000000
      1.000000
      1.000000
      1.000000
      1.000000
      1.00000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.0000
      0.000000
      0.00000
      0.00000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.00000
      1.00000
      0.000000
      0.00000
      0.00000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.0000
      0.000000
      0.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.00000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.0000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      1.00000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0


      3
      0
      86499
      50.0
      0
      18132
      567.000000
      150.0
      1
      117.0
      1
      476.0
      87.0
      2
      2.0
      5.0
      0.0
      0.0
      0.0
      4.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      25.0
      1.0
      112.0
      112.000000
      0.000000
      94.000000
      84.000000
      146.621465
      111.000000
      -1
      -1
      -1
      1
      1
      0.999945
      1.045204
      1.078075
      0.846456
      0.876991
      1.045686
      1.07287
      1.027704
      1.041529
      0.463915
      0.478987
      1.000000
      1.000000
      1.0000
      0.000000
      0.00000
      0.00000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.00000
      1.00000
      0.000000
      0.00000
      0.00000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.0000
      0.000000
      0.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.00000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.0000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      1.00000
      1.000000
      0.000000
      0.000000
      1.000000
      1.000000
      1.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      0.000000
      1.0
      48.0
      28.0
      0.0
      10.0
      4.0
      1.0
      38.0
      24.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      50.0
      1758.0
      925.0
      0.0
      354.0
      135.0
      50.0
      1404.0
      790.0
      0.0
      0.0
      0.0
      1.0
      28.0
      0.0
      0.0
      0.0
      0.0
      10.0
      0.0
      4.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      38.0
      24.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      50.0
      1758.0
      925.0
      0.0
      354.0
      0.0
      135.0
      0.0
      0.0
      0.0
      50.0
      1404.0
      790.0
      0.0
      0.0
      0.0


      4
      0
      86506
      50.0
      1
      4497
      514.000000
      150.0
      1
      102.0
      0
      420.0
      87.0
      0
      1.0
      1.0
      0.0
      0.0
      0.0
      1.0
      0.0
      1.0
      0.0
      1.0
      1.0
      0.0
      1.0
      1.0
      0.0
      169.563231
      28.343348
      140.002441
      123.982137
      146.621465
      163.744579
      -1
      -1
      -1
      -1
      -1
      0.999945
      1.045204
      1.078075
      0.846456
      0.876991
      1.045686
      1.07287
      1.027704
      1.041529
      0.463915
      0.478987
      0.559711
      0.599166
      0.9995
      0.122342
      0.12346
      0.13404
      0.135363
      0.816371
      0.847843
      0.129684
      0.132292
      1.034791
      1.058097
      0.97766
      0.98804
      0.000776
      0.00083
      0.38784
      0.406436
      0.140761
      0.142417
      0.130693
      0.139154
      0.542594
      0.579198
      1.108065
      1.1624
      0.166076
      0.177145
      0.999269
      0.156118
      0.168942
      1.083891
      1.120779
      1.022286
      1.038515
      0.383174
      0.397724
      0.164746
      0.170579
      0.182695
      0.577586
      0.619982
      1.06767
      1.120979
      0.128312
      0.132453
      0.134433
      0.142537
      0.829785
      0.867563
      0.130743
      0.141825
      0.999663
      0.981038
      0.998121
      0.000534
      0.3902
      0.407924
      0.140639
      0.145124
      0.139982
      0.152147
      0.544278
      0.587557
      1.086893
      1.144462
      0.136867
      0.143954
      0.152696
      0.84461
      0.881965
      0.137145
      0.149788
      1.064885
      1.099456
      0.999246
      0.000902
      0.401862
      0.420461
      0.150322
      0.154812
      0.137007
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      1.0
      1.0
      1.0
      1.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0
      0.0




我们的任务其实很简单，就是要一个binary classification，判断用户是否具有欺诈性，所以就两种结果：“欺诈性”或“非欺诈性”。
对于这种分类问题我们需要用到一种转换函数，将我们输入的特征经过计算得到一个概率值，如果这个概率大于0.5判定被诈骗，否则没有。
Sigmoid函数
S(x)=11+e−xS(x)=\frac{1}{1+e^{-x}}S(x)=1+e−x1​
自变量取值为任意实数，值域[0,1]
将任意的输入映射到[0,1]区间，在线性回归中可以得到一个预测值，再将该值映射到Sigmoid函数中就完成了由值到概率的转换，也就是分类任务。
可以用python来画一个sigmoid函数图像：
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

x = np.arange(-10, 10)
plt.plot(x, sigmoid(x))
plt.show()


预测函数
S(x)=11+e−xS(x)=\frac{1}{1+e^{-x}}S(x)=1+e−x1​
我们可以将特征带入：
Sθ(θTX)=11+e−θTXS_\theta(\theta^TX)=\frac{1}{1+e^{-\theta^TX}}Sθ​(θTX)=1+e−θTX1​
此时就可以直接定义我们的模型函数model：
def model(X, theta):
    """
    返回模型计算结果。
    X——计算分类的样本特征
    theta——系数
    """
    return sigmoid(np.dot(X, theta.T))

(θ0,θ1,θ2,...,θi,...,θn)×(1x1x2...xi...xn)=θ0+θ1x1+θ2x2+...+θixi+...+θnxn
\begin{array}{ccc}
\begin{pmatrix}\theta_{0},\theta_{1},\theta_{2}, ... ,\theta_{i}, ... ,\theta_{n}\end{pmatrix} & \times & \begin{pmatrix}
1\\
x_{1}\\
x_{2}\\
...\\
x_{i}\\
...\\
x_{n}
\end{pmatrix}\end{array}=\theta_{0}+\theta_{1}x_{1}+\theta_{2}x_{2}+...+\theta_{i}x_{i}+...+\theta_{n}x_{n}
(θ0​,θ1​,θ2​,...,θi​,...,θn​​)​×​⎝⎜⎜⎜⎜⎜⎜⎜⎜⎛​1x1​x2​...xi​...xn​​⎠⎟⎟⎟⎟⎟⎟⎟⎟⎞​​=θ0​+θ1​x1​+θ2​x2​+...+θi​xi​+...+θn​xn​
# 我们要插入一行辅助计算值1
train.insert(0, "Ones", 1)

分类任务
P(yi∣x;θ)=(11+e−θTX)yi(1−11+e−θTX)1−yiP({y_i}|x;\theta)=(\frac{1}{1+e^{-\theta^TX}})^{y_i}(1-\frac{1}{1+e^{-\theta^TX}})^{1-{y_i}}P(yi​∣x;θ)=(1+e−θTX1​)yi​(1−1+e−θTX1​)1−yi​
x表示特征值，𝑦𝑖表示有没有被诈骗，如果被诈骗了就是1，没有被诈骗就是0，对于二分类任务(0,1)：
y取0：P(yi∣x;θ)=(1−11+e−θTX)1−yiP({y_i}|x;\theta)=(1-\frac{1}{1+e^{-\theta^TX}})^{1-{y_i}}P(yi​∣x;θ)=(1−1+e−θTX1​)1−yi​
y取1：P(yi∣x;θ)=(11+e−θTX)yiP({y_i}|x;\theta)=(\frac{1}{1+e^{-\theta^TX}})^{y_i}P(yi​∣x;θ)=(1+e−θTX1​)yi​
所以，公式中还是只有𝜃是未知数，求解𝜃需要用到似然函数，我们把𝑃(𝑦𝑖|𝑥;𝜃)累乘起来：

为了方便计算，将似然函数转换为对数似然：
l(θ)=lnL(θ)=ln∏i=1m(11+e−θTX)yi(1−11+e−θTX)1−yil(\theta)=ln^{L(\theta)}=ln^{\prod_{i=1}^{m}(\frac{1}{1+e^{-\theta^TX}})^{y_i}(1-\frac{1}{1+e^{-\theta^TX}})^{1-{y_i}}}l(θ)=lnL(θ)=ln∏i=1m​(1+e−θTX1​)yi​(1−1+e−θTX1​)1−yi​
=∑i=1mln(11+e−θTX)yi(1−11+e−θTX)1−yi=\sum_{i=1}^{m}ln^{(\frac{1}{1+e^{-\theta^TX}})^{y_i}(1-\frac{1}{1+e^{-\theta^TX}})^{1-{y_i}}}=i=1∑m​ln(1+e−θTX1​)yi​(1−1+e−θTX1​)1−yi​
=∑i=1m(yiln(11+e−θTX)+(1−yi)ln(1−11+e−θTX))=\sum_{i=1}^{m}({y_i}ln^{(\frac{1}{1+e^{-\theta^TX}})}+(1-{y_i})ln^{(1-\frac{1}{1+e^{-\theta^TX}})})=i=1∑m​(yi​ln(1+e−θTX1​)+(1−yi​)ln(1−1+e−θTX1​))
咱们的最终目的是根据输入的特征求出概率𝑃(𝑦𝑖|𝑥;𝜃)，并且让这个概率越明确越好。
我们看sigmoid函数图像，x越大，y越接近于1，即被诈骗的概率很明确，x越小，y越接近于0，即没有被诈骗的概率越明确。
对数似然函数的本质就是衡量在某个参数下，整体的估计和真实情况一样的概率，越大代表越相近。
思考：为什么对数似然函数值越大越好？
将对数似然函数转换为目标函数：
J(θ)=−1ml(θ)=−1m∑i=1m(yiln(11+e−θTX)+(1−yi)ln(1−11+e−θTX))J(\theta)=-\frac{1}{m}l(\theta)=-\frac{1}{m}\sum_{i=1}^{m}({y_i}ln^{(\frac{1}{1+e^{-\theta^TX}})}+(1-{y_i})ln^{(1-\frac{1}{1+e^{-\theta^TX}})})J(θ)=−m1​l(θ)=−m1​i=1∑m​(yi​ln(1+e−θTX1​)+(1−yi​)ln(1−1+e−θTX1​))
我们要求l(𝜃)的最大值，就是求J(𝜃)的最小值，要先求极小值点，对𝜃求导：
δδθjJ(θ)=−1m∑i=1m(yi111+e−θTXδ11+e−θTXδθj−(1−yi)11−11+e−θTXδ11+e−θTXδθj)\frac{\delta}{\delta_{\theta_{j}}}J(\theta)=-\frac{1}{m}\sum_{i=1}^{m}(y_{i}\frac{1}{\frac{1}{1+e^{-\theta^TX}}}\frac{\delta \frac{1}{1+e^{-\theta^TX}}}{\delta_{\theta_{j}}}-(1-{y_i})\frac{1}{1-\frac{1}{1+e^{-\theta^TX}}}\frac{\delta{\frac{1}{1+e^{-\theta^TX}}}}{\delta_{\theta_{j}}})δθj​​δ​J(θ)=−m1​i=1∑m​(yi​1+e−θTX1​1​δθj​​δ1+e−θTX1​​−(1−yi​)1−1+e−θTX1​1​δθj​​δ1+e−θTX1​​)
=−1m∑i=1m(yi(1+e−θTX)δ11+e−θTXδθj−(1−yi)1+e−θTXe−θTXδ11+e−θTXδθj)=-\frac{1}{m}\sum_{i=1}^{m}(y_{i}(1+e^{-\theta^TX})\frac{\delta \frac{1}{1+e^{-\theta^TX}}}{\delta_{\theta_{j}}}-(1-{y_i})\frac{1+e^{-\theta^TX}}{e^{-\theta^TX}}\frac{\delta{\frac{1}{1+e^{-\theta^TX}}}}{\delta_{\theta_{j}}})=−m1​i=1∑m​(yi​(1+e−θTX)δθj​​δ1+e−θTX1​​−(1−yi​)e−θTX1+e−θTX​δθj​​δ1+e−θTX1​​)
=−1m∑i=1m(δ11+e−θTXδθi)(yi(1+e−θTX)−(1−yi)(1+e−θTXe−θTX))=-\frac{1}{m}\sum_{i=1}^{m}(\frac{\delta\frac{1}{1+e^{-\theta^TX}}}{\delta_{\theta_{i}}})({y_i}(1+e^{-\theta^TX})-(1-y_i)(\frac{1+e^{-\theta^TX}}{e^{-\theta^TX}}))=−m1​i=1∑m​(δθi​​δ1+e−θTX1​​)(yi​(1+e−θTX)−(1−yi​)(e−θTX1+e−θTX​))
=−1m∑i=1mXe−θTX(1+e−θTX)2(yi(1+e−θTX)−(1−yi)(1+e−θTXe−θTX))=-\frac{1}{m}\sum_{i=1}^{m}\frac{Xe^{-\theta^TX}}{(1+e^{-\theta^TX})^2}({y_i}(1+e^{-\theta^TX})-(1-y_i)(\frac{1+e^{-\theta^TX}}{e^{-\theta^TX}}))=−m1​i=1∑m​(1+e−θTX)2Xe−θTX​(yi​(1+e−θTX)−(1−yi​)(e−θTX1+e−θTX​))
=−1m∑i=1m(yiXe−θTX1+e−θTX−(1−yi)X1+e−θTX)=-\frac{1}{m}\sum_{i=1}^{m}(\frac{{y_i}Xe^{-\theta^TX}}{1+e^{-\theta^TX}}-\frac{(1-{y_i})X}{1+e^{-\theta^TX}})=−m1​i=1∑m​(1+e−θTXyi​Xe−θTX​−1+e−θTX(1−yi​)X​)
=−1m∑i=1myiXe−θTX−X+yiX1+e−θTX=-\frac{1}{m}\sum_{i=1}^{m}\frac{{y_i}Xe^{-\theta^TX}-X+{y_i}X}{1+e^{-\theta^TX}}=−m1​i=1∑m​1+e−θTXyi​Xe−θTX−X+yi​X​
=−1m∑i=1myiX(1+eθTX)−X1+e−θTX=-\frac{1}{m}\sum_{i=1}^{m}\frac{{y_i}X(1+e^{\theta^TX})-X}{1+e^{-\theta^TX}}=−m1​i=1∑m​1+e−θTXyi​X(1+eθTX)−X​
=1m∑i=1m(11+e−θTX−yi)X=\frac{1}{m}\sum_{i=1}^{m}(\frac{1}{1+e^{-\theta^TX}}-{y_i})X=m1​i=1∑m​(1+e−θTX1​−yi​)X
=1m∑i=1m(Sθ(θTX)−yi)X=\frac{1}{m}\sum_{i=1}^{m}(S_\theta(\theta^TX)-{y_i})X=m1​i=1∑m​(Sθ​(θTX)−yi​)X
我们要让导数值为0求极小值点，所以：
1m∑i=1m(Sθ(θTX)−yi)X=0\frac{1}{m}\sum_{i=1}^{m}(S_\theta(\theta^TX)-{y_i})X=0m1​i=1∑m​(Sθ​(θTX)−yi​)X=0
=>11+eθTX=yi=> \frac{1}{1+e^{\theta^TX}}=y_i=>1+eθTX1​=yi​
=>e−θTX=1yi−1=> e^{-\theta^TX}=\frac{1}{y_i}-1=>e−θTX=yi​1​−1
=>−θTX=ln1yi−1=> -\theta^TX=ln^{\frac{1}{y_i}-1}=>−θTX=lnyi​1​−1
=>θT=lnyi1−yiX=> \theta^T=\frac{ln^{\frac{y_i}{1-y_i}}}{X}=>θT=Xln1−yi​yi​​​
到这，Alex大吼一声：“这我会，直接带入X和yi算出𝜃就万事大吉。”
可惜啊，To Young To Sample！
事情并不会那么顺利，我们的计算过程：
1m∑i=1m(Sθ(θTX)−yi)X=0\frac{1}{m}\sum_{i=1}^{m}(S_\theta(\theta^TX)-{y_i})X=0m1​i=1∑m​(Sθ​(θTX)−yi​)X=0
=>11+eθTX=yi=> \frac{1}{1+e^{\theta^TX}}=y_i=>1+eθTX1​=yi​
是假定所有的11+eθTX−yi=0\frac{1}{1+e^{\theta^TX}}-y_i=01+eθTX1​−yi​=0
但是，我们并不能确定计算𝜃的过程中对于每一行数据都有：Sθ(θTX)−yi=0S_\theta(\theta^TX)-{y_i}=0Sθ​(θTX)−yi​=0
有可能单个样本并不为0，但是最后求和的结果为0：∑i=1m(Sθ(θTX)−yi)X=0\sum_{i=1}^{m}(S_\theta(\theta^TX)-{y_i})X=0i=1∑m​(Sθ​(θTX)−yi​)X=0
这里我们要引入一点，当我们得到一个目标函数后，并不能直接通过计算得到结果情况下，该如何进行求解？
我们回想一下最开始学解方程的时候，那时候还不会什么移项、化简之类的东西，老师教给我一种最原始的方法——一个一个试。
当然这个方法很老土啊，但是，计算机的优势是什么？不就是计算么，机器学习的套路就是我交给机器一堆数据，然后告诉它什么样的学习方式是对的，即我们的目标函数，然后让他朝着这个方向去一个一个试。
但是我应该怎么告诉计算机去试呢？总得有一个标准吧。
来看一个简单的图像：

假设我们给参数𝜃随便设置了一个初始值，正好在C点，我们的目标是让𝜃转移到最小值点B。
让𝜃向左右偏移一定的距离，这个偏移的距离很有讲究，如果偏移量小了，可能向右偏移到D点，可惜D点事极小值点，不是最小值点，如果偏移量大了，向左偏移到A点，又越过了最小值B点。
那么，到底该如何计算偏移的方向和偏移量呢？
一个大家广泛接收的优化算法——梯度下降。

关于梯度下降算法的直观理解，我们以一个人下山为例。
比如刚开始的初始位置是在红色的山顶位置，那么现在的问题是该如何达到蓝色的山底呢？
按照梯度下降算法的思想，它将按如下操作达到最低点：
第一步，明确自己现在所处的位置

第二步，找到相对于该位置而言下降最快的方向

第三步， 沿着第二步找到的方向走一小步，到达一个新的位置，此时的位置肯定比原来低

第四部， 回到第一步

第五步，终止于最低点

按照以上5步，最终达到最低点，这就是梯度下降的完整流程。
当然你可能会说，上图不是有不同的路径吗？
是的，因为上图并不是标准的凸函数，往往不能找到最小值，只能找到局部极小值。
所以要用不同的初始位置进行梯度下降，来寻找更小的极小值点，当然如果损失函数是凸函数就没必要了，直接进行梯度下降吧！
比如下面这种：

一元函数的导数高中的时候就学过了，其几何意义是某点切线的斜率，除此之外它还能表示函数在该点的变化率，导数越大，说明函数在该点的变化越大。
这不就是我们要找的下降最快的方向么？
损失函数
我们把目标函数也就是损失函数拿下来：
J(θ)=−1ml(θ)=−1m∑i=1m(yiln(11+e−θTX)+(1−yi)ln(1−11+e−θTX))，其中：Sθ(θTX)=11+e−θTXJ(\theta)=-\frac{1}{m}l(\theta)=-\frac{1}{m}\sum_{i=1}^{m}({y_i}ln^{(\frac{1}{1+e^{-\theta^TX}})}+(1-{y_i})ln^{(1-\frac{1}{1+e^{-\theta^TX}})})，其中：S_\theta(\theta^TX)=\frac{1}{1+e^{-\theta^TX}}J(θ)=−m1​l(θ)=−m1​i=1∑m​(yi​ln(1+e−θTX1​)+(1−yi​)ln(1−1+e−θTX1​))，其中：Sθ​(θTX)=1+e−θTX1​
所以：
J(θ)=−1m∑i=1m(yilnSθ(θTX)+(1−yi)ln(1−Sθ(θTX)))J(\theta)=-\frac{1}{m}\sum_{i=1}^{m}({y_i}ln^{S_\theta(\theta^TX)}+(1-{y_i})ln^{(1-S_\theta(\theta^TX))})J(θ)=−m1​i=1∑m​(yi​lnSθ​(θTX)+(1−yi​)ln(1−Sθ​(θTX)))
def cost(X, Y, theta):
    left = np.multiply(Y, np.log(model(X, theta)))
    right = np.multiply(1 - Y, np.log(1 - model(X, theta)))
    return -(np.sum(left + right) / (len(X)))

我们可以来试一下，让theta的值全为0，看看咱们瞎猜的效果是啥。
Y = train[["isFraud"]].values
train.drop("isFraud", axis=1, inplace=True)
theta = np.zeros([1, len(train.columns)])
X = train.values

print("Theta shape =", theta.shape)
print("X shape =", X.shape)
print("Y shape =", Y.shape)

Theta shape = (1, 219)
X shape = (590540, 219)
Y shape = (590540, 1)

print("Test cost = %.10f" % cost(X, Y, theta))

Test cost = 0.6931471806

梯度计算
然后把导数计算公式也拿下来用来计算梯度：
δJ(θ)δθj=1m∑i=1m(Sθ(θTX)−yi)X\frac{\delta J(\theta)}{\delta_{\theta_{j}}}=\frac{1}{m}\sum_{i=1}^{m}(S_\theta(\theta^TX)-{y_i})Xδθj​​δJ(θ)​=m1​i=1∑m​(Sθ​(θTX)−yi​)X
我们说，一元函数计算梯度x有一个下降方向，二元函数计算梯度x、y有两个下降方向，以此类推，n元函数计算梯度有n个下降方向。
def gradint(X, Y, theta):
    grad = np.zeros(theta.shape)
    error = (model(X, theta) - Y).ravel()
    for i in range(len(theta.ravel())):
        term = np.multiply(error, X[:, i])
        grad[0, i] = np.sum(term) / len(X)
    return grad

停止策略
我们是想让计算机自己不断的尝试最终找到正确答案，但是什么时候能找到正确答案，我们不知道，总不能找不到答案就一直运行吧，那显然不现实。
所以，我们要指定一种停止策略，让计算机尝试到一定的标准之后就不需要尝试了，直接返回当前结果就OK。
第一种策略是设定迭代次数，比如我尝试个10000次就不再尝试了。
第二种策略是设定期望损失值，比如当损失值小于1E-6时就不再尝试了。
第三种策略是设定期望梯度值，比如当梯度小于0.05的时候就不再尝试了。
再来像一个问题，我们在做梯度下降的时候，是要根据原始的数据计算，如果每次我都拿所有的原始数据计算的话，这将会耗费大量的时间和资源，所以，我们每次只拿一部分数据来做梯度下降。
# 定义三种停止策略
ITEM_STOP = 0
COST_STOP = 1
GRAD_STOP = 2


def stop_criterion(label, value, threshold):
    if label == ITEM_STOP:
        return value > threshold
    if label == COST_STOP:
        return abs(value[-1] - value[-2]) < threshold
    if label == GRAD_STOP:
        return np.linalg.norm(value) < threshold

接下来就可以定义我们真正干活的函数了：
def descent(X_data, Y_data, theta, batch_size, stop_type, thresh, alpha):
    """
    data:训练的数据集
    theta:参数
    batch_size:每次计算梯度的大小
    stop_type:停止类型
    thresh:停止阈值
    alpha:更新参数的偏移量
    """
    start_time = time.time()
    item = 0    # 迭代次数
    size = 0    # batch
    grad = np.zeros(theta.shape)    # 初始化一个梯度值
    costs = [cost(X_data, Y_data, theta)]    # 计算初始的损失值

    while True:
        item += 1
        grad = gradint(X_data[size:size + batch_size], Y_data[size:size + batch_size], theta)
        size += batch_size
        if size > len(X_data):
            size = 0
            np.random.shuffle(X_data)
            np.random.shuffle(Y_data)
        costs.append(cost(X_data, Y_data, theta))
        theta = theta - alpha * grad

        if stop_type == ITEM_STOP:
            value = item
        if stop_type == COST_STOP:
            value = costs
        if stop_type == GRAD_STOP:
            value = grad
        if stop_criterion(stop_type, value, thresh):
            break

    return theta, item, costs, grad, time.time() - start_time

def run(X_data, Y_data, theta, batch_size, stop_type, thresh, alpha):
    theta, item, costs, grad, duration = descent(X_data, Y_data, theta, batch_size, stop_type, thresh, alpha)
    plt.plot(np.arange(len(costs)), costs, "r")
    print("Durtion: ", duration)
    print("Last cost: ", costs[-1])
    plt.xlabel("Iterations")
    plt.ylabel("Cost")
    return theta

测试ITEM停止策略
X_normal = X / X.max(axis = 0)	# 归一化操作，思考为什么？

theta1 = run(X_normal, Y, theta, 1024, ITEM_STOP, thresh=7000, alpha=0.001)

Durtion:  1671.285551071167
Last cost:  0.15213150769192524


经过漫长的1671秒，Bachelor写的代码终于跑完了，长舒一口气，终于讲完了，逻辑回归差不多就这样，Alex你回去可以试着把其它几种停止策略也测试一下，然后我给你一个测试网址IEEE-CIS Fraud Detection，这里可以对你的算法做评测。
Alex刚学到那么多东西，迫不及待的回家想试一试…

Alex回到家，先把Bachelor的算法复现了一遍，拿他的theta预测了一遍，然后去IEEE-CIS Fraud Detection一顿操作…
import numpy as np
import pandas as pd

test_identity = pd.read_csv("test_identity.csv")
test_transaction = pd.read_csv("test_transaction.csv")

test = pd.merge(test_transaction, test_identity, on="TransactionID", how="left")

test_id = test[["TransactionID"]]
test.drop("TransactionID", axis=1, inplace=True)
test.drop(na_data[na_data['ratio'] > 0.5].index, axis=1, inplace=True)

for col in test.columns:
    if test[col].dtypes == "object":
        test[col], uniques = pd.factorize(test[col])
    test[col].fillna(test[col].mean(), inplace=True)

test.insert(0, "Ones", 1)

X = test.values
X_normal = X / X.max(axis = 0)
y = [1 if x >= 0.5 else 0 for x in model(X_normal, theta1)]

submission = pd.concat([test_id, pd.Series(y)], axis=1, keys=["TransactionID", "isFraud"])
submission.to_csv("submission1.csv", index=False)

将结果提交到kaggle平台上之后，ε=(´ο｀*)))唉，虽然白嫖很香，但是结果还不咋滴啊。

Alex于是开始了漫长的调参之路…
不过，咱们的逻辑回归，就讲到这里。



13.2.8 组件





                                            一、forms组件
校验字段功能
针对一个实例：注册用户讲解。
模型：models.py
class UserInfo(models.Model):
    name=models.CharField(max_length=32)
    pwd=models.CharField(max_length=32)
    email=models.EmailField()
    tel=models.CharField(max_length=32)

模板: register.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>

</head>
<body>

<form action="" method="post">
    {% csrf_token %}
    <div>
        <label for="user">用户名</label>
        <p><input type="text" name="name" id="name"></p>
    </div>
    <div>
        <label for="pwd">密码</label>
        <p><input type="password" name="pwd" id="pwd"></p>
    </div>
    <div>
        <label for="r_pwd">确认密码</label>
        <p><input type="password" name="r_pwd" id="r_pwd"></p>
    </div>
     <div>
        <label for="email">邮箱</label>
        <p><input type="text" name="email" id="email"></p>
    </div>
    <input type="submit">
</form>

</body>
</html>

视图函数：register
# forms组件
from django.forms import widgets

wid_01=widgets.TextInput(attrs={"class":"form-control"})
wid_02=widgets.PasswordInput(attrs={"class":"form-control"})

class UserForm(forms.Form):
    name=forms.CharField(max_length=32,
                         widget=wid_01
                         )
    pwd=forms.CharField(max_length=32,widget=wid_02)
    r_pwd=forms.CharField(max_length=32,widget=wid_02)
    email=forms.EmailField(widget=wid_01)
    tel=forms.CharField(max_length=32,widget=wid_01)

def register(request):

    if request.method=="POST":
        form=UserForm(request.POST)
        if form.is_valid():
            print(form.cleaned_data)       # 所有干净的字段以及对应的值
        else:
            print(form.cleaned_data)       #
            print(form.errors)             # ErrorDict : {"校验错误的字段":["错误信息",]}
            print(form.errors.get("name")) # ErrorList ["错误信息",]
        return HttpResponse("OK")
    form=UserForm()
    return render(request,"register.html",locals())

二、渲染标签功能
1
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
   <!-- 最新版本的 Bootstrap 核心 CSS 文件 -->
    <link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
</head>
<body>
<h3>注册页面</h3>
<div class="container">
    <div class="row">
        <div class="col-md-6 col-lg-offset-3">

                <form action="" method="post">
                    {% csrf_token %}
                    <div>
                        <label for="">用户名</label>
                        {{ form.name }}
                    </div>
                    <div>
                        <label for="">密码</label>
                        {{ form.pwd }}
                    </div>
                    <div>
                        <label for="">确认密码</label>
                        {{ form.r_pwd }}
                    </div>
                    <div>
                        <label for=""> 邮箱</label>
                        {{ form.email }}
                    </div>

                    <input type="submit" class="btn btn-default pull-right">
                </form>
        </div>
    </div>
</div>
</body>
</html>

2
<form action="" method="post">
     {% csrf_token %}

     {% for field in form %}
         <div>
             <label for="">{{ field.label }}</label>
             {{ field }}
         </div>
     {% endfor %}
     <input type="submit" class="btn btn-default pull-right">
</form>

3
<form action="" method="post">
    {% csrf_token %}

    {{ form.as_p }}
    <input type="submit" class="btn btn-default pull-right">

</form>

三、显示错误与重置输入信息功能
视图
def register(request):

    if request.method=="POST":
        form=UserForm(request.POST)
        if form.is_valid():
            print(form.cleaned_data)       # 所有干净的字段以及对应的值
        else:
            print(form.cleaned_data)       #
            print(form.errors)             # ErrorDict : {"校验错误的字段":["错误信息",]}
            print(form.errors.get("name")) # ErrorList ["错误信息",]
        return render(request,"register.html",locals())
    form=UserForm()
    return render(request,"register.html",locals())

模板
<form action="" method="post" novalidate>
    {% csrf_token %}

    {% for field in form %}
        <div>
            <label for="">{{ field.label }}</label>
            {{ field }} <span class="pull-right" style="color: red">{{ field.errors.0 }}</span>
        </div>
    {% endfor %}
    <input type="submit" class="btn btn-default">

</form>

四、局部钩子与全局钩子
模板
# forms组件
from django.forms import widgets

wid_01=widgets.TextInput(attrs={"class":"form-control"})
wid_02=widgets.PasswordInput(attrs={"class":"form-control"})

from django.core.exceptions import ValidationError

class UserForm(forms.Form):
    name=forms.CharField(max_length=32,
                         widget=wid_01
                         )
    pwd=forms.CharField(max_length=32,widget=wid_02)
    r_pwd=forms.CharField(max_length=32,widget=wid_02)
    email=forms.EmailField(widget=wid_01)
    tel=forms.CharField(max_length=32,widget=wid_01)

    # 局部钩子
    def clean_name(self):
        val=self.cleaned_data.get("name")
        if not val.isdigit():
            return val
        else:
            raise ValidationError("用户名不能是纯数字!")

    # 全局钩子

    def clean(self):
        pwd=self.cleaned_data.get("pwd")
        r_pwd=self.cleaned_data.get("r_pwd")

        if pwd==r_pwd:
            return self.cleaned_data
        else:
            raise ValidationError('两次密码不一致!')

def register(request):

    if request.method=="POST":
        form=UserForm(request.POST)
        if form.is_valid():
            print(form.cleaned_data)       # 所有干净的字段以及对应的值
        else:
            clean_error=form.errors.get("__all__")

        return render(request,"register.html",locals())
    form=UserForm()
    return render(request,"register.html",locals())

视图
<form action="" method="post" novalidate>
      {% csrf_token %}
      {% for field in form %}
          <div>
              <label for="">{{ field.label }}</label>
              {{ field }}
              <span class="pull-right" style="color: red">
                    {% if field.label == 'R pwd' %}
                    <span>{{ clean_error.0 }}</span>
                    {% endif %}
                    {{ field.errors.0 }}
              </span>
          </div>
      {% endfor %}
      <input type="submit" class="btn btn-default">
</form>




13.2.9 中间件





                                            一、中间件的概念
中间件顾名思义，是介于request与response处理之间的一道处理过程，相对比较轻量级，并且在全局上改变django的输入与输出。
因为改变的是全局，所以需要谨慎实用，用不好会影响到性能。
如果你想修改请求，例如被传送到view中的HttpRequest对象。
或者你想修改view返回的HttpResponse对象，这些都可以通过中间件来实现。
可能你还想在view执行之前做一些操作，这种情况就可以用 middleware来实现。
Django默认的Middleware：
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

每一个中间件都有具体的功能。
二、自定义中间件
中间件中一共有四个方法：
process_request
process_view
process_exception
process_response

process_request，process_response
当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求时process_request,最后到达views的函数中，views函数处理后，在依次穿过中间件，这个时候是process_response,最后返回给请求者。

自己定义一个中间件，我们可以自己写一个类，但是必须继承MiddlewareMixin
from django.utils.deprecation import MiddlewareMixin


in views:
def index(request):

    print("view函数...")
    return HttpResponse("OK")

in Mymiddlewares.py：
from django.utils.deprecation import MiddlewareMixin
from django.shortcuts import HttpResponse

class Md1(MiddlewareMixin):

    def process_request(self,request):
        print("Md1请求")

    def process_response(self,request,response):
        print("Md1返回")
        return response

class Md2(MiddlewareMixin):

    def process_request(self,request):
        print("Md2请求")
        #return HttpResponse("Md2中断")
    def process_response(self,request,response):
        print("Md2返回")
        return response

结果：
Md1请求
Md2请求
view函数...
Md2返回
Md1返回

注意：如果当请求到达请求2的时候直接不符合条件返回，即return HttpResponse(“Md2中断”)，程序将把请求直接发给中间件2返回，然后依次返回到请求者，结果如下：
返回Md2中断的页面，后台打印如下：
Md1请求
Md2请求
Md2返回
Md1返回


流程图如下：

process_view
process_view(self, request, callback, callback_args, callback_kwargs)

Mymiddlewares.py修改如下
from django.utils.deprecation import MiddlewareMixin
from django.shortcuts import HttpResponse
class Md1(MiddlewareMixin):
    def process_request(self,request):
        print("Md1请求")
        #return HttpResponse("Md1中断")
    def process_response(self,request,response):
        print("Md1返回")
        return response
    def process_view(self, request, callback, callback_args, callback_kwargs):
        print("Md1view")
class Md2(MiddlewareMixin):
    def process_request(self,request):
        print("Md2请求")
        return HttpResponse("Md2中断")
    def process_response(self,request,response):
        print("Md2返回")
        return response
    def process_view(self, request, callback, callback_args, callback_kwargs):
        print("Md2view")

结果如下：
Md1请求
Md2请求
Md1view
Md2view
view函数...
Md2返回
Md1返回

下图进行分析上面的过程：

当最后一个中间的process_request到达路由关系映射之后，返回到中间件1的process_view，然后依次往下，到达views函数，最后通过process_response依次返回到达用户。
process_view可以用来调用视图函数：
class Md1(MiddlewareMixin):
    def process_request(self,request):
        print("Md1请求")
        #return HttpResponse("Md1中断")
    def process_response(self,request,response):
        print("Md1返回")
        return response
    def process_view(self, request, callback, callback_args, callback_kwargs):
        # return HttpResponse("hello")
        response=callback(request,*callback_args,**callback_kwargs)
        return response

结果如下：
Md1请求
Md2请求
view函数...
Md2返回
Md1返回

注意：process_view如果有返回值，会越过其他的process_view以及视图函数，但是所有的process_response都还会执行。
process_exception
process_exception(self, request, exception)

示例修改如下：
class Md1(MiddlewareMixin):

    def process_request(self,request):
        print("Md1请求")
        #return HttpResponse("Md1中断")
    def process_response(self,request,response):
        print("Md1返回")
        return response
    def process_view(self, request, callback, callback_args, callback_kwargs):
        # return HttpResponse("hello")
        # response=callback(request,*callback_args,**callback_kwargs)
        # return response
        print("md1 process_view...")
    def process_exception(self):
        print("md1 process_exception...")
class Md2(MiddlewareMixin):
    def process_request(self,request):
        print("Md2请求")
        # return HttpResponse("Md2中断")
    def process_response(self,request,response):
        print("Md2返回")
        return response
    def process_view(self, request, callback, callback_args, callback_kwargs):
        print("md2 process_view...")
    def process_exception(self):
        print("md1 process_exception...")

结果如下：
Md1请求
Md2请求
md1 process_view...
md2 process_view...
view函数...

Md2返回
Md1返回

流程图如下：
当views出现错误时：

将md2的process_exception修改如下：
def process_exception(self,request,exception):

      print("md2 process_exception...")
      return HttpResponse("error")

结果如下：
Md1请求
Md2请求
md1 process_view...
md2 process_view...
view函数...
md2 process_exception...
Md2返回
Md1返回

三、应用案例
1、做IP访问频率限制
某些IP访问服务器的频率过高，进行拦截，比如限制每分钟不能超过20次。
2、URL访问过滤
如果用户访问的是login视图（放过）
如果访问其他视图，需要检测是不是有session认证，已经有了放行，没有返回login，这样就省得在多个视图函数上写装饰器了！
作为延伸扩展内容，有余力的同学可以尝试着读一下以下两个自带的中间件：
'django.contrib.sessions.middleware.SessionMiddleware',
'django.contrib.auth.middleware.AuthenticationMiddleware',




网络机器人之爬虫





                                            Spider 爬虫
引子

看看美女养养眼

养眼吧，是不是经常苦于寻找不到这些资源？是不是经常因为网址的变更又找不到某些资源？
要想解决这个问题，简单嘛，就是把资源都保存到电脑上，但要是一口气保存两百多张，估计手都都抽筋。
这时候，就需要用到我们的爬虫了。
爬虫，即网络机器人，如果把互联网理解为一张巨大的蜘蛛网，那么爬虫就是在这张网上捕猎的蜘蛛，它会根据你给定的目标将资源保存下来，也就是持久化存储。
这个过程其实就类似于我们浏览器上网，只不过将这个繁琐的过程通过编写程序模拟的形式，让爬虫去互联网上抓取数据。
爬虫的价值

拉勾网爬虫工程师职位

爬虫工程师的平均薪资为 ￥ 15510，刺激不，从就业的角度来说，爬虫工程师目前来说属于紧缺人才，深层次地掌握这门技术对于就业来说是非常有利的。
随着大数据时代的来临，爬虫技术的应用将越来广泛，抓取互联网上的数据为我所用，有了大量的数据，就如同有了一个数据银行一样，下一步就是如何将这些爬取的数据产品化、商业化。
总而言之，爬虫技术的应用将越来越广泛，在未来会拥有更好的发展空间。
爬虫合法性探究
先来看一篇文章：“一个程序员写了个爬虫程序，整个公司200多人被端了。”
爬虫作为一种计算机技术就决定了它的中立性，因此爬虫本身在法律上并不被禁止，但是利用爬虫技术获取数据这一行为是具有违法甚至是犯罪的风险的。
技术是一把双刃剑，既能造福全社会，也能让人锒铛入狱，因此，学习爬虫，一定要注意下列情况，有可能违法，严重的甚至构成犯罪：


爬虫程序规避网站经营者设置的反爬虫措施或者破解服务器防抓取措施，非法获取相关信息，情节严重的，有可能构成“非法获取计算机信息系统数据罪”。


爬虫程序干扰被访问的网站或系统正常运营，后果严重的，触犯刑法，构成“破坏计算机信息系统罪”


爬虫采集的信息属于公民个人信息的，有可能构成非法获取公民个人信息的违法行为，情节严重的，有可能构成“侵犯公民个人信息罪”。


举个例子：像谷歌这样的搜索引擎爬虫，每隔几天对全网的网页扫一遍，供大家查阅，各个被扫的网站大都很开心。这种就被定义为“善意爬虫”。
但是像抢票软件这样的爬虫，对着 12306 每秒钟恨不得撸几万次，铁总并不觉得很开心，这种就被定义为“恶意爬虫”。
可以说在我们身边的网络上已经密密麻麻爬满了各种网络爬虫，它们善恶不同，各怀心思。而越是每个人切身利益所在的地方，就越是爬满了爬虫。
所以爬虫是趋利的，它们永远会向有利益的地方爬行。
技术本身是无罪的，问题往往出在人无限的欲望上。
因此爬虫开发者的道德自持和企业经营者的良知才是避免触碰法律底线的根本所在。
爬虫的分类
通用爬虫：通用爬虫是搜索引擎爬虫的重要组成部分，主要是将互联网上的网页下载到本地，再对这些网页做相关处理（提取关键字、去掉广告），最后提供一个用户检索接口。
聚焦爬虫：聚焦爬虫是根据指定的需求抓取网络上指定的数据。
增量式爬虫：增量式爬虫是用来检测网站数据更新的情况，且可以将网站更新的数据进行爬取。



Stark 组件：快速开发神器 —— 页面显示






说道 Stark 你是不是不会想到他——Tony Stark，超级英雄钢铁侠，这也是我的偶像。
不过我们今天要开发的 Stark 组件，倒是跟他的人工智能助手 JARVIS 有些类似，是帮助我们快速开发数据库增、删、改、查操作、应用各种功能的开发助手。
Stark 组件：快速开发神器 —— 页面显示一、数据RoleDepartmentTeamRbacUserInfo二、查ManyToManyField 处理DateTimeField 处理三、增IntegerField 处理四、改五、删
一、数据
在敲代码之前，通过 admin 来创建一些基本数据好供我们显示。
Role

Department

Team

RbacUserInfo

二、查
查看信息是第一位，因此我们先来做显示页面，这里要想一个问题，显示信息，并不能吧数据库表的所有字段都显示，那岂不是密码都放到页面上来了，因此，我们需要定制显示的字段，在不同的类中定义 displayList 属性表示显示字段。
在 StarkHandler 类中编写查看视图：
# Stark/main.py
	def checkView(self, request, *args, **kwargs):
		"""查看功能视图函数"""
		# --------------------- 1.显示表格 ---------------------
		displayList = self.getDisplayList(request, *args, **kwargs)
		# 1.1、处理表格表头
		headerList = []
		if displayList:
			for item in displayList:
				verboseName = self.model._meta.get_field(item).verbose_name
				headerList.append(verboseName)
		else:
			headerList.append(self.model._meta.model_name)
		# 1.2、处理表格内容
		bodyList = []
		dataList = self.model.objects.all()
		for row in dataList:
			rowList = []
			if displayList:
				for item in displayList:
					rowList.append(getattr(row, item))
			else:
				rowList.append(row)
			bodyList.append(rowList)

		return render(request, "stark/checkView.html", {
			"headerList": headerList,
			"bodyList": bodyList,
			"dataList": dataList
		})

getDisplayList 方法就是用于获取要显示的字段：
# Stark/main.py
	def getDisplayList(self, request, *args, **kwargs):
		"""获取页面显示的表格，预留自定义扩展定制显示内容"""
		value = []
		if self.displayList:
			value.extend(self.displayList)
		return value

在 RbacUserHandler 类中定义要显示的字段：
# RBAC/views/rbacUserinfo.py
from Stark.main import StarkHandler


class RbacUserHandler(StarkHandler):
	def __init__(self, site, modelClass, prefix):
		super().__init__(site, modelClass, prefix)
		self.displayList = ["username", "email", "score", "grade", "roles", "team", "department", "dateJoined"]

继承 formwork.html 编写 check 页面：
{% extends 'formwork.html' %}
{% block content %}
    <div class="container" style="width: 100%; background-color: rgba(245, 245, 245, 0.7)">
        <form method="post">
            {% csrf_token %}
            <table class="table table-hover table-bordered table-striped">
                <thead>
                <tr class="info">
                    {% for header in headerList %}
                        <th>{{ header }}</th>
                    {% endfor %}
                </tr>
                </thead>
                <tbody>
                {% for row in bodyList %}
                    <tr class="default">
                        {% for element in row %}
                            <td>{{ element }}</td>
                        {% endfor %}
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </form>
    </div>
{% endblock %}

此时访问：http://127.0.0.1:7777/stark/RBAC/rbacuserinfo/check/

ManyToManyField 处理
基本的信息已经可以浏览了，但是职位这一栏有点问题，显示的貌似是一个对象，后边还跟了个 None，看一下数据库表结构可以发现，只有 roles 是 ManyToManyField，估计是多对多把 Stark 给整懵了，我们来给它定义一个处理多对多关系的方法，因为这是一个通用的方法，可以直接写到 Stark/main.py 中。
我们先给 roles 字段套上这么一个函数：
# RBAC/views/rbacUserinfo.py
from Stark.main import StarkHandler, getM2MText


class RbacUserHandler(StarkHandler):
	def __init__(self, site, modelClass, prefix):
		super().__init__(site, modelClass, prefix)
		self.displayList = ["username", "email", "score", "grade", getM2MText("职务", "roles"), "team", "department",
		                    "dateJoined"]


显示表格的时候是要通过 checkView 统一处理的，因此要对 checkView 做一些更改：
# Stark/main.py
	def checkView(self, request, *args, **kwargs):
		"""查看功能视图函数"""
		# --------------------- 1.显示表格 ---------------------
		displayList = self.getDisplayList(request, *args, **kwargs)
		# 1.1、处理表格表头
		headerList = []
		if displayList:
			for item in displayList:
				verboseName = item(self, obj=None, isHeader=True) if isinstance(item, FunctionType) \
					else self.model._meta.get_field(item).verbose_name
				headerList.append(verboseName)
		else:
			headerList.append(self.model._meta.model_name)
		# 1.2、处理表格内容
		bodyList = []
		dataList = self.model.objects.all()
		for row in dataList:
			rowList = []
			if displayList:
				for item in displayList:
					rowList.append(item(self, obj=row, isHeader=False, *args, **kwargs) if isinstance(item, FunctionType)
					               else getattr(row, item))
			else:
				rowList.append(row)
			bodyList.append(rowList)

最后编写一个 getM2MText 函数：
# Stark/main.py
def getM2MText(header, field):
	"""定义显示 ManyToManyField 字段的函数"""
	def inner(self, obj=None, isHeader=None, *args, **kwargs):
		return header if isHeader else ",".join([str(item) for item in getattr(obj, field).all()])
	return inner

这样职务就能正常显示了：

DateTimeField 处理
但是我现在有觉得那个加入时间显示的比较别扭，想让它按照我指定的格式显示。
处理方法跟 ManyToManyField 类似，也是定义一个函数：
# Stark/main.py
def getDatetime(header, field, timeFormat="%Y-%m-%d"):
	"""显示 DateTimeField 字段的函数"""
	def inner(self, obj=None, isHeader=None, *args, **kwargs):
		return header if isHeader else getattr(obj, field).strftime(timeFormat)
	return inner

然后将 displayList 中的"dateJoined" 改为 getDatetime("加入时间", "dateJoined")。

不仅如此，相应的 Team 表和 Department 表也可以显示了：
from Stark.main import StarkHandler


class TeamHandler(StarkHandler):
	def __init__(self, site, modelClass, prefix):
		super().__init__(site, modelClass, prefix)
		self.displayList = ["name", "introduce"]



from Stark.main import StarkHandler


class DepartmentHandler(StarkHandler):
	def __init__(self, site, modelClass, prefix):
		super().__init__(site, modelClass, prefix)
		self.displayList = ["name", "duty"]



通过定义不同数据库表的处理类的 displayList 属性，就可以快速的在页面上显示列表信息。
三、增
增加功能对于项目来说不可或缺，所以我们需要在基类中定制一个通用的添加按钮。
首先要在 checkView 中获取添加按钮，如果能获取到说明此页面允许添加按钮，如果不能获取到说明不需要添加功能，默认都是可以获取到。
# Stark/main.py
	def checkView(self, request, *args, **kwargs):
		"""查看功能视图函数"""
		# --------------------- 1.显示表格 ---------------------
		displayList = self.getDisplayList(request, *args, **kwargs)
		# 1.1、处理表格表头
		headerList = []
		if displayList:
			for item in displayList:
				verboseName = item(self, obj=None, isHeader=True) if isinstance(item, FunctionType) \
					else self.model._meta.get_field(item).verbose_name
				headerList.append(verboseName)
		else:
			headerList.append(self.model._meta.model_name)
		# 1.2、处理表格内容
		bodyList = []
		dataList = self.model.objects.all()
		for row in dataList:
			rowList = []
			if displayList:
				for item in displayList:
					rowList.append(item(self, obj=row, isHeader=False, *args, **kwargs) if isinstance(item, FunctionType)
					               else getattr(row, item))
			else:
				rowList.append(row)
			bodyList.append(rowList)

		# --------------------- 2.添加按钮 ---------------------
		addButton = self.getAddButton(request, *args, **kwargs)

		return render(request, "stark/checkView.html", {
			"headerList": headerList,
			"bodyList": bodyList,
			"dataList": dataList,
			"addButton": addButton,
		})

getAddButton 就是用于获取添加按钮的方法，如果 self.hasAddButton  为 True 则返回添加按钮的 HTML 代码，默认就是设置为 True：
# Stark/main.py
	def getAddButton(self, request, *args, **kwargs):
		"""如果 self.hasAddButton 为 True，在页面显示一个添加按钮"""
		return "<a class='btn btn-success' target='_blank' href='%s'>添加</a>" % self.reverseAddUrl(*args, **kwargs) \
			if self.hasAddButton else None

self.reverseAddUrl 是生成添加页面的 URL，如果在 checkView 页面带有一些初始搜索条件应该被保留：
# Stark/main.py
	def reverseUrl(self, urlName, *args, **kwargs):
		"""生成带有原搜索条件的 URL"""
		name = "%s:%s" % (self.site.namespace, urlName)
		baseUrl = reverse(name, args=args, kwargs=kwargs)
		if self.request.GET:
			newQueryDict = QueryDict(mutable=True)  # mutable 可变类型
			newQueryDict["_filter"] = self.request.GET.urlencode()
			url = "%s?%s" % (baseUrl, newQueryDict.urlencode())
		else:
			url = baseUrl
		return url

	def reverseAddUrl(self, *args, **kwargs):
		"""生成带有原搜索条件的添加 URL"""
		return self.reverseUrl(self.addUrlName, *args, **kwargs)

现在我们已经在页面生成了一个添加按钮，并且给了它一个跳转链接，接下来就得编写相应的视图函数来处理它：
# Stark/main.py
	def addView(self, request, *args, **kwargs):
		"""添加功能视图函数"""
		form = None
		addModelForm = self.getModelForm(isAdd=True, request=request, pk=None, *args, **kwargs)
		if request.method == "GET":
			form = addModelForm()
		elif request.method == "POST":
			form = addModelForm(data=request.POST)
			if form.is_valid():
				return self.save(request=request, form=form, isUpdate=False, *args, **kwargs) \
				       or redirect(self.reverseListUrl(*args, **kwargs))
		return render(request, self.addTemplate or "stark/addOrChange.html", {"form": form})

getModelForm 方法是为了获取数据库表相应页面的 model form，方便地将数据库表的字段显示在页面上：
	def getModelForm(self, isAdd, request, pk, *args, **kwargs):
		"""添加和修改页面的 model form 定制"""
		class DynamicModelForm(StarkModelForm):
			class Meta:
				model = self.model
				fields = "__all__"
		# 如果有自定义的 self.modelForm 则用自定义的，否则返回通用的
		return self.modelForm if self.modelForm else DynamicModelForm

在这里我们也预留一个扩展功能，如果添加页面要显示的字段需要定制，可以通过自定义 self.modelForm 来实现。
而 StarkModelForm 是为了给所有的显示字典添加一个默认样式，看起来更加美观：
class StarkModelForm(forms.ModelForm):
	"""统一给 ModelForm 生成字段添加样式"""
	def __init__(self, *args, **kwargs):
		super(StarkModelForm, self).__init__(*args, **kwargs)
		for name, field in self.fields.items():
			field.widget.attrs['class'] = 'form-control'

self.save 是为了保存添加的数据到数据库中的方法，如果有的页面想在保存到数据库中做一些操作，我们可以吧 save 方法预留出来：
	def save(self, request, form, isUpdate, *args, **kwargs):
		"""在使用 ModelForm 保存数据之前预留扩展方法"""
		form.save()

现在对于添加功能老说是万事俱备只欠东风了，也就是还没有编写添加页面，在写添加页面的代码之前，考虑一个问题，添加页面和修改页面的显示效果其实差不多，只不过是添加页面没有默认显示字段而修改页面要显示默认信息，因此我们可以编写一套通用的模板：
{% extends 'formwork.html' %}

{% block content %}
    <div class="container">
        <form class="form-horizontal" method="post" novalidate>
            {% csrf_token %}
            {% for field in form %}
                <div class="form-group">
                    <label class="col-sm-2 control-label">{{ field.label }}</label>
                    <div class="col-sm-7">
                        {{ field }}
                        <span style="color: red;">{{ field.errors.0 }}</span>
                    </div>
                </div>
            {% endfor %}
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-8">
                    <input type="submit" value="保 存" class="btn btn-primary">
                </div>
            </div>
        </form>
    </div>
{% endblock %}

这样，我们的添加功能就完成了：



IntegerField 处理
这一跳回来又发现了一个问题，等级那里显示的有问题，按道理来说应该显示的 M1，而不是 1，这个是 IntegerField 字段的选项问题，对于选项我们也得编写一个通用的方法处理。
def getChoice(header, field):
	"""显示选项字段的中文信息"""
	def inner(self, obj=None, isHeader=None, *args, **kwargs):
		return header if isHeader else getattr(obj, "get_%s_display" % field)()
	return inner

这样选项字段就能够正常显示了：

四、改
如果要修改的话，必须拿到相应的 ID，才能针对具体的某一条记录做修改，因此我们可以在表格的最后一列加上一个修改按钮，一行一个对应其 ID。
首先是仿照 getAddButton 编写一个 getChangeButton：
	def getChangeButton(self, obj=None, isHeader=None, *args, **kwargs):
		"""编辑按钮"""
		return "操作" if isHeader else mark_safe(
			"<a class='btn btn-warning' target='_blank' href='%s'>编辑</a>" % self.reverseChangeUrl(pk=obj.pk))


然后我们把 getDisplayList 扩展一下：
	def getDisplayList(self, request, *args, **kwargs):
		"""获取页面显示的表格，预留自定义扩展定制显示内容"""
		value = []
		if self.displayList:
			value.extend(self.displayList)
		value.append(type(self).getChangeButton)
		return value

这样就能在页面上显示一个编辑按钮了：

接下来要编写 changeView 视图函数：
	def changeView(self, request, pk, *args, **kwargs):
		"""修改功能视图函数"""
		form = None
		currentChangeObject = self.model.objects.filter(pk=pk).first()
		if not currentChangeObject:
			return render(request, "404.html")
		modelForm = self.getModelForm(isAdd=False, request=request, pk=pk, *args, **kwargs)
		if request.method == "GET":
			form = modelForm(instance=currentChangeObject)
		elif request.method == "POST":
			form = modelForm(data=request.POST, instance=currentChangeObject)
			if form.is_valid():
				return self.save(request=request, form=form, isUpdate=True, *args, **kwargs) \
				       or redirect(self.reverseListUrl(*args, **kwargs))
		return render(request, self.changeTemplate or "stark/addOrChange.html", {"form": form})

如果当前请求修改的记录不存在，返回一个404页面，因此我们还得搞一个404：
{% load static %}
<!DOCTYPE html>
<html class="fixed" lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="keywords" content="HTML5 Admin Template"/>
    <meta name="description" content="Porto Admin - Responsive HTML5 Template">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <link rel="stylesheet" href="/static/vendor/bootstrap-3.3.7-dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/static/vendor/font-awesome-4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="{% static 'RBAC/css/theme.css' %}">
    <link rel="stylesheet" href="{% static 'RBAC/css/default.css' %}">
    <title>404 Not Found</title>
</head>
<body>
<section class="body-error error-outside">
    <div class="center-error">
        <div class="error-header">
            <div class="row">
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-8">
                            <a href="/" class="logo">
                                <img src="/static/images/MatrixLogo.png" style="height: 54px;" alt="Porto Admin"/>
                            </a>
                        </div>
                        <div class="col-md-4">
                            <form class="form">
                                <div class="input-group input-search">
                                    <label for="q"></label>
                                    <input type="text" class="form-control" name="q" id="q" placeholder="Search...">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" type="submit">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <div class="main-error mb-xlg">
                    <h2 class="error-code text-dark text-center text-semibold m-none">404 <i class="fa fa-file"></i>
                    </h2>
                    <p class="error-explanation text-center">
                        We're sorry, but the page you were looking for doesn't exist.
                    </p>
                </div>
            </div>
            <div class="col-md-4">
                <h4 class="text">Here are some useful links</h4>
                <ul class="nav nav-list primary">
                    <li>
                        <a href="{% url 'index' %}"><i class="fa fa-caret-right text-dark"></i> Dashboard </a>
                    </li>
                    <li>
                        <a href="#"><i class="fa fa-caret-right text-dark"></i> User Profile </a>
                    </li>
                    <li>
                        <a href="#"><i class="fa fa-caret-right text-dark"></i> FAQ's </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>
</body>
</html>

效果如下：

当然这个页面仅供参考，鼓励自己实现。
如果存在的话，通过 getModelForm 获取一个 modelForm，instance放当前请求的对象，这样就能将其原始信息显示出来了。
如果是 POST 请求的话，则是前端发送过来的修改完的数据，验证合法后存储，然后返回列表页面。

这样，我们的修改功能就完成了：

五、删
删除流程就跟修改差不多了，但这里我们就要考虑一个问题了，有些页面可能只需要修改按钮，而有些页面又只需要删除按钮，还有的页面两个按钮都需要，我们除了编写一个单独的删除按钮之外，还要编写一个同时具有修改和删除按钮的方法：
	def getDeleteButton(self, obj=None, isHeader=None, *args, **kwargs):
		"""删除按钮"""
		return "操作" if isHeader else mark_safe(
			"<a class='btn btn-daner' target='_blank' href='%s'>删除</a>" % self.reverseDeleteUrl(pk=obj.pk))

	def getChangeAndDeleteButton(self, obj=None, isHeader=None, *args, **kwargs):
		"""编辑和删除按钮"""
		return "操作" if isHeader else mark_safe(
			"<a class='btn btn-warning' target='_blank' href='%s'>编辑</a> "
			"<a class='btn btn-danger' target='_blank' href='%s'>删除</a>" % (
				self.reverseChangeUrl(pk=obj.pk), self.reverseDeleteUrl(pk=obj.pk)))

然后对 getDisplayList 再做一些修改：
	def getDisplayList(self, request, *args, **kwargs):
		"""获取页面显示的表格，预留自定义扩展定制显示内容"""
		value = []
		if self.displayList:
			value.extend(self.displayList)
		value.append(type(self).getChangeAndDeleteButton)
		return value

这样就可以在页面上显示出编辑和删除两个按钮了：

最后编写删除功能的视图函数：
	def deleteView(self, request, pk, *args, **kwargs):
		"""删除功能视图函数"""
		baseUrl = self.reverseListUrl(*args, **kwargs)
		if request.method == "GET":
			return render(request, self.deleteTemplate or "stark/delete.html", {"baseUrl": baseUrl})
		response = self.model.objects.filter(pk=pk).delete()
		return redirect(baseUrl) or HttpResponse(response)

如此这般，删除功能就实现了：

好了，截止目前，Stark 组件的基本增删改查和页面显示也就做完了，后续我们再给它添加更多的功能。



13.2.4 模板层——模板语言





                                            Django约定将所有的HTML文档都放在templates文件夹下，注意，templates是模板的意思，这是因为放在templates文件夹下的并不全是HTML文档，如果文档中包含Django的模板语言，那就是Django模板文件。
来思考一个响应的过程，当我们使用render()函数返回一个文档时，并不是读取HTML文档的内容然后直接返回，而是要做一层渲染。
比如我们之前见过的{% %}语法，其实就是一种渲染，将包含的内容替换为Python变量。
我们知道，操作数据库是后端做的事情，也就是在Python的Django中通过Model层操作数据库。
编写Python代码和设计制作模板同时进行效率才是最高的，但是Python代码编写和HTML设计是两项不同的工作，大多数专业的网站开发环境都将这两项工作分配给不同的部门不同的人员完成。
基于这些原因，将页面设计和Python代码分离开会更干净简洁，更容易维护，但是前端又需要后端的数据，这时候就需要使用Django的模板系统（Template System）来实现这种需求。
模板语法变量
我们在blog > urls.py中定义博客主页的映射关系：
from django.urls import path
from blog import views

# URL控制器
urlpatterns = [
    # 博客系统主页
    path('index/', views.index),
    # 匹配年份
    path('<year>/', views.year_view),
    # 匹配年月
    path('<int:year>/<int:month>/', views.month_view),
    # 匹配年月日
    path('<int:year>/<int:month>/<int:day>/', views.day_view),
]


然后在blog>views.py中定义一些变量：
def index(request):
	# 测试字符串
	name = 'Alex'
	# 测试时间
	register_time = datetime.date(2020, 3, 8)
	# 测试列表
	course = ['语文', '数学', '英语']
	# 测试字典
	info = {
		'nickname': 'AlexKing',
		'age': 18,
		'major': 'AI and Big Data'
	}

	# 测试对象
	class Person:
		def __init__(self, nickname, age):
			self.nickname = nickname
			self.age = age

	Alex = Person('alex', '18')
	Coco = Person('coco', '18')
	Bei = Person('bei', '3')
	person_list = [Alex, Coco, Bei]

	return render(request, 'blog.html', locals())


之后在HTML文档中通过模板语法获取这些变量：
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Matrix Blog</title>
</head>
<body>
    <h1>测试字符串:{{ name }}</h1>
    <hr>
    <h1>测试时间:{{ time }}</h1>
    <hr>
    <h1>测试列表:{{ course }}</h1>
    <h1>测试列表:{{ course.0 }}</h1>
    <h1>测试列表:{{ course.1 }}</h1>
    <hr>
    <h1>测试字典:{{ info }}</h1>
    <h1>测试字典:{{ info.nickname }}</h1>
    <h1>测试字典:{{ info.age }}</h1>
    <hr>
    <h1>测试对象:{{ Alex }}</h1>
    <h1>测试对象:{{ Coco.nickname }}</h1>
    <h1>测试对象:{{ Bei.age }}</h1>
</body>
</html>

显示效果为：

模板之过滤器
语法：
{{obj|filter__name:param}}

default:
如果一个变量是false或者为空，使用给定的默认值。否则，使用变量的值。
length:
返回值的长度。它对字符串和列表都起作用。
date:
时间操作。
slice:
切片。
truncatechars:
如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（“…”）结尾。
safe:
Django的模板中会对HTML标签和JS等语法标签进行自动转义，原因显而易见，这样是为了安全。
但是有的时候我们可能不希望这些HTML元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于FCKeditor编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。
为了在Django中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|safe”的方式告诉Django这段代码是安全的不必转义。
blog>views.py:
	# 测试过滤器
	date_test = datetime.datetime.now()
	slice_test = 'Alex Love Coding'
	truncatechars_test = 'Alex Love Coding, he want to learn more.'
	safe_test = '<a href="www.baidu.com">百度一下</a>'

templates>blog.html:
    <h1>过滤器 default:{{ info|default:'nothing' }}</h1>
    <h1>过滤器 info length:{{ info|length }}</h1>
    <h1>过滤器 person_list length:{{ person_list|length }}</h1>
    <h1>过滤器 person_list length:{{ person_list|length }}</h1>
    <h1>过滤器 date:{{ date_test|date:'Y-m-d' }}</h1>
    <h1>过滤器 slice_test:{{ slice_test|slice:'0:5' }}</h1>
    <h1>过滤器 truncatechars_test:{{ truncatechars_test|truncatechars:17 }}</h1>
    <h1>过滤器 safe_test:{{ safe_test }}</h1>
    <h1>过滤器 safe_test:{{ safe_test|safe }}</h1>


模板之标签
模板语言既然是一门语言，它就有自己的语法。
if标签：
{% if %}会对一个变量求值，如果它的值是“True”（存在、不为空、且不是boolean类型的false值），对应的内容块会输出。
{% if num > 100 or num < 0 %}
    <p>无效</p>
{% elif num > 80 and num < 100 %}
    <p>优秀</p>
{% else %}
    <p>凑活吧</p>
{% endif %}

with标签：
使用一个简单地名字缓存一个复杂的变量，当你需要使用一个“昂贵的”方法（比如访问数据库）很多次的时候是非常有用的。
{% with total=business.employees.count %}
    {{ total }} employee{{ total|pluralize }}
{% endwith %}

for标签：
遍历每一个元素，可以利用{% for obj in list reversed %}反向完成循环，循环序号可以通过｛｛forloop｝｝显示。
forloop.counter            The current iteration of the loop (1-indexed)
forloop.counter0           The current iteration of the loop (0-indexed)
forloop.revcounter         The number of iterations from the end of the loop (1-indexed)
forloop.revcounter0        The number of iterations from the end of the loop (0-indexed)
forloop.first              True if this is the first time through the loop
forloop.last               True if this is the last time through the loop

for 标签带有一个可选的{% empty %} 从句，以便在给出的组是空的或者没有被找到时，可以有所操作。
    <h1>for标签</h1>
    {% for item in course %}
        <h1>{{ forloop.counter }}:{{ item }}</h1>
    {% endfor %}
    {% for key, value in info.items %}
        <h1>{{ key }}:{{ value }}</h1>
    {% endfor %}


csrf_token标签：
这个标签用于跨站请求伪造保护。
<form action="" method="post">
        {% csrf_token %}
        <input type="text" name="name">
        <input type="submit" value="提交">
</form>

自定义标签和过滤器
1、在settings中的INSTALLED_APPS配置当前app，不然django无法找到自定义的simple_tag；
2、在app中创建templatetags模块(模块名只能是templatetags)；
3、创建任意 .py 文件，如：my_tags.py；
from django import template
from django.utils.safestring import mark_safe


# register的名字是固定的，不可改变
register = template.Library()


@register.filter
def filter_multi(value1, value2):
	return value1 * value2


@register.simple_tag
def simple_tag_multi(value1, value2):
	return value1 * value2


@register.simple_tag
def my_input(id_number, arg):
	result = '<input type="text", id="%s", calss="%s"/>' % (id_number, arg)
	return mark_safe(result)


4、在使用自定义simple_tag和filter的html文件中导入之前创建的 my_tags.py；
{% load my_tags %}

5、使用simple_tag和filter，注意：filter可以用在if等语句后，simple_tag不可以
<h1>自制标签</h1>
{% load my_tags %}
<h1>{{ num|filter_multi:2 }}</h1>
<h1>{{ num|filter_multi:"[1, 2, 3]" }}</h1>
<h1>{% simple_tag_multi 2 num %}</h1>
{% if num|filter_multi:30 > 100 %}
    <h1>{{ num|filter_multi:30 }}</h1>
{% endif %}


模板继承extend
Django模版引擎中最强大也是最复杂的部分就是模版继承。
模版继承可以让您创建一个基本的“骨架”模版，它包含您站点中的全部元素，并且可以定义能够被子模版覆盖的 blocks 。
比如当我们查看博客的时候，每个页面除了博客内容不一样，其它地方都是一样的，此时，我们总不能对每一篇博客都写一个页面，这明显不现实，此时，我们顶一个blog_base.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block blog_title %}{% endblock %}</title>
</head>
<body>
<div class="blog_info">
    {% block blog_info %}
        <ul>
            <li><a href="home.html">Home</a></li>
        </ul>
    {% endblock %}
</div>
<div class="blog_content">
    {% block blog_content %}
        <ul>
            <li class="blog_content_title"></li>
            <li class="blog_content_abstract"></li>
            <li class="blog_content_main"></li>
        </ul>
    {% endblock %}
</div>
</body>
</html>

这个模板定义了一个可以用于填充博客页面信息的简单HTML骨架，不同的博客内容只需要填充到相应的block中就可以，而不需要再重新编写一份。
在这个例子中， block 标签定义了三个可以被子模版内容填充的block。
block 告诉模版引擎： 子模版可能会覆盖掉模版中的这些位置。
{# 继承自blog_base.html #}
{% extends 'blog_base.html' %}

{% block blog_title %}
Alex Blog
{% endblock %}

{% block blog_info %}
<h1><li href="www.baidu.com">百度一下</li></h1>
{% endblock %}

{% block blog_content %}
<h1><li class="blog_content_title">blog_content_title</li></h1>
<h1><li class="blog_content_abstract">blog_content_abstract</li></h1>
<h1><li class="blog_content_main">blog_content_main</li></h1>
{% endblock %}

extends 标签是这里的关键，它告诉模版引擎，这个模版“继承”了另一个模版。
当模版系统处理这个模版时，首先，它将定位父模版——在此例中，就是“base.html”。
那时，模版引擎将注意到 base.html 中的三个 block 标签，并用子模版中的内容来替换这些block。
用字模板中的内容替换了block之后，HTML文档为：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>
Alex Blog
</title>
</head>
<body>
<div class="blog_info">
        <ul>
            <h1><li><a href="home.html">Home</a></li></h1>

<h1><li href="www.baidu.com">百度一下</li></h1>

        </ul>
</div>
<hr>
<hr>
<div class="blog_content">
        <ul>

<h1><li class="blog_content_title">blog_content_title</li></h1>
<h1><li class="blog_content_abstract">blog_content_abstract</li></h1>
<h1><li class="blog_content_main">blog_content_main</li></h1>

        </ul>
</div>
</body>
</html>

继承的一些提示：

如果你在模版中使用 {% extends %} 标签，它必须是模版中的第一个标签。其他的任何情况下，模版继承都将无法工作。
在base模版中设置越多的 {% block %} 标签越好。请记住，子模版不必定义全部父模版中的blocks，所以，你可以在大多数blocks中填充合理的默认内容，然后，只定义你需要的那一个。多一点钩子总比少一点好。
如果你发现你自己在大量的模版中复制内容，那可能意味着你应该把内容移动到父模版中的一个 {% block %} 中。
如果需要从父模板获取块的内容，则变量{{ block.super }}将完成此操作。如果要添加到父块的内容，而不是完全重写父块，则这非常有用。使用插入的数据不会自动转义，因为它已在父模板中转义（如果需要）。
为了更好的可读性，你也可以给你的{% endblock %} 标签一个 名字 。
不能在一个模版中定义多个相同名字的 block 标签。




13.2.3 视图层——视图函数





                                            视图函数
视图函数，也就是我们所说的views层，一个视图函数，简称视图，其实就是一个简单的Python函数，它接收WEB请求并返回WEB响应。
响应的内容可以是HTML文档，可以是404错误，可以是一张图片……
任何超文本都可以作为响应内容，并且无论视图本身包含什么逻辑，都要返回响应内容。
视图函数虽然放到哪里都可以，但是默认约定是将视图放置在项目或应用程序目录中名为views.py的文件中。
我们来看一个简单的例子理解一下视图函数工作的流程，下面是一个返回当前日期和时间作为HTML文档的视图：
import time

from django.shortcuts import HttpResponse


def current_time(request):
	now = time.strftime('%Y-%m-%d', time.localtime(time.time()))
	html = "<html><body><h1>It is now %s.</h1></body></html>" % now
	return HttpResponse(html)

我们来仔细看一下视图函数的代码：

首先，从 django.shortcuts模块导入了HttpResponse类，以及Python的time库；
然后，定义current_time视图函数，使用HttpRequest对象作为第一个参数，并命名为request；
最后，视图函数返回一个HttpResponse对象，其中包含生成的响应，每个视图函数都负责返回一个HttpResponse对象。


HttpRequest对象
在视图函数中第一个HttpRequest对象是形参request，Django将请求报文中的请求首行、请求头、请求体封装成HttpRequest类中的属性，除了特殊说明的之外，其它均是只读的。
request属性：
1.HttpRequest.GET
　　一个类似于字典的对象，包含 HTTP GET 的所有参数。

2.HttpRequest.POST
　　一个类似于字典的对象，如果请求中包含表单数据，则将这些数据封装成 QueryDict 对象。
　　POST 请求可以带有空的 POST 字典 —— 如果通过 HTTP POST 方法发送一个表单，但是表单中没有任何的数据，QueryDict 对象依然会被创建。因此，不应该使用 if request.POST  来检查使用的是否是POST 方法；应该使用 if request.method == "POST"
　　另外：如果使用 POST 上传文件的话，文件信息将包含在 FILES 属性中。
　　注意：键值对的值是多个的时候,比如checkbox类型的input标签，select标签，需要用：request.POST.getlist("hobby")

3.HttpRequest.body
　　一个字符串，代表请求报文的主体。在处理非 HTTP 形式的报文时非常有用，例如：二进制图片、XML,Json等。
　　但是，如果要处理表单数据的时候，推荐还是使用 HttpRequest.POST 。

4.HttpRequest.path
　　一个字符串，表示请求的路径组件（不含域名）。
　　例如："/music/bands/the_beatles/"

5.HttpRequest.method
　　一个字符串，表示请求使用的HTTP 方法。必须使用大写。
　　例如："GET"、"POST"

6.HttpRequest.encoding
　　一个字符串，表示提交的数据的编码方式（如果为 None 则表示使用 DEFAULT_CHARSET 的设置，默认为 'utf-8'）。
   这个属性是可写的，可以修改它来修改访问表单数据使用的编码。
   接下来对属性的任何访问（例如从 GET 或 POST 中读取数据）将使用新的 encoding 值。
   如果你知道表单数据的编码不是 DEFAULT_CHARSET ，则使用它。

7.HttpRequest.META
	一个标准的Python 字典，包含所有的HTTP 首部。
	具体的头部信息取决于客户端和服务器，下面是一些示例：
	    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。
	    CONTENT_TYPE —— 请求的正文的MIME 类型。
	    HTTP_ACCEPT —— 响应可接收的Content-Type。
	    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。
	    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。
	    HTTP_HOST —— 客服端发送的HTTP Host 头部。
	    HTTP_REFERER —— Referring 页面。
	    HTTP_USER_AGENT —— 客户端的user-agent 字符串。
	    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。
	    REMOTE_ADDR —— 客户端的IP 地址。
	    REMOTE_HOST —— 客户端的主机名。
	    REMOTE_USER —— 服务器认证后的用户。
	    REQUEST_METHOD —— 一个字符串，例如"GET" 或"POST"。
	    SERVER_NAME —— 服务器的主机名。
	    SERVER_PORT —— 服务器的端口（是一个字符串）。
 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，
    都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀。
    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。

8.HttpRequest.FILES
　　一个类似于字典的对象，包含所有的上传文件信息。
   FILES 中的每个键为<input type="file" name="" /> 中的name，值则为对应的数据。
　　注意，FILES 只有在请求的方法为POST 且提交的<form> 带有enctype="multipart/form-data" 的情况下才会包含数据。否则，FILES 将为一个空的类似于字典的对象。

9.HttpRequest.COOKIES
　　一个标准的Python 字典，包含所有的cookie。键和值都为字符串。

10.HttpRequest.session
 　　一个既可读又可写的类似于字典的对象，表示当前的会话。只有当Django 启用会话的支持时才可用。

11.HttpRequest.user(用户认证组件下使用)
　　一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。
　　如果用户当前没有登录，user 将设置为 django.contrib.auth.models.AnonymousUser 的一个实例。你可以通过 is_authenticated() 区分它们。

    例如：
    if request.user.is_authenticated():
        # Do something for logged-in users.
    else:
        # Do something for anonymous users.
     　　user 只有当Django 启用 AuthenticationMiddleware 中间件时才可用。
     -------------------------------------------------------------------------------------
    匿名用户
    class models.AnonymousUser
    django.contrib.auth.models.AnonymousUser 类实现了django.contrib.auth.models.User 接口，但具有下面几个不同点：
    id 永远为None。
    username 永远为空字符串。
    get_username() 永远返回空字符串。
    is_staff 和 is_superuser 永远为False。
    is_active 永远为 False。
    groups 和 user_permissions 永远为空。
    is_anonymous() 返回True 而不是False。
    is_authenticated() 返回False 而不是True。
    set_password()、check_password()、save() 和delete() 引发 NotImplementedError。
    New in Django 1.8:
    新增 AnonymousUser.get_username() 以更好地模拟 django.contrib.auth.models.User。

request常用方法：
1.HttpRequest.get_full_path()
　　返回 path，如果可以将加上查询字符串。
　　例如："/music/bands/the_beatles/?print=true"
2.HttpRequest.is_ajax()
　　如果请求是通过 XMLHttpRequest 发起的，则返回True，方法是检查 HTTP_X_REQUESTED_WITH 相应的首部是否是字符串'XMLHttpRequest'。
　　大部分现代的 JavaScript 库都会发送这个头部。如果你编写自己的 XMLHttpRequest 调用（在浏览器端），你必须手工设置这个值来让 is_ajax() 可以工作。
　　如果一个响应需要根据请求是否是通过AJAX 发起的，并且你正在使用某种形式的缓存例如Django 的 cache middleware，
    你应该使用 vary_on_headers('HTTP_X_REQUESTED_WITH') 装饰你的视图以让响应能够正确地缓存。

HttpResponse对象
响应对象主要有三种形式：

HttpResponse()
render()
redirect()

HttpResponse()
括号内直接跟一个具体的字符串作为响应体，比较直接很简单。
render()
render(request, template_name[, context]）

结合一个给定的模板和一个给定的上下文字典，并返回一个渲染后的 HttpResponse 对象。
参数：
1.request： 用于生成响应的请求对象。

2.template_name：要使用的模板的完整名称，可选的参数

3.context：添加到模板上下文的一个字典。默认是一个空字典。如果字典中的某个值是可调用的，视图将在渲染模板之前调用它。

render方法就是将一个模板页面中的模板语法进行渲染，最终渲染成一个html页面作为响应体。
redirect()
传递要重定向的一个硬编码的URL，也可以是一个完整的URL。
key：两次请求
1）301和302的区别。
　　301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取
  （用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。
　　他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；
　　302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301
2）重定向原因：
（1）网站调整（如改变网页目录结构）；
（2）网页被移到一个新地址；
（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。
        这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的
    网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。




13.2 Django





                                            Django是高水准的Python语言驱动的开源WEB应用程序框架，可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。
在Django框架中，还包含许多功能强大的第三方插件，这使得Django具有较强的可扩展性，因此非常适合大型网站的开发。
Django已经成为WEB开发者的首选框架，主要目的就是简便、快捷地开发数据库驱动的网站，强调代码复用，多个组件可以很方便的以“插件”的形式服务于整个框架，Django遵循的是MTV设计模式。
MTV设计模式
先说什么是设计模式，这其实是一种思想，提供了组织业务逻辑的方向。
设计模式都是前人经过千锤百炼总结出来的套路，他并不是具体的代码，而是设计过程中考虑问题的思路。
MTV是Model、Template、View三个单词的简写，分别代表模型、模板、视图。


模型（Model），即数据存取层，处理与数据相关的所有事务：如何存取、如何验证有效性、数据之间的关系等。


模板（Template），即视图表现层，处理与视图相关的内容：如何在页面或其它类型文档中进行显示。


视图（View），即业务逻辑层，存取模型及调用恰当的模板，是模型与模板之间的桥梁。


除了以上这三层之外，还需要一个URL控制器，将一个个URL的页面请求分发给不同的View处理，然后View再调用相应的Model和Template。
MTV的响应模式如图所示：




项目介绍





                                            Matrix 工作室管理系统
项目背景
Matrix 工作室是以提供成员在线学习和项目制作为业务的社团，成立于2016年，经过4年的发展，目前成员已过百人。
成员的冗余和管理的松散导致了以下问题：

成员学习效率低

工作室提供给新成员在线学习的资源，但资源混乱，都是以链接的形式发送到QQ群中，不易查找，不利于新成员学习。

成员绩效考核体系不健全

针对成员每次会议情况、成员自学进度、参与项目贡献程度等工作，没有一套完善的绩效考核体系，导致成员学习工作效率低。

成员管理缺乏科学规划

工作室在成员管理方面没有科学规划，只是走一步看一步，始终语出被动局面，使得成员简历管理、信息管理、工作室纳新管理等没有计划性，导致在成员管理上存在较大的随意性。
项目概述
程序的开发环境
程序的实现的功能
程序的启动方式
登录用户信息
程序的运行效果



13.2.8 用户认证





                                            一、auth模块
from django.contrib import auth

1.1 、authenticate()
提供了用户认证，即验证用户名以及密码是否正确,一般需要username password两个关键字参数，如果认证信息有效，会返回一个 User 对象。
authenticate()会在User 对象上设置一个属性标识那种认证后端认证了该用户，且该信息在后面的登录过程中是需要的。
1.2 、login(HttpRequest, user)
该函数接受一个HttpRequest对象，以及一个认证了的User对象。
此函数使用django的session框架给某个已认证的用户附加上session id等信息。
from django.contrib.auth import authenticate, login

def my_view(request):
  username = request.POST['username']
  password = request.POST['password']
  user = authenticate(username=username, password=password)
  if user is not None:
    login(request, user)
    # Redirect to a success page.
    ...
  else:
    # Return an 'invalid login' error message.
    ...

1.3 、logout(request) 注销用户
该函数接受一个HttpRequest对象，无返回值。当调用该函数时，当前请求的session信息会全部清除。该用户即使没有登录，使用该函数也不会报错。
from django.contrib.auth import logout

def logout_view(request):
  logout(request)
  # Redirect to a success page.

User对象
User 对象属性：username， password（必填项）password用哈希算法保存到数据库。
user对象的 is_authenticated()
如果是真正的 User 对象，返回值恒为 True 。 用于检查用户是否已经通过了认证。
通过认证并不意味着用户拥有任何权限，甚至也不检查该用户是否处于激活状态，这只是表明用户成功的通过了认证。
这个方法很重要, 在后台用request.user.is_authenticated()判断用户是否已经登录，如果true则可以向前台展示request.user.name。
要求：

用户登陆后才能访问某些页面，
如果用户没有登录就访问该页面的话直接跳到登录页面
用户在跳转的登陆界面中完成登陆后，自动访问跳转到之前访问的地址

方法一
def my_view(request):
  if not request.user.is_authenticated():
    return redirect('%s?next=%s' % (settings.LOGIN_URL, request.path))

方法二
django已经为我们设计好了一个用于此种情况的装饰器：login_requierd()。
from django.contrib.auth.decorators import login_required

@login_required
def my_view(request):
  ...

若用户没有登录，则会跳转到django默认的 登录URL '/accounts/login/ ’ (这个值可以在settings文件中通过LOGIN_URL进行修改)。并传递 当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。
创建用户
使用 create_user 辅助函数创建用户:
from django.contrib.auth.models import User
user = User.objects.create_user（username='',password='',email=''）

check_password(passwd)
用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 True。
修改密码
使用 set_password() 来修改密码：
user = User.objects.get(username='')
user.set_password(password='')
user.save

简单示例
注册：
def sign_up(request):

    state = None
    if request.method == 'POST':

        password = request.POST.get('password', '')
        repeat_password = request.POST.get('repeat_password', '')
        email=request.POST.get('email', '')
        username = request.POST.get('username', '')
        if User.objects.filter(username=username):
                state = 'user_exist'
        else:
                new_user = User.objects.create_user(username=username, password=password,email=email)
                new_user.save()

                return redirect('/book/')
    content = {
        'state': state,
        'user': None,
    }
    return render(request, 'sign_up.html', content)

修改密码：
@login_required
def set_password(request):
    user = request.user
    state = None
    if request.method == 'POST':
        old_password = request.POST.get('old_password', '')
        new_password = request.POST.get('new_password', '')
        repeat_password = request.POST.get('repeat_password', '')
        if user.check_password(old_password):
            if not new_password:
                state = 'empty'
            elif new_password != repeat_password:
                state = 'repeat_error'
            else:
                user.set_password(new_password)
                user.save()
                return redirect("/log_in/")
        else:
            state = 'password_error'
    content = {
        'user': user,
        'state': state,
    }
    return render(request, 'set_password.html', content)




11.1.2  DOM





                                            DOM 概念
所谓DOM,全称 Docuemnt Object Model 文档对象模型，毫无疑问，此时要操作对象，什么对象？
在文档中一切皆对象，比如html,body,div,p等等都看做对象，那么我们如何来点击某个盒子让它变色呢？
DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让js操作html元素而制定的一个规范。
解析过程
HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树，getElementById是获取内中DOM上的元素节点。然后操作的时候修改的是该元素的属性。
DOM树（一切皆是节点）

在HTML当中，一切都是节点：（非常重要）
元素节点：HMTL标签。
文本节点：标签中的文字（比如标签之间的空格、换行）
属性节点：：标签的属性

DOM可以做什么
找对象（元素节点）
设置元素的属性值
设置元素的样式
动态创建和删除元素
事件的触发响应：事件源、事件、事件的驱动程序
清楚DOM的结构
获取文档对象：document
获取html：document.documentElement
获取body: document.body
获取其它DOM（事件源）的三种方式
var oDiv1 = document.getElementById("box1");      //方式一：通过id获取单个标签

var oDiv2 = document.getElementsByTagName("div")[0];     //方式二：通过 标签名 获得 标签数组，所以有s

var oDiv3 = document.getElementsByClassName("box")[0];  //方式三：通过 类名 获得 标签数组，所以有s

事件
JS是事件驱动为核心的一门语言。
事件的三要素
事件的三要素：事件源、事件、事件驱动程序。
代码书写步骤如下：（重要）
（1）获取事件源：document.getElementById(“box”); //类似与ios语言的UIButton *adBtn = [UIButton buttonWithType:UIButtonTypeCustom];
（2）绑定事件： 事件源box.事件onclick = function(){ 事件驱动程序 };
（3）书写事件驱动程序：关于DOM的操作

绑定事件的方式
JavaScript入口函数 window.onload()
函数调用，是当页面加载完毕(文档和图片)的时候，触发onload()函数，文档先加载，图片资源后加载。
有一点我们要知道：js的加载是和html同步加载的。因此，如果使用元素在定义元素之前，容易报错。这个时候，onload事件就能派上用场了，我们可以把使用元素的代码放在onload里，就能保证这段代码是最后执行。
window.onload()方法存在的问题

图片加载完成才调用onload方法，大家想个问题，如果现在用户访问JD商城页面，如果JD商城中的脚本文件在window.onload()方法调用，如果此时用户网速卡了，然后图片资源加载失败了，此时用户是做不了任何操作的，所以winodw.onload()方法有很大问题。
window.onload()方法 如果脚本中书写两个这样的方法，那么会有事件覆盖现象。

样式属性操作
所谓样式属性，就是对之前所讲解的style标签中的属性进行操作，并且通过js控制盒模型的属性（width,height等），控制盒子的显示隐藏（display:none|block）,控制盒子的颜色切换（background：red|green）等等
首先，大家明确一点，你是要操作文档对象了，要遵循事件三步走
获取事件源
事件
事件驱动程序
值的操作
所谓值的操作，就是对前闭合标签和后闭合标签中间的文本内容的设置和获取。
双闭合标签： innerText或者innerHTML
单闭合标签：除了img标签，就剩input了，使用value进行赋值
标签属性操作
所谓标签属性,就是对标签中（字面上看到的）属性的操作。比如像每个标签中id，class，title、img
标签的src属性和alt属性、a标签的href属性、input标签中的name、type属性等等
节点的操作
插入节点
方式1：
 父节点.appendChild(新的子节点);

解释：父节点的最后插入一个新的子节点。
方式2：
父节点.insertBefore(新的子节点,作为参考的子节点);

删除节点
  父节点.removeChild(子节点);

如果我想删除自己这个节点，可以这么做：
node1.parentNode.removeChild(node1);




数据库开发——MySQL——简单介绍和安装





                                            数据库
数据实际上就是描述事物特征的一组符号，数据库指的就是存储数据的仓库。
基于我们之前所学，数据要想永久保存，都是保存于文件中，毫无疑问，一个文件仅仅只能存在于某一台机器上。
在软件开发过程中，程序的所有组件不可能只运行在一台机器之上，如果这台运行的机器出故障了则意味着整个软件的崩溃，并且程序的执行效率依赖于承载它的硬件，而一台机器机器的性能总归是有限的。
因此，对于程序不同的组件，应该运行在不同的机器上，并且还有备用机器，如果其中一台机器出故障了，备用机器能够迅速接替，保证程序运行的稳定性。
那现在，我的程序运行在了不同的机器上，要读取文件的话该怎么办？总不能在所有的机器上都拷贝一份所需文件吧，先不说浪费的硬盘资源，我如果某台机器要对其中一个文件进行改动，那么所有的机器必须同步进行改动，那就更麻烦了。
基于这种需求，我们可以专门调用一台数据存储机器，程序运行所需的所有文件都放在这台机器上，其它机器需要的时候，可以通过套接字通信来获取或改动。
好了，现在有了这样一台机器，接下来就需要开发一套运行在存储数据机器上的服务端和运行的其它机器上的客户端的套接字文件数据通信系统。
这么一个系统，需要考虑的问题很多，比如，不同的机器同一时间访问同一个文件需要考虑文件加锁，不同文件之间的数据可能存在关系应该怎么整合，而且，不同的人开发的系统肯定不一样，我可能用get表示获取文件内容，但是别人可能用wget获取文件内容。
一系列的问题，造成了很大的混乱，不同的人开发的数据库乱七八糟，最后，终于有一个站出来了，说你们都别吵了，我开发了一套很完美的数据库系统，你们都直接用我的不就行了，我保证把数据给你们维护好。
由于它做的数据库管理软件确实很完美，大家也就慢慢接受了它，这样MySQL就诞生了。
概念理解
数据库服务器：运行数据库管理软件
数据库管理软件：管理数据库
数据库：即文件夹，用来组织文件/表
表：即文件，用来存放多行内容/多条记录
记录：多个字段的信息组成一条记录，即文件中的一行内容
数据库（DataBase，简称DB）与数据库管理软件（DataBase Management System 简称DBMS）
数据库即存放数据的仓库，只不过这个仓库是在计算机存储设备上，而且数据是按一定的格式存放的。
数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。
如何科学地组织和存储数据，如何高效获取和维护数据成了关键，这就用到了一个系统软件—数据库管理系统。
MySQL、Oracle、SQLite、Access、MS SQL Server …
现在我们使用关系型数据库管理系统（RDBMS）来存储和管理的大数据量。
所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。
mysql主要用于大型门户，例如搜狗、新浪等，它主要的优势就是开放源代码，因为开放源代码这个数据库是免费的，他现在是甲骨文公司的产品。
oracle主要用于银行、铁路、飞机场等。该数据库功能强大，软件费用高。也是甲骨文公司的产品。
sql server是微软公司的产品，主要应用于大中型企业，如联想、方正等。
数据库管理软件分类
关系型
关系型数据库需要有表结构，sql语句通用
如sqllite，db2，oracle，access，sql server，MySQL，
非关系型
非关系型数据库是key-value存储的，没有表结构
mongodb，redis，memcache
MySQL
介绍
MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。
MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。
关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。
MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。
MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。
安装
Windows版本
1.下载
官网
2.解压
如果想要让MySQL安装在指定目录，那么就解压到指定文件夹。

3.添加环境变量
Windows10直接搜索：高级系统设置

点击环境变量：

找到path变量编辑：

将MySQL的bin目录路径追加到变量值中：

最后一路确定回去：

4.初始化
打开Windows终端，运行下述命令初始化：
mysqld --initialize-insecure

这个过程时间会久一点，耐心等待，当然要是超过十分钟还不好那就是出问题了。

5.制作MySQL的Windows服务
然后再开一个以管理员身份运行终端运行下述命令制作MySQL的Windows服务：
D:\MySQL\bin\mysqld --install


注册成服务之后，以后再启动和关闭MySQL服务时，打开Windows的服务：

找到MySQL就可以启动、停止或重启动服务了。
或者也可以通过以管理员身份运行的终端执行下列命令：
# 启动MySQL服务
net start mysql

# 关闭MySQL服务
net stop mysql

6.登录
然后打开终端，输入下述命令进入MySQL的管理员账号：
mysql -u root -p

显示
Enter password:

不用在意，直接回车就可以进入：

7.设置密码
刚才咱们是直接就登录了，没有输入密码，显然这样是不安全的，你想想，如果你的电脑落在了别人手里，别人就可以直接登录你的数据库删除你的数据了。
所以我们要设置MySQL的登录密码，以管理员身份打开终端执行下述命令：
mysqladmin -uroot password "123"

设置初始密码 由于原密码为空，因此-p可以不用
mysqladmin -uroot -p"123" password "456"

修改mysql密码,因为已经有密码了，所以必须输入原密码才能设置新密码
设置完密码之后如果登录还不输入密码的话登录就会失败了：

8.破解密码
如果你时间久了忘记了密码，这时候就需要破解密码了，MySQL破解密码有如下6步：

1.关闭MySQL，可以通过终端也可以通过服务

2.在终端执行mysqld --skip-grant-tables

3.在终端执行mysql

4.执行下述SQL语句：

	update mysql.user set authentication_string=password('') where user = 'root';
	flush privileges;

5.退出mysql，干掉mysqld进程：tskill mysqld

6.重新启动mysql

统一字符编码
字符编码的问题可以说是：不遇到还好，遇到就头疼，解决字符编码的问题通常及其麻烦。
因此，为了避免以后的麻烦，必须先把MySQL的字符编码统一了。
先来看一下初始的字符编码，已管理员身份运行终端，登录mysql执行下述命令：
\s

就可以看到mysql的字符编码：

修改字符编码步骤：
1.编写配置文件
在MySQL的安装路径编写配置文件my.ini：
[mysqld]
character-set-server=utf8
collation-server=utf8_general_ci
[client]
default-character-set=utf8
[mysql]
default-character-set=utf8

2.重启MySQL服务

现在重新查看字符编码：

可以发现，字符编码都被改为utf8编码了。



13.2.7 中间件





                                            一、中间件的概念
中间件顾名思义，是介于request与response处理之间的一道处理过程，相对比较轻量级，并且在全局上改变django的输入与输出。
因为改变的是全局，所以需要谨慎实用，用不好会影响到性能。
如果你想修改请求，例如被传送到view中的HttpRequest对象。
或者你想修改view返回的HttpResponse对象，这些都可以通过中间件来实现。
可能你还想在view执行之前做一些操作，这种情况就可以用 middleware来实现。
二、自定义中间件
process_request
process_view
process_exception
process_response




13.2.5 模型层——单表操作





                                            MVC框架中包括一个重要的部分，就是ORM，它实现了数据模型与数据库的解耦，即数据模型的设计不需要依赖于特定的数据库，通过简单的配置就可以轻松更换数据库。
ORM极大的减轻了开发人员的工作量，不需要面对因数据库变更而导致的无效劳动。
ORM是“对象-关系-映射”的简称。

单表操作

创建模型

创建名为book的application，在 book > models.py 中创建模型：
class Book(models.Model):
	id = models.AutoField(primary=True)
	title = models.CharField(max_length=12)
	state = models.BooleanField()
	publication_date = models.DateField()
	price = models.DecimalField(max_digits=8, decimal_places=2)
	press = models.CharField(max_length=32)



更多字段和参数
<1> CharField
       字符串字段, 用于较短的字符串。
       CharField 要求必须有一个参数 maxlength, 用于从数据库层和Django校验层限制该字段所允许的最大字符数。

<2> IntegerField
      用于保存一个整数。

<3> FloatField
       一个浮点数. 必须 提供两个参数:

       参数    描述
       max_digits    总位数(不包括小数点和符号)
       decimal_places    小数位数
       举例来说, 要保存最大值为 999 (小数点后保存2位),你要这样定义字段:
               models.FloatField(..., max_digits=5, decimal_places=2)
               要保存最大值一百万(小数点后保存10位)的话,你要这样定义:
               models.FloatField(..., max_digits=19, decimal_places=10)
               admin 用一个文本框(<input type="text">)表示该字段保存的数据。

<4> AutoField
       一个 IntegerField, 添加记录时它会自动增长。
       如果你不指定主键的话,系统会自动添加一个主键字段到你的 model。

<5> BooleanField
       A true/false field. admin 用 checkbox 来表示此类字段。

<6> TextField
       一个容量很大的文本字段.
       admin 用一个 <textarea> (文本区域)表示该字段数据(一个多行编辑框)。

<7> EmailField
       一个带有检查Email合法性的 CharField，不接受 maxlength 参数。

<8> DateField
       一个日期字段. 共有下列额外的可选参数:
       Argument    描述
       auto_now    当对象被保存时,自动将该字段的值设置为当前时间.通常用于表示 "last-modified" 时间戳.
       auto_now_add    当对象首次被创建时,自动将该字段的值设置为当前时间.通常用于表示对象创建时间.
       （仅仅在admin中有意义...)

<9> DateTimeField
        一个日期时间字段. 类似 DateField 支持同样的附加选项.

<10> ImageField
       类似 FileField, 不过要校验上传对象是否是一个合法图片.#它有两个可选参数:height_field和width_field,
       如果提供这两个参数,则图片将按提供的高度和宽度规格保存.

<11> FileField
    一个文件上传字段.
    要求一个必须有的参数: upload_to, 一个用于保存上载文件的本地文件系统路径. 这个路径必须包含 strftime #formatting,    该格式将被上载文件的 date/time 替换(so that uploaded files don't fill up the given directory).
    admin 用一个<input type="file">部件表示该字段保存的数据(一个文件上传部件) .
    注意：在一个 model 中使用 FileField 或 ImageField 需要以下步骤:
           （1）在你的 settings 文件中, 定义一个完整路径给 MEDIA_ROOT 以便让 Django在此处保存上传文件.
           (出于性能考虑,这些文件并不保存到数据库.) 定义MEDIA_URL 作为该目录的公共 URL. 要确保该目录对
            WEB服务器用户帐号是可写的.
           （2） 在你的 model 中添加 FileField 或 ImageField, 并确保定义了 upload_to 选项,以告诉 Django
            使用 MEDIA_ROOT 的哪个子目录保存上传文件.你的数据库中要保存的只是文件的路径(相对于 MEDIA_ROOT).
            出于习惯你一定很想使用 Django 提供的 get_<#fieldname>_url 函数.举例来说,如果你的 ImageField
            叫作 mug_shot, 你就可以在模板中以 {{ object.#get_mug_shot_url }} 这样的方式得到图像的绝对路径.

<12> URLField
     用于保存 URL. 若 verify_exists 参数为 True (默认), 给定的 URL 会预先检查是否存在( 即URL是否被有效装入且
     没有返回404响应).
     admin 用一个 <input type="text"> 文本框表示该字段保存的数据(一个单行编辑框)

<13> NullBooleanField
      类似 BooleanField, 不过允许 NULL 作为其中一个选项. 推荐使用这个字段而不要用 BooleanField 加 null=True 选项
      admin 用一个选择框 <select> (三个可选择的值: "Unknown", "Yes" 和 "No" ) 来表示这种字段数据.

<14> SlugField
      "Slug" 是一个报纸术语. slug 是某个东西的小小标记(短签), 只包含字母,数字,下划线和连字符.#它们通常用于URLs
      若你使用 Django 开发版本,你可以指定 maxlength. 若 maxlength 未指定, Django 会使用默认长度: 50.  #在
      以前的 Django 版本,没有任何办法改变50 这个长度.
      这暗示了 db_index=True.
      它接受一个额外的参数: prepopulate_from, which is a list of fields from which to auto-#populate
      the slug, via JavaScript,in the object's admin form: models.SlugField
      (prepopulate_from=("pre_name", "name"))prepopulate_from 不接受 DateTimeFields.

<13> XMLField
       一个校验值是否为合法XML的 TextField,必须提供参数: schema_path, 它是一个用来校验文本的 RelaxNG schema #的文件系统路径.

<14> FilePathField
       可选项目为某个特定目录下的文件名. 支持三个特殊的参数, 其中第一个是必须提供的.
       参数    描述
       path    必需参数. 一个目录的绝对文件系统路径. FilePathField 据此得到可选项目.
       Example: "/home/images".
       match    可选参数. 一个正则表达式, 作为一个字符串, FilePathField 将使用它过滤文件名.
       注意这个正则表达式只会应用到 base filename 而不是
       路径全名. Example: "foo.*\.txt^", 将匹配文件 foo23.txt 却不匹配 bar.txt 或 foo23.gif.
       recursive可选参数.要么 True 要么 False. 默认值是 False. 是否包括 path 下面的全部子目录.
       这三个参数可以同时使用.
       match 仅应用于 base filename, 而不是路径全名. 那么,这个例子:
       FilePathField(path="/home/images", match="foo.*", recursive=True)
       ...会匹配 /home/images/foo.gif 而不匹配 /home/images/foo/bar.gif

<15> IPAddressField
       一个字符串形式的 IP 地址, (i.e. "24.124.1.30").
<16> CommaSeparatedIntegerField
       用于存放逗号分隔的整数值. 类似 CharField, 必须要有maxlength参数.

更多参数：
(1)null

如果为True，Django 将用NULL 来在数据库中存储空值。 默认值是 False.

(1)blank

如果为True，该字段允许不填。默认为False。
要注意，这与 null 不同。null纯粹是数据库范畴的，而 blank 是数据验证范畴的。
如果一个字段的blank=True，表单的验证将允许该字段是空值。如果字段的blank=False，该字段就是必填的。

(2)default

字段的默认值。可以是一个值或者可调用对象。如果可调用 ，每有新对象被创建它都会被调用。

(3)primary_key

如果为True，那么这个字段就是模型的主键。如果你没有指定任何一个字段的primary_key=True，
Django 就会自动添加一个IntegerField字段做为主键，所以除非你想覆盖默认的主键行为，
否则没必要设置任何一个字段的primary_key=True。

(4)unique

如果该值设置为 True, 这个数据字段的值在整张表中必须是唯一的

(5)choices
由二元组组成的一个可迭代对象（例如，列表或元组），用来给字段提供选择项。 如果设置了choices ，默认的表单将是一个选择


settings配置

注意1：若想将模型转为mysql数据库中的表，需要在settings中配置：
# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# 将默认的sqlite注释掉
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# 配置本机的MySQL数据库
DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.mysql',
		'NAME': 'matrix',  # 要连接的数据库，连接前需要创建好
		'USER': 'root',  # 连接数据库的用户名
		'PASSWORD': '********',  # 连接数据库的密码
		'HOST': '127.0.0.1',  # 连接主机，默认本级
		'PORT': 3306  # 端口 默认3306
	}
}

设置完后，再启动我们的Django项目前，我们需要激活我们的mysql，在项目的__init__文件中配置驱动PyMySQL：
import pymysql
pymysql.install_as_MySQLdb()


注意2：确保配置文件中的INSTALLED_APPS中写入我们创建的app名称
# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'index',
	'blog',
	'book'
]

注意3：报错：django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.
MySQLclient目前只支持到python3.4，因此如果使用的更高版本的python，需要修改如下：
找到项目的虚拟环境目录：
venv/Lib/site-packages/django/db/backends/mysql/base.py
注释36,37两行：

注意4：如果想打印orm转换过程中的sql，需要在settings中进行如下配置：
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level':'DEBUG',
        },
    }
}

最后通过两条数据库迁移命令即可在指定的数据库中创建表 ：
python manage.py makemigrations
python manage.py migrate


Django MySQL 增删改查
增
def index(request):
	# 添加记录
	# 方式一：create方法
	# 返回值book_obj就是插入book表中的书籍纪录对象
	book_obj1 = Book.objects.create(title='Python全栈开发之路', state=True, price=70, publication_date='2020-3-9', press='Matrix出版社')
	# 方式二：实例化
	book_obj2 = Book(title='Go全栈开发之路', state=True, price=80, publication_date='2020-3-10', press='Matrix出版社')
	book_obj2.save()
	return HttpResponse(book_obj1)

查
查询API:
<1> all():                  查询所有结果

<2> filter(**kwargs):       它包含了与所给筛选条件相匹配的对象

<3> get(**kwargs):          返回与所给筛选条件相匹配的对象，返回结果有且只有一个，
                            如果符合筛选条件的对象超过一个或者没有都会抛出错误。

<4> exclude(**kwargs):      它包含了与所给筛选条件不匹配的对象

<5> order_by(*field):       对查询结果排序

<6> reverse():              对查询结果反向排序

<8> count():                返回数据库中匹配查询(QuerySet)的对象数量。

<9> first():                返回第一条记录

<10> last():                返回最后一条记录

<11> exists():              如果QuerySet包含数据，就返回True，否则返回False

<12> values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列
                            model的实例化对象，而是一个可迭代的字典序列
<13> values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列

<14> distinct():            从返回结果中剔除重复纪录

基于双下划线的模糊查询：
Book.objects.filter(price__in=[100,200,300])
Book.objects.filter(price__gt=100)
Book.objects.filter(price__lt=100)
Book.objects.filter(price__range=[100,200])
Book.objects.filter(title__contains="python")
Book.objects.filter(title__icontains="python")
Book.objects.filter(title__startswith="py")
Book.objects.filter(pub_date__year=2012)

改
Book.objects.filter(title__startswith="py").update(price=120)

此外，update()方法对于任何结果集（QuerySet）均有效，这意味着你可以同时更新多条记录update()方法会返回一个整型数值，表示受影响的记录条数。
删
删除方法就是 delete()。它运行时立即删除对象而不返回任何值。
model_obj.delete()

也可以一次性删除多个对象。
每个 QuerySet 都有一个 delete() 方法，它一次性删除 QuerySet 中所有的对象。
例如，下面的代码将删除 pub_date 是2005年的 Entry 对象：
Entry.objects.filter(pub_date__year=2005).delete()

在 Django 删除对象时，会模仿 SQL 约束 ON DELETE CASCADE 的行为，换句话说，删除一个对象时也会删除与它相关联的外键对象。
要注意的是： delete() 方法是 QuerySet 上的方法，但并不适用于 Manager 本身。
这是一种保护机制，是为了避免意外地调用 Entry.objects.delete() 方法导致 所有的 记录被误删除。
如果你确认要删除所有的对象，那么你必须显式地调用：
Entry.objects.all().delete()

如果不想级联删除，可以设置为:
pubHouse = models.ForeignKey(to='Publisher', on_delete=models.SET_NULL, blank=True, null=True)




11.1.1  JavaScript基本语法





                                            JS的引入方式
内接式
<script type="text/javascript">

</script>

外接式
<script type="text/javascript" src = './index.js'></script>

注释
//  单行注释
/*
	多行注释
*/

调试语句
alert(''); 弹出警告框
console.log('');  控制台输出

变量的声明
在js中使用var关键字 进行变量的声明,注意 分号作为一句代码的结束符。
定义变量：var就是一个关键字，用来定义变量。所谓关键字，就是有特殊功能的小词语。关键字后面一定要有空格隔开。
变量的赋值：等号表示赋值，将等号右边的值，赋给左边的变量。
变量名：我们可以给变量任意的取名字。
变量的命名规范
变量名有命名规范：只能由英语字母、数字、下划线、美元符号$构成，且不能以数字开头，并且不能是JavaScript保留字。
下列的单词叫做保留字，就是说不允许当做变量名，不用记：
bstract、boolean、byte、char、class、const、debugger、double、enum、export、extends、final、float、goto
implements、import、int、interface、long、native、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile

基本数据类型
数值类型:number
如果一个变量中，存放了数字，那么这个变量就是数值型的
在JavaScript中，只要是数，就是数值型(number)的。无论整浮、浮点数（即小数）、无论大小、无论正负，都是number类型的。
字符串类型:string
布尔类型：boolean
布尔类型：boolean
未定义：undefined
复杂(引用)数据类型
Function
Object
Arrary
String
Date
运算符
赋值运算符
算数运算符
比较运算符
数据类型转换


将number类型转换成string类型
  隐式转换

  强制转换：.toString()



将string类型转换成number类型
Number()


任何的数据类型都可以转换为boolean类型


流程控制
if
if-else
if-else-else
逻辑与&&、 逻辑或||
switch 语句
while循环
do-while循环
for循环
常用内置对象(复杂数据类型)（重点）
数组Array

字符串string

Math内置对象

函数（重点）
函数：就是把将一些语句进行封装，然后通过调用的形式，执行这些语句。
函数的作用：
解决大量的重复性的语句

简化编程，让编程模块化

伪数组arguments
arguments代表的是实参。有个讲究的地方是：arguments只在函数中使用。
    fn(2,4);
    fn(2,4,6);
    fn(2,4,6,8);

    function fn(a,b,c) {
        console.log(arguments);
        console.log(fn.length);         //获取形参的个数
        console.log(arguments.length);  //获取实参的个数

        console.log("----------------");
    }


之所以说arguments是伪数组，是因为：arguments可以修改元素，但不能改变数组的长短。
对象Object(重点)
1.使用Object或对象字面量创建对象
2.工厂模式创建对象
3.构造函数模式创建对象
4.原型模式创建对象
Date日期对象
创建日期对象只有构造函数一种方式，使用new关键字.

JSON(重点)
JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。同时，JSON是 JavaScript 原生格式，这意味着在 JavaScript 中处理 JSON数据不须要任何特殊的 API 或工具包。
JSON字符串转换JSON对象
var jsonObject= jQuery.parseJSON(jsonstr);

JSON对象转化JSON字符串
var jsonstr =JSON.stringify(jsonObject );




13.2.6 会话跟踪技术





                                            HTTP协议是无状态协议，也就是说每个请求都是独立的！无法记录前一次请求的状态。
但HTTP协议中可以使用Cookie来完成会话跟踪！
在Web开发中，使用session来完成会话跟踪，session底层依赖Cookie技术。
Cookie概述
Cookie是key-value结构，类似于一个python中的字典。
随着服务器端的响应发送给客户端浏览器，然后客户端浏览器会把Cookie保存起来，当下一次再访问服务器时把Cookie再发送给服务器。
Cookie是由服务器创建，然后通过响应发送给客户端的一个键值对。
客户端会保存Cookie，并会标注出Cookie的来源（哪个服务器的Cookie）。
当客户端向服务器发出请求时会把所有这个服务器Cookie包含在请求中发送给服务器，这样服务器就可以识别客户端了！

Cookie规范
Cookie大小上限为4KB；

一个服务器最多在客户端浏览器上保存20个Cookie；
一个浏览器最多保存300个Cookie；
上面的数据只是HTTP的Cookie规范，但在浏览器大战的今天，一些浏览器为了打败对手，为了展现自己的能力起见，可能对Cookie规范“扩展”了一些，例如每个Cookie的大小为8KB，最多可保存500个Cookie等！但也不会出现把你硬盘占满的可能！

注意，不同浏览器之间是不共享Cookie的。
Cookie与HTTP头
Cookie是通过HTTP请求和响应头在客户端和服务器端传递的。

Cookie：请求头，客户端发送给服务器端；
格式：Cookie: a=A; b=B; c=C。即多个Cookie用分号离开；
Set-Cookie：响应头，服务器端发送给客户端；
一个Cookie对象一个Set-Cookie： Set-Cookie: a=A Set-Cookie: b=B Set-Cookie: c=C

Cookie的覆盖：如果服务器端发送重复的Cookie那么会覆盖原有的Cookie。
django中的cookie语法
设置cookie：
rep = HttpResponse(...) 或 rep ＝ render(request, ...) 或 rep ＝ redirect()
rep.set_cookie(key,value,...)
rep.set_signed_cookie(key,value,salt='加密盐',...)

源码：
class HttpResponseBase:
        def set_cookie(self, key,                 键
        　　　　　　　　　　　　 value='',            值
        　　　　　　　　　　　　 max_age=None,        超长时间
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　cookie需要延续的时间（以秒为单位）
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　如果参数是\ None`` ，这个cookie会延续到浏览器关闭为止。
        　　　　　　　　　　　　 expires=None,        超长时间
       　　　　　　　　　　　　　　　　　　　　　　　　　　expires默认None ,cookie失效的实际日期/时间。
    　　　　　　　　　　　　　　　　　　　　　　　　　　　　
        　　　　　　　　　　　　 path='/',           Cookie生效的路径，
                                                 浏览器只会把cookie回传给带有该路径的页面，这样可以避免将
                                                 cookie传给站点中的其他的应用。
                                                 / 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问
        　　　　　　　　　　　　
                             domain=None,         Cookie生效的域名

                                                  你可用这个参数来构造一个跨站cookie。
                                                  如， domain=".example.com"
                                                  所构造的cookie对下面这些站点都是可读的：
                                                  www.example.com 、 www2.example.com
        　　　　　　　　　　　　　　　　　　　　　　　　　和an.other.sub.domain.example.com 。
                                                  如果该参数设置为 None ，cookie只能由设置它的站点读取。
        　　　　　　　　　　　　 secure=False,        如果设置为 True ，浏览器将通过HTTPS来回传cookie。
        　　　　　　　　　　　　 httponly=False       只能http协议传输，无法被JavaScript获取
                                                 （不是绝对，底层抓包可以获取到也可以被覆盖）
        　　　　　　　　　　): pass

获取cookie：
request.COOKIES

删除cookie：
response.delete_cookie("cookie_key",path="/",domain=name)

Session
Session是服务器端技术，利用这个技术，服务器在运行时可以 为每一个用户的浏览器创建一个其独享的session对象，由于 session为用户浏览器独享，所以用户在访问服务器的web资源时 ，可以把各自的数据放在各自的session中，当用户再去访问该服务器中的其它web资源时，其它web资源再从用户各自的session中 取出数据为用户服务。

django中session语法
1、设置Sessions值
          request.session['session_name'] ="admin"
2、获取Sessions值
          session_name = request.session["session_name"]
3、删除Sessions值
          del request.session["session_name"]
4、flush()
     删除当前的会话数据并删除会话的Cookie。
     这用于确保前面的会话数据不可以再次被用户的浏览器访问
5、get(key, default=None)
  fav_color = request.session.get('fav_color', 'red')
6、pop(key)
  fav_color = request.session.pop('fav_color')
7、keys()
8、items()
9、setdefault()
10 用户session的随机字符串
        request.session.session_key

        # 将所有Session失效日期小于当前日期的数据删除
        request.session.clear_expired()

        # 检查 用户session的随机字符串 在数据库中是否
        request.session.exists("session_key")

        # 删除当前用户的所有Session数据
        request.session.delete("session_key")

        request.session.set_expiry(value)
            * 如果value是个整数，session会在些秒数后失效。
            * 如果value是个datatime或timedelta，session就会在这个时间后失效。
            * 如果value是0,用户关闭浏览器session就会失效。
            * 如果value是None,session会依赖全局session失效策略。

session配置
Django默认支持Session，并且默认是将Session数据存储在数据库中，即：django_session 表中。

a. 配置 settings.py

    SESSION_ENGINE = 'django.contrib.sessions.backends.db'   # 引擎（默认）

    SESSION_COOKIE_NAME ＝ "sessionid"                       # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）
    SESSION_COOKIE_PATH ＝ "/"                               # Session的cookie保存的路径（默认）
    SESSION_COOKIE_DOMAIN = None                             # Session的cookie保存的域名（默认）
    SESSION_COOKIE_SECURE = False                            # 是否Https传输cookie（默认）
    SESSION_COOKIE_HTTPONLY = True                           # 是否Session的cookie只支持http传输（默认）
    SESSION_COOKIE_AGE = 1209600                             # Session的cookie失效日期（2周）（默认）
    SESSION_EXPIRE_AT_BROWSER_CLOSE = False                  # 是否关闭浏览器使得Session过期（默认）
    SESSION_SAVE_EVERY_REQUEST = False                       # 是否每次请求都保存Session，默认修改之后才保存（默认）




10.2.2  选择器





                                            基本选择器

标签选择器:tag
类选择器:.class
ID选择器:.id
通用选择器:*

组合选择器

后代选择器: (空格)
儿子选择器:>
毗邻选择器:+
弟弟选择器:~

属性选择器

根据属性查找:[title]
根据属性和值查找:[title=“value”]

分组选择器
当多个元素的样式相同的时候，我们没有必要重复地为每个元素都设置样式，我们可以通过在多个选择器之间使用逗号分隔的分组选择器来统一设置元素样式。
伪类选择器
没有访问的超链接a标签样式：
a:link {
  color: blue;
}

访问过的超链接a标签样式：
a:visited {
  color: gray;
}

鼠标悬浮在元素上应用样式：
a:hover {
  background-color: #eee;
}

鼠标点击瞬间的样式：
a:active {
  color: green;
}

input输入框获取焦点时样式：
input:focus {
  outline: none;
  background-color: #eee;
}

伪元素选择器
first-letter：用于为文本的首字母设置特殊样式。
before：用于在元素的内容前面插入新内容。
after：用于在元素的内容后面插入新内容。
选择器的优先级

还有一种不讲道理的!import方式来强制让样式生效，但是不推荐使用。
因为大量使用!import的代码是无法维护的。



13.2.2  路由层——URL控制器





                                            路由分发
URL控制器本质就是URL与相应视图函数的映射表，通过这种方式告诉Django，对于客户端发来的某个URL应该调用哪一个函数来处理。
在Django中，URL控制器为Matrix>urls.py文件：
from django.contrib import admin
from django.urls import path
from index.views import *

# URL控制器
urlpatterns = [
    path('admin/', admin.site.urls),
]

urlpatterns这个列表就是URL控制器，可以看到，Django默认添加了一个路径，我们可以通过浏览器访问尝试一下，访问：http://127.0.0.1:8000/admin。

这个页面是管理员登录页面，我们暂时用不到。
但是通过这个这个例子我们可以了解，浏览器输入的URL实际上就对应urlpatterns里的路径和函数。
我们访问的是http://127.0.0.1:8000/admin，Django会帮我们讲http协议，IP/端口剥离掉，取出admin，这是一个路径。
Django接收这个路径之后，在urlpatterns中一一对比，找到了path('admin/', admin.site.urls),，正好对应admin路径，然后调用admin.site.urls函数返回上述页面，至于具体的实现逻辑我们不深究，我们可以模仿这种形式来让浏览器根据URL访问得到我们设置的内容。
1.在index>views.py中编写一个index页面处理函数：
from django.shortcuts import render
from django.shortcuts import HttpResponse


# Create your views here.
def index(request):
	return HttpResponse('<h1>Index</h1>')


request是Django帮我们解析好的请求内容，默认每一个视图函数都需要加上那么一个参数。
HttpResponse帮我们封装好了响应首行和响应头，参数直接输入响应体即可。
2.将访问index的请求分发到index应用下：
index是一个应用，这个应用可能拥有很多功能，一个功能就对应一个URL路径，而且后续还要添加其它的应用，因此不能将所有的映射都放在Matrix>urls下，而是要经过Matrix>urls分发到各个应用的urls文件中。
将Matrix>urls.py复制一份到index目录中，然后分别对两个urls.py做一些处理：
# index > urls.py

from django.urls import path
from index import views

# URL控制器
urlpatterns = [
    path('home/', views.index),
]


# Matrix > urls.py

from django.contrib import admin
from django.urls import include
from django.urls import path

# URL控制器
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', include('index.urls')),
]

path('index/', views.index)的意思是当我URL的路径为index时，调用index包下view模块的index函数，而这个函数就是我们上边已经定义完了。
这样我们就可以通过浏览器访问了，URL为：http://127.0.0.1:8000/index/home，可以看到如下页面：

有名分组
在路由配置的过程中，可以使用正则表达式。
比如有这么一个场景：博客系统，每一篇博客就对应一个URL，我如果写了一千篇博客，在urls.py中就得写一千个映射关系，这显然是极其愚蠢的，因此，我们对每一篇博客进行编号，然后可以使用正则表达式匹配。
新建一个blog应用：
在pycharm菜单栏点击Run manage.py Task，

然后会在控制台弹出一个终端，输入：
startapp blog

这样，就创建好了一个blog应用。
我们的需求是，根据日期查询博客，筛选条件有年、月、日。
准备工作，在Matrix>urls.py中将blog路由分发到blog>urls.py中，然后在blog>urls.py编写映射关系，最后在blog>views.py中编写视图函数。
# Matrix>urls.py

from django.contrib import admin
from django.urls import include
from django.urls import path

# URL控制器
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', include('index.urls')),
    path('blog/', include('blog.urls')),
]


# blog>urls.py

from django.urls import re_path
from django.urls import path
from blog import views

# URL控制器
urlpatterns = [
    # 匹配年份
    re_path('(?P<year>[0-9]{4})/$', views.year_view),
    # 匹配年月
    re_path('(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_view),
    # 匹配年月日
    re_path('(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<day>[0-9]{2})/$', views.day_view),
]


这里要注意，因为我们使用了正则表达式，所以做映射的时候要使用re_path，另外我们给正则表达式添加了一些内容：(?P<year>[0-9]{4})。
这样会将表达式匹配到的结果作为参数传递给视图函数，?P<year>的意思是将匹配到的参数命名为year，这样好根据参数直接去数据库里查找，筛选相应的日次。
对正则表达式匹配到的参数进行命名实际上就是将其转换为关键字参数，此时，在view.py文件中编写视图函数的参数就必须跟?P一样。
正则表达式匹配到的结果有几个就传几个，因此在blog>views.py编写视图函数的时候除了request参数外还要添加别的参数，注意一定要跟前边定义的一样。
# blog>views.py

from django.shortcuts import HttpResponse
from django.shortcuts import render


# Create your views here.
def year_view(request, year):
	return HttpResponse('<h1>%s</h1>' % year)


def month_view(request, year, month):
	return HttpResponse('<h1>%s - %s</h1>' % (year, month))


def day_view(request, year, month, day):
	return HttpResponse('<h1>%s - %s - %s</h1>' % (year, month, day))


http://127.0.0.1:8000/blog/2020/的访问结果为：

http://127.0.0.1:8000/blog/2020/03/的访问结果为：

http://127.0.0.1:8000/blog/2020/03/06/的访问结果为：

这种在路由分发的时候提取信息传递给视图函数的行为就叫做有名分组。
反向解析
假设有那么一个场景：前端登录页面在登录的时候需要通过form表单向我服务器的login函数发送post请求，请求地址为：127.0.0.1:8000/index/login/。
这里只给出登录部分的代码，可以更改后嵌入到网页中：
<form action="http://127.0.0.1:8000/index/login/" method="post">
    <div class="form-group">
        <label for="login-student-id" class="control-label">Student ID:</label>
        <input type="text" class="form-control" id="login-student-id" name="login-student-id"
               autocomplete="current-student-id">
    </div>
    <div class="form-group">
        <label for="login-password" class="control-label">Password:</label>
        <input type="password" class="form-control" id="login-password" name="login-password"
               autocomplete="current-password">
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <input class="btn btn-primary" type="submit" value="Login"/>
    </div>
</form>

注意，在Django的默认配置中是不接收post发送数据的，需要更改一个配置，在Matrix > settings.py中：
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 将下面这行注释掉
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

然后在index>urls.py中添加login映射：
from django.urls import path
from index import views

# URL控制器
urlpatterns = [
    path('home/', views.home),
    path('login/', views.login),
]


最后在index>views.py中编写login的视图函数：
# 处理登录操作
def login(request):
	# 如果请求方式是post
	if request.method == 'POST':
		# 通过request.POST.get(name)可以直接获取请求体中的数据
		login_student_id = request.POST.get('login-student-id')
		login_password = request.POST.get('login-password')
		print('login_student_id = ', login_student_id)
		print('login_password = ', login_password)
		# 暂时先写死，后续再判断
		if login_student_id == '18023309' and login_password == '123456':
			return HttpResponse('<h1 style="color: green">Success</h1>')
		else:
			return HttpResponse('<h1 style="color: red">Wrong user name or password</h1>')


正确尝试：


错误尝试：


目前功能良好，但如果后端更改了URL控制器：
from django.urls import path
from index import views

# URL控制器
urlpatterns = [
    path('home/', views.home),
    path('logins/', views.login),
]


URL控制器中只是将路径修改了一下，此时前端每一个请求 /index/login/ 的表单都需要更改其action，这显然是极其麻烦的，稍不注意就会出错。
在使用Django项目时，一个常见的需求是获得URL的最终形式，直接嵌入到HTML文档中或者用于处理服务端的导航。
在需要URL的地方，对于不同层级，Django提供不同的工具用于URL反查：

在HTML文档中，使用URL模板标签
在Python中，使用django.urls.reverse()函数

对于HTML文档获取后端的URL：
# index > urls.py

from django.urls import path
from index import views

# URL控制器
urlpatterns = [
    path('home/', views.home),
    # 给登录映射起一个名字
    path('login/', views.login, name='login'),
]


{#通过{%  %}模板可以获取后端定义的URL#}
<form action="{% url 'login' %}" method="post">
	<div class="form-group">
	    <label for="login-student-id" class="control-label">Student ID:</label>
	    <input type="text" class="form-control" id="login-student-id" name="login-student-id"
	           autocomplete="current-student-id">
	</div>
	<div class="form-group">
	    <label for="login-password" class="control-label">Password:</label>
	    <input type="password" class="form-control" id="login-password" name="login-password"
	           autocomplete="current-password">
	</div>
	<div class="modal-footer">
	    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
	    <input class="btn btn-primary" type="submit" value="Login"/>
	</div>
</form>

对于Python中获取前端URL：
名称空间
当我们的项目存在多个应用时，会给很多URL起名字，由于name没有作用域，Django在反向解析URL的时候会在项目全局顺序搜索，当查找到第一个name指定URL时，立即返回。
但如果在不同的应用中的URL定义了相同的name时，可能会导致URL反向解析错误，为了避免这种情况，引入了名称空间。
名称空间（namespace）是表示标识符的作用域。
同一个标识符可以在多个名称空间中定义，在不同的名称空间中的含义互不相干。
Matrix > urls.py:
from django.contrib import admin
from django.urls import include
from django.urls import path

# URL控制器
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', include(('index.urls', 'index'), namespace='index')),
    path('blog/', include(('blog.urls', 'blog'), namespace='blog')),
]


index > urls.py:
urlpatterns = [
	path('index/', index, name="index"),
]

blog > urls.py:
urlpatterns = [
	path('index/', index, name="index"),
]

index > views.py:
from django.core.urlresolvers import reverse


def index(request):
	return HttpResponse(reverse("app01:index"))

blog > views.py
from django.core.urlresolvers import reverse


def index(request):
	return HttpResponse(reverse("app02:index"))

path特性
我们从URL中提取有用信心的时候使用的是re_path，顾名思义就是可以使用正则表达式，但Django2.0版本提供了path方法，不使用正则表达式也可以提取有用信息。
并且，path方法可以直接将提取信息转换为对应的数据类型，我们可以将上述的使用正则表达式匹配年份的代码稍加改动：
blog > urls.py:
from django.urls import path
from blog import views

# URL控制器
urlpatterns = [
    # 匹配年份
    path('<int:year>/$', views.year_view),
    # 匹配年月
    path('<int:year>/<int:month>/$', views.month_view),
    # 匹配年月日
    path('<int:year>/<int:month>/<int:day>/$', views.day_view),
]


blog > views.py
from django.shortcuts import HttpResponse
from django.shortcuts import render


# Create your views here.
def year_view(request, year):
	print('type of year = ', type(year))
	return HttpResponse('<h1>%s</h1>' % year)


def month_view(request, year, month):
	print('type of year = ', type(year))
	print('type of month = ', type(month))
	return HttpResponse('<h1>%s - %s</h1>' % (year, month))


def day_view(request, year, month, day):
	print('type of year = ', type(year))
	print('type of month = ', type(month))
	print('type of day = ', type(day))
	return HttpResponse('<h1>%s - %s - %s</h1>' % (year, month, day))


blog > urls.py:
from django.urls import path
from blog import views

# URL控制器
urlpatterns = [
    # 匹配年份
    path('<year>/', views.year_view),
    # 匹配年月
    path('<int:year>/<int:month>/', views.month_view),
    # 匹配年月日
    path('<int:year>/<int:month>/<int:day>/', views.day_view),
]


<>可以帮我们从URL的固定位置捕获一个值并传递给视图函数、
<int:year>可以帮我们自动捕获一个值转换为数字并命名为year同时传递给视图函数。
它的基本规则是：

使用尖括号<>从URL中捕获值
捕获值可以包含一个转换器类型（converter type），如果没有，匹配任何字符串
无需添加前导/

path转换器
Django有5种默认的转换器：

str：匹配除路径分隔符（/）之外的非空字符串，这也是默认的形式；
int：匹配正整数，包括0；
slug：匹配字母、数字、-、_组成的字符串；
uuid：匹配格式化的uuid；
path：匹配任何飞空字符串

默认的转换器无非就是将正则表达式封装了起来，因此，当默认转换器无法满足需求的时候，可以使用正则表达式自定义转换器。
转换器其实就是一个类或接口，自定义转换器有如下三点要求：

regex：类属性，字符串类型；
to_python(self, value)方法，value是由regex匹配到的字符串，返回具体的python变量值，以供Django传递到相应的视图函数中；
to_url(self, value)方法，value是具体的python变量值，返回其字符串，用于URL反向引用

例子：
class FourDigitYearConverter:
    regex = '[0-9]{4}'
    def to_python(self, value):
        return int(value)
    def to_url(self, value):
        return '%04d' % value

使用register_converter 将其注册到URL配置中：
from django.urls import register_converter, path
from . import converters, views


# 必须要给转换器起一个名字
register_converter(converters.FourDigitYearConverter, 'yyyy')


urlpatterns = [
    path('articles/2003/', views.special_case_2003),
    path('articles/<yyyy:year>/', views.year_archive),
    ...
]




10.2.1  CSS介绍与引入





                                            CSS介绍
CSS是指层叠样式表(Cascading Style Sheets)，样式定义如何显示HTML元素，样式通常又会存在于样式表中。也就是说把HTML元素的样式都统一收集起来写在一个地方或一个CSS文件里。
使用css的目的就是让网页具有美观一致的页面，另外一个最重要的原因是内容与格式分离 在没有CSS之前，我们想要修改HTML元素的样式需要为每个HTML元素单独定义样式属性，当HTML内容非常多时，就会定义很多重复的样式属性，并且修改的时候需要逐个修改，费心费力。是时候做出改变了，所以CSS就出现了。
CSS的出现解决了下面两个问题：

将HTML页面的内容与样式分离。
提高web开发的工作效率。

css的优势
1.内容与表现分离

2.网页的表现统一，容易修改

3.丰富的样式，使页面布局更加灵活

4.减少网页的代码量，增加网页浏览器速度，节省网络带宽

5.运用独立页面的css,有利于网页被搜索引擎收录

引入方式
内嵌方式
<!doctype html>
<html>
    <head>
        <meta charset="utf8">
        <style>
            p {
                color: red;
            }
        </style>
    </head>
    <body>
        <p>这是一个p标签！</p>
    </body>
</html>

行内样式
<!doctype html>
<html>
	<head>
		<meta charset="utf8">
	</head>
	<body>
		<p style="color: blue;">这是一个p标签！</p>
	</body>
</html>

外联样式表-链接式
<!doctype html>
<html>
    <head>
        <meta charset="utf8">
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <p>这是一个p标签！</p>
    </body>
</html>

外联样式表-@import url()方式 导入式
@import url(other.css)

链接式与导入式的区别
1、<link/>标签属于XHTML,@import是属性css2.1
2、使用<link/>链接的css文件先加载到网页当中，再进行编译显示
3、使用@import导入的css文件，客户端显示HTML结构，再把CSS文件加载到网页当中
4、@import是属于CSS2.1特有的，对于不兼容CSS2.1的浏览器来说就是无效的



10.1.2 body标签





                                            想要在网页上展示出来的内容一定要放在body标签中。
<h1>~<h6> 标题标签
<h1>~<h6>标签可定义标题。
<h1> 定义最大的标题。
<h6> 定义最小的标题。
由于 h 元素拥有确切的语义，因此要慎重地选择恰当的标签层级来构建文档的结构。
一般不用标题标签来改变同一行中的字体大小。
相反，应当使用css来定义达到漂亮的显示效果。
标题标签通常用来制作文章或网站的标题。
<p> 段落标签
<p>，paragraph的简写，定义段落。

跟普通文本一样，但我们可以通过css来设置当前段落的样式
独占一行，块级元素

<a> 超链接标签
超级链接<a>标记代表一个链接点，是英文anchor（锚点）的简写。
它的作用是把当前位置的文本或图片连接到其他的页面、文本或图像。
target:_blank 在新的网站打开链接的资源地址
target：_self 在当前网站打开链接的资源地址
title: 表示鼠标悬停时显示的标题
目标文档为下载资源 例如：href属性值，指定的文件名称，就是下载操作(rar、zip等)
子邮件链接 前提：计算机中必须安装邮件客户端，并且配置好了邮件相关信息。 例如：<a href=“mailto:zhaoxu@tedu.cn”>联系我们</a>
返回页面顶部的空链接或具体id值的标签 例如：<a href="#">内容</a>或<a href="#id值">内容</a>
javascript:是表示在触发<a>默认动作时，执行一段JavaScript代码。 例如：<a href=“javascript:alert()”>内容</a>
javascript:;表示什么都不执行，这样点击<a>时就没有任何反应 例如：<a href=“javascrip:;”>内容</a>
<ul>,<ol> 列表标签
<ul>:unordered lists的缩写 无序列表
<ol>:ordered listsde的缩写 有序列表
<div> 盒子标签
<div>可定义文档的分区 division的缩写。
<img/> 图片标签
<img src=“图片地址” alt=“图片加载失败时显示的内容” title = “提示信息” />
<br> 换行标签
<hr>分割线
<table> 表格标签

<form> 表单标签
表单是一个包含表单元素的区域。
表单元素是允许用户在表单中输入内容，比如：文本域(textarea)、输入框(input)、单选框（）。



第13章  Django框架





                                            CS架构
在之前我们讲项目：基于FTP的多用户文件传输系统的时候简单介绍过CS架构，再简单复习一下。
C就是Client客户端，S就是Server服务端，而在WEB应用中，客户端就是我们的浏览器，而且已经是一个非常完善的客户端了，所以在WEB应用中我们所要实现的就是服务端应用。
试想一下，当我们通过浏览器访问网页的时候，实际上就是在地址栏输入一个URL，在网络畅通并且相应的服务器应用程序运行正常的前提下，一按回车就可以看到一个页面。
比如，当我们通过URL访问百度的时候，在地址栏输入www.baidu.com，这是一个域名，然后通过DNS服务将域名转换为IP地址。

我们说一个固定的IP地址就对应到世界上一台固定的计算机，百度的域名转换为IP地址之后，就可以通过网络找到百度的服务器，然后告诉它，我想要一个百度的主页。
服务器通过对客户端发送的请求进行处理之后，获取请求的目标文件，然后将文件进行整合，再通过网络给客户端发送一个响应文件。
响应文件，其实就是我们之前讲的HTML文档、CSS文件、JavaScript脚本和图片等资源。
客户端，也就是浏览器接收到响应文件之后，根据显示规则，将文件渲染到我们的浏览器上，这样，我们就看到了百度的主页。

Django是什么
那么Django是什么呢？
一句话讲：Django是一个WEB应用框架。
所谓应用，说白了就是具有某个功能的程序，比如FTP文件传输系统，就是一个具有传输文件和执行命令功能的应用。
而框架，就是提前定义好的一个结构，只需要往框架里填写你的业务逻辑就可以实现具体的功能。
结合起来，WEB应用框架，就是将WEB和应用连接起来，实现前端WEB和后端应用数据动态交互的结构。



10.2.4  练习题





                                            1.列举你知道的css选择器

标签选择器：通用选择 *、单标签、多标签
属性选择器：id选择器、class选择器、属性选择器
伪类选择器：锚伪类、:lang 伪类、:first-child伪类
伪元素选择器：:before、:after

2.分别阐述类选择器和id选择器的作用
类选择器，通过样式类选择元素；id选择器通过元素的ID值选择元素。
区别是id属性是唯一的，而class属性可以有多个。
3.如何重置网页样式
body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, form, fieldset, input, textarea, p, blockquote, th, td {
    margin: 0;
    padding: 0;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}

fieldset, img {
    border: 0;
}

address, caption, cite, code, dfn, em, strong, th, var {
    font-style: normal;
    font-weight: normal;
}

ol, ul {
    list-style: none;
}

caption, th {
    text-align: left;
}

h1, h2, h3, h4, h5, h6 {
    font-size: 100%;
    font-weight: normal;
}

q:before, q:after {
    content: '';
}

abbr, acronym {
    border: 0;
}

4.对盒模型是怎么理解的？它们的属性有哪些？
margin：外边距
border：边框
padding：内边距
width：盒子宽度
height：盒子高度

5.什么是标准文档流？
文档流指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。
并最终窗体自上而下分成一行行，并在每行中从左至右的顺序排放元素。
6.浮动盒子的特点？浮动的好处？如何清除浮动？
元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。
元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变现的好像浮动元素不存在一样。
浮动的缺点：
无法撑起父元素。
同级别的兄弟元素会围绕在周围。
使用伪元素清除浮动:after（推荐使用）
//在css中添加:after伪元素
.parent:after{
    content:"";
    visibility:hidden;
    display:block;
    width:100%;
    height:0;
    clear:both;
}

7.精灵图的好处是什么？

减少图片的字节
减少了网页的http请求，从而大大的提高了页面的性能
解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。
更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。

8.定位有几种？阐述一下“父相子绝”定位是怎样理解的？
相对定位，绝对定位，固定定位
“父相子绝”：父亲相对定位，不会浮动，可以固定一个位置。儿子绝对定位，利用其浮动现象，可以设置子元素的位置。
9.什么样的盒子脱离了文档标准流？脱离文档标准流的盒子的特点是怎样的？
浮动的盒子，绝对定位的盒子都会脱离标准文档流，这样盒子，会浮动起来，提升元素层级。
10.z-index的规则是怎样的？

z-index值大的，显示在上层
从父现象，父亲的z-index值越大，子类即使z-index值小，子类元素也会显示在上层
只有设置了定位的元素，才能设置z-index
默认的z-index都是0，z-index值相同，在html页面中，设置在后面的会显示在上面

11.display属性值有哪些？分别描述他们的意思？

block:是块元素，单独占据一行,可以设置宽高
inline:行内元素，不会单独占一行，不可设置宽高，但如果设置float或定位，可以设置宽高
inline-block:不会单独占一行，可以设置宽高




13.1.2  WEB应用程序





                                            了解了http协议之后，我们就可以制作一个简单的WEB应用程序了。
在之前学习的网络编程的前提下，我们知道，浏览器就相当于一个socket客户端，服务器相当于一个socket服务端。
客户端既然就是浏览器那么就不需要我们再来实现了，我们只需要编写服务端就可以了。
import socket

if __name__ == '__main__':
	# 实例化socket对象
	server = socket.socket()
	# 绑定服务端IP和端口
	server.bind(("127.0.0.1", 7777))
	# 设置最大监听数
	server.listen(7)

	while True:
		print('Server waiting...')
		# 与客户端请求建立链接
		connect, address = server.accept()
		# 接收客户端数据
		data = connect.recv(1024)
		print('data = %s' % data)

		# 读取要返回的HTML文档，注意，一定要以rb的模式读，因为要返回bytes类型的数据
		with open('Hello_Http.html', 'rb') as f:
			html = f.read()

		# 响应数据要设置响应首行，否则浏览器无法解析，响应头可以省略，响应首行与响应体之间以\r\n\r\n分隔
		connect.send(b'HTTP/1.1 200OK\r\n\r\n%s' % html)
		connect.close()


相应的HTML文档为：
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Hello Http</title>
</head>
<body>
<img src="https://www.baidu.com/img/bd_logo1.png" alt='百度一下'>
<form action="http://127.0.0.1:7777/" method="post">
    <span>用户名：</span>
    <label>
        <input type="text" name="username">
    </label>
    <span>密码：</span>
    <label>
        <input type="password" name="password">
    </label>
    <label>
        <input type="submit">
    </label>
</form>
</body>
</html>

浏览器显示效果为：

使用form表单提交数据之后终端的输出：
Server waiting...
data = b'GET / HTTP/1.1\r\nHost: 127.0.0.1:7777\r\nConnection: keep-alive\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36\r\nSec-Fetch-Dest: document\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nSec-Fetch-Site: none\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n\r\n'
Server waiting...
data = b'GET /favicon.ico HTTP/1.1\r\nHost: 127.0.0.1:7777\r\nConnection: keep-alive\r\nPragma: no-cache\r\nCache-Control: no-cache\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36\r\nSec-Fetch-Dest: image\r\nAccept: image/webp,image/apng,image/*,*/*;q=0.8\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: no-cors\r\nReferer: http://127.0.0.1:7777/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n\r\n'
Server waiting...
data = b'POST / HTTP/1.1\r\nHost: 127.0.0.1:7777\r\nConnection: keep-alive\r\nContent-Length: 30\r\nCache-Control: max-age=0\r\nOrigin: http://127.0.0.1:7777\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36\r\nSec-Fetch-Dest: document\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nReferer: http://127.0.0.1:7777/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n\r\nusername=Alex&password=1234567'
Server waiting...
data = b'GET /favicon.ico HTTP/1.1\r\nHost: 127.0.0.1:7777\r\nConnection: keep-alive\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36\r\nSec-Fetch-Dest: image\r\nAccept: image/webp,image/apng,image/*,*/*;q=0.8\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: no-cors\r\nReferer: http://127.0.0.1:7777/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n\r\n'
Server waiting...

第一次和第二次get请求为通过浏览器请求页面，包含以下内容：
请求首行：
GET / HTTP/1.1

\r\n

请求头：
Host: 127.0.0.1:7777\r\nConnection: keep-alive\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36\r\nSec-Fetch-Dest: document\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nSec-Fetch-Site: none\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7

\r\n\r\n

请求体：
无

请求首行与请求头以\r\n为分隔，请求头中的数据也都已\r\n为分隔，请求头与请求体以\r\n\r\n为分隔。
第三个post请求为浏览器通过form表单发送给服务端的请求，包含以下内容：
请求首行：
POST / HTTP/1.1

\r\n

请求头：
Host: 127.0.0.1:7777\r\nConnection: keep-alive\r\nContent-Length: 30\r\nCache-Control: max-age=0\r\nOrigin: http://127.0.0.1:7777\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36\r\nSec-Fetch-Dest: document\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nSec-Fetch-Site: same-origin\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nReferer: http://127.0.0.1:7777/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7

\r\n\r\n

请求体：
username=Alex&password=1234567

我们的服务端应用程序设置为不管发起何种请求，返回的响应数据都是唯一的：
HTTP/1.1 200OK\r\n\r\n%s

响应首行：
HTTP/1.1 200OK

响应头：
无

\r\n\r\n

响应体：
(HTML文档)




13.2.1  Django安装与使用





                                            Django安装
Django属于第三方库，因此需要安装。
安装命令：
pip install django

下载缓慢的话可以通过阿里源安装：
pip install -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com django

如果你不想在整个python环境安装Django，也可以创建虚拟环境，pycharm在新建Django项目的时候可以直接在虚拟环境中安装好Django。
Django基本使用
新建一个Django项目：

pycharm会帮我们默认生成很多文件，可以看一下目录结构：

我们来具体看一下：
index目录：应用目录，一个应用就对应这样一个文件夹，里边包括很多调试和应用文件，目前能够使用到的只有两个，models.py用于存取数据库，views.py用于编写视图函数。
Matrix目录：项目配置目录，所有跟整个项目有关的配置都放在这个文件夹里，目前能够使用到的只有两个，settings.py用于设置数据库、调试以及其它一些工作变量，urls.py用于路由分发，将URL模式映射到应用程序。
templates目录：模板层，简单的说就是用来存放HTML文档的文件夹。
venv目录：这是我们创建的虚拟环境，可以将项目的所有的库文件都存放在这里。
manage.py：这是Django的项目工具，可以调用Django shell和数据库，就相当于入口文件。
除了这些Django和pycharm帮我们默认创建好的文件之外，我们还要在Matrix同级目录下创建一个static文件夹，用来存放CSS、JavaScript、Image等静态文件，同时，要修改Matrix>settings.py，在最后加上static的配置路径：
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]



虽然到现在一行代码都没有写，但实际上我们的Django项目已经可以启动起来了。
点击Django项目的运行按钮：

默认是在127.0.0.1:8000，也就是我们本机地址的8000端口运行，如果想要更改的话，可有进行配置：


当pycharm终端有输出如下内容时，证明我们的Django项目已经启动成功了，点击http://127.0.0.1:8000/会在我们的默认浏览器打开Django项目。
March 06, 2020 - 08:51:22
Django version 3.0.3, using settings 'Matrix.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.





13.1.1  http协议





                                            http协议简介
计算机与网络上的其它设备要相互通信，双方就必须基于相同的方法。
比如,如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。
不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则，而我们就把这种规则称为协议(Protocol)。
HTTP(Hyper Text Transfer Protocol)，即超文本传输协议，是用于万维网服务器与本地浏览器之间传输超文本的协议。
http协议于1990年提出，经过几年的使用和发展，得到不断地完善和扩展，它是一个应用层的面向对象的协议，由于其简捷、快速的特点，非常适用于分布式超媒体信息系统，
http协议特性
1.基于TCP/IP
    http协议是基于TCP/IP协议上的应用层协议。
2.基于请求-响应模式
    http协议规定，请求从客户端发出，服务器端对该请求作出响应并放回结果。

3.无状态保存
    http协议是一种不保存状态的协议，自身不对请求和响应之间的通信状态进行保存，不做持久化处理。

你可能会说：不对啊，我登录完网站之后能够记住密码，下次访问的时候就不用登陆了，这不是保存了么？
http协议要处理大量事务，为了保证其可伸缩性，被设计成了无保存状态，但是为了应对保存密码这种需求，引入了Cookie技术，相关内容后续会详解。
4.无连接
    无连接的含义是限制每次连接只处理一个请求，服务器处理完客户端的请求，并收到客户端的应答之后即断开链接，这样可以节省传输时间。
请求协议与响应协议
http协议包括由浏览器发送数据到服务器需要遵循的请求协议于服务器发送数据到浏览器需要遵循的响应协议。
在HTTP协议交互中的信息被称为HTTP报文，本身是由多行数据构成的字文本。
客户端的报文叫做请求报文，服务器端的报文叫做响应报文。

请求协议
格式：

请求方式：


get请求：
1.提交数据会放在URL之后，以?作为分隔，参数之间以&分隔；
2.提交数据大小有限制，因为浏览器对URL的长度有限制；


post请求：
1.提交数据放在http包的请求体中；
2.提交数据大小没有限制；


在服务器端get请求和post请求获取请求数据的方式也不同。
响应协议
格式：

相应状态码：
服务端给客户端返回的数据中包含状态码，借助它客户端可以知道服务端处理结果的大致状况。

HTTP状态码被分为五大类，如下表：

https是什么？
现在很多网站的URL开头不是http而是https，这是以安全为目标的http通道，是http的安全版。
通过在HTTP协议中加入SSL（Secure Sockets Layer,安全套接层）实现， SSL是为网络通信提供安全及数据完整性的一种安全协议。



10.2.3 基本属性





                                            字体属性
font-family:字体系列。可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。浏览器会使用它可识别的第一个值。
如果设置成inherit，则表示继承父元素的字体。
font-weight:字重（字体粗细）。
font-size:字体大小。
:color:设置内容的字体颜色。
文字属性
text-align：文本对齐。

line-height：行高。
text-decoration：文字装饰。

背景属性
常用背景相关属性：

background-repeat取值范围：

background-attachment取值范围：

background-position取值范围：

行内元素和块级元素的区别：（非常重要）
行内元素：
与其他行内元素并排；
不能设置宽、高。默认的宽度，就是文字的宽度。

块级元素：
霸占一行，不能与其他任何元素并列；
能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%。




11.1.5  练习题





                                            1.声明一个add函数，要求函数有返回值，并打印结果
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>1.声明一个add函数，要求函数有返回值，并打印结果</title>
</head>
<body>
<script type="text/javascript">
    function add(x, y) {
        return x + y;
    }
    console.log(add(1, 2));
</script>
</body>
</html>

2.对“hello world”进行翻转处理 要求变为："dlorw olleh"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>2.对“hello world”进行翻转处理 要求变为："dlorw olleh"</title>
</head>
<body>
<script type="text/javascript">
    function reverse_string(str) {
        return str.split("").reverse().join("");
    }
    console.log(reverse_string("hello world"));
</script>
</body>
</html>

3.如何定义一个对象？使用字面量方式要求：该对象有名字、年龄、爱好多个
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>3.定义一个对象，使用字面量方式要求：该对象有名字、年龄、爱好多个</title>
</head>
<body>
<script type="text/javascript">
    const Alex = {
        name: 'Alex',
        age: 19,
        hobby: 'code,reading_book'
    };
    console.log(Alex);
</script>
</body>
</html>

4.setTimeout()和setInterval()的区别？如何理解他们的作用
一次性定时器：setTimeout()
周期性循环定时器: setInterval()
对于这两个方法，需要注意的是如果要求在每隔一个固定的时间间隔后就精确地执行某动作，那么最好使用setInterval，而如果不想由于连续调用产生互相干扰的问题，尤其是每次函数的调用需要繁重的计算以及很长的处理时间，那么最好使用setTimeout。
5.对于标签文本内容值的操作使用的是哪个属性？input输入框呢？
标签文本内容值的操作使用的是 " innerHTML 或 innerText"    input输入框是：value。
6.获取DOM的三种方式？

通过标签
通过id
通过class

7.如何设置标签属性的值？比如类名如何设置？如何设置多个类型
双闭合标签： innerText或者innerHTML
单闭合标签：img、input标签，使用value进行赋值
标签的src属性和alt属性、a标签的href属性、input标签中的name、type属性等等
8.列举你知道的JavaScript事件
onclick  　　鼠标单击
ondblclick　　鼠标双击
onkeyup　　按下并释放键盘上的一个键时触发
onchange 　文本内容或下拉菜单中的选项发生改变
onfocus　　获得焦点，表示文本框等获得鼠标光标
onblur　　  失去焦点，表示文本框等失去鼠标光标
onmouseover  鼠标悬停，即鼠标停留在图片等的上方
onmouseout    鼠标移出，即离开图片等所在的区域
onload  　　    网页文档加载事件
onunload　　  关闭网页时
onsubmit　　 表单提交事件
onreset 　　   重置表单时
9.如何设置样式属性？比如设置该div的背景颜色为红色
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>9.如何设置样式属性？比如设置该div的背景颜色为红色</title>
    <style>
        div {
            width: 100px;
            height: 100px;
        }
    </style>
</head>
<body>
    <div id="9"></div>

<script type="text/javascript">
    var my_div = document.getElementById('9');
    my_div.style.backgroundColor = '#FF0000';
</script>
</body>
</html>

10.使用DOM操作，创建一个p标签，设置内容为alexsb，将p标签插入到div中。然后点击某个删除按钮，移除当前创建的p标签（练习dom的创建，修改内容，追加，删除）
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>10.使用DOM操作</title>
</head>
<body>
<button id="append" style="height: 100px; width: 100px; float: left">append</button>
<button id="remove" style="height: 100px; width: 100px; float: right">remove</button>
<div id="my_box" style="height: 100px; width: 100%; background-color: red"></div>

<script type="text/javascript">
    var append = document.getElementById('append');
    var remove = document.getElementById('remove');

    append.onclick = function () {
        var create_p = document.createElement('p');
        create_p.innerText = 'Alex';
        var my_div = document.getElementById('my_box');
        my_div.appendChild(create_p);
    };

    remove.onclick = function () {
        var my_div = document.getElementById('my_box');
        my_div.removeChild(my_div.lastChild);
    }
</script>
</body>
</html>

11.如何打开一个新的网站，比如打开路飞学城官网



10.1.3 标签分类与嵌套





                                            标签分类
HTML中标签元素三种不同类型：块状元素，行内元素，行内块状元素。
常用的块状元素：
<div> <p> <h1>~<h6> <ol> <ul> <table> <form> <li>

常用的行内元素
<a> <span> <br> <i> <em> <strong> <label>

常用的行内块状元素：
<img> <input>

块级元素特点：display:block;
1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。独占一行

2、元素的高度、宽度、行高以及顶和底边距都可设置。

3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。

行内元素特点：display:inline;
1、和其他元素都在一行上；

2、元素的高度、宽度及顶部和底部边距不可设置；

3、元素的宽度就是它包含的文字或图片的宽度，不可改变。

行内块状元素的特点：display:inline-block;
1、和其他元素都在一行上；

2、元素的高度、宽度、行高以及顶和底边距都可设置

标签嵌套
块元素可以包含内联元素或某些块元素，但内联元素却不能包含块元素，它只能包含其它的内联元素。
块级元素不能放在p标签里面。
有几个特殊的块级元素只能包含内嵌元素，不能再包含块级元素，这几个特殊的标签是：h1、h2、h3、h4、h5、h6、p



13.2.10 Ajax操作





                                            一、Ajax简介
AJAX（Asynchronous Javascript And XML）翻译成中文就是“异步Javascript和XML”。
即使用Javascript语言与服务器进行异步交互，传输的数据为XML（当然，传输的数据不只是XML,现在更多使用json数据）。
同步交互：客户端发出一个请求后，需要等待服务器响应结束后，才能发出第二个请求；
异步交互：客户端发出一个请求后，无需等待服务器响应结束，就可以发出第二个请求。
AJAX除了异步的特点外，还有一个就是：浏览器页面局部刷新；（这一特点给用户的感受是在不知不觉中完成请求和响应过程）
二、基于jQuery实现Ajax
<button class="send_Ajax">send_Ajax</button>
<script>
       $(".send_Ajax").click(function(){
           $.ajax({
               url:"/handle_Ajax/",
               type:"POST",
               data:{username:"Yuan",password:123},
               success:function(data){
                   console.log(data)
               },
         　　　　　　
               error: function (jqXHR, textStatus, err) {
                        console.log(arguments);
                    },
               complete: function (jqXHR, textStatus) {
                        console.log(textStatus);
                },
               statusCode: {
                    '403': function (jqXHR, textStatus, err) {
                          console.log(arguments);
                     },
                    '400': function (jqXHR, textStatus, err) {
                        console.log(arguments);
                    }
                }
           })
       })
</script>

三、案例
1.用户是否已被注册
在注册表单中，当用户填写了用户名后，把光标移开后，会自动向服务器发送异步请求。
服务器返回true或false，返回true表示这个用户名已经被注册过，返回false表示没有注册过。
客户端得到服务器返回的结果后，确定是否在用户名文本框后显示“用户名已被注册”的错误信息！
2.基于Ajax进行登录验证
用户在表单输入用户名与密码，通过Ajax提交给服务器，服务器验证后返回响应信息，客户端通过响应信息确定是否登录成功，成功，则跳转到首页，否则，在页面上显示相应的错误信息。
四、文件上传
1.请求头ContentType
ContentType指的是请求体的编码类型，常见的类型共有3种：
（1）application/x-www-form-urlencoded
浏览器的原生表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。
请求类似于下面这样（无关的请求头在本文中都省略掉了）：
（2）multipart/form-data
使用表单上传文件时，必须让表单的 enctype 等于 multipart/form-data。
POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data;
boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA

------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="user"

yuan
------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="file"; filename="chrome.png"
Content-Type: image/png

PNG ... content of chrome.png ...
------WebKitFormBoundaryrGKCBY7qhFd3TrwA--

这个例子稍微复杂点。
首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。
然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，本次请求的 boundary 是什么内容。
消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 --boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。
如果传输的是文件，还要包含文件名和文件类型信息。
消息主体最后以 --boundary-- 标示结束。
关于 multipart/form-data 的详细定义，请前往 rfc1867 查看。
这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。
上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生表单也只支持这两种方式（通过 元素的 enctype 属性指定，默认为 application/x-www-form-urlencoded。其实 enctype 还支持 text/plain，不过用得非常少）。
随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。
（3）application/json
application/json 这个 Content-Type 作为响应头大家肯定不陌生。
实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。
由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。
JSON 格式支持比键值对复杂得多的结构化数据，这一点也很有用。
记得我几年前做一个项目时，需要提交的数据层次非常深，我就是把数据 JSON 序列化之后来提交的。
不过当时我是把 JSON 字符串作为 val，仍然放在键值对里，以 x-www-form-urlencoded 方式提交。
五、基于form表单的文件上传
模板部分
<form action="" method="post" enctype="multipart/form-data">
      用户名 <input type="text" name="user">
      头像 <input type="file" name="avatar">
    <input type="submit">
</form>

视图部分
def index(request):
    print(request.body)   # 原始的请求体数据
    print(request.GET)    # GET请求数据
    print(request.POST)   # POST请求数据
    print(request.FILES)  # 上传的文件数据
    return render(request,"index.html")

六、基于Ajax的文件上传
模板部分
<form>
      用户名 <input type="text" id="user">
      头像 <input type="file" id="avatar">
     <input type="button" id="ajax-submit" value="ajax-submit">
</form>

<script>

    $("#ajax-submit").click(function(){
        var formdata=new FormData();
        formdata.append("user",$("#user").val());
        formdata.append("avatar_img",$("#avatar")[0].files[0]);
        $.ajax({
            url:"",
            type:"post",
            data:formdata,
            processData: false ,    // 不处理数据
            contentType: false,    // 不设置内容类型
            success:function(data){
                console.log(data)
            }
        })
    })
</script>

视图部分
def index(request):
    if request.is_ajax():
        print(request.body)   # 原始的请求体数据
        print(request.GET)    # GET请求数据
        print(request.POST)   # POST请求数据
        print(request.FILES)  # 上传的文件数据
        return HttpResponse("ok")
    return render(request,"index.html")

检查浏览器的请求头：
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryaWl9k5ZMiTAzx3FT




